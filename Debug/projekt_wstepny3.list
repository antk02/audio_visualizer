
projekt_wstepny3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08004c18  08004c18  00014c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e60  08004e60  00020670  2**0
                  CONTENTS
  4 .ARM          00000000  08004e60  08004e60  00020670  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e60  08004e60  00020670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000670  20000000  08004e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000670  080054d8  00020670  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  080054d8  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b3c  00000000  00000000  00020699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf0  00000000  00000000  000291d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017539  00000000  00000000  0002bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095ee  00000000  00000000  00043259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a73  00000000  00000000  0004c847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d32ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002668  00000000  00000000  000d3310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000670 	.word	0x20000670
 800012c:	00000000 	.word	0x00000000
 8000130:	08004bfc 	.word	0x08004bfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000674 	.word	0x20000674
 800014c:	08004bfc 	.word	0x08004bfc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__gedf2>:
 800072c:	f04f 3cff 	mov.w	ip, #4294967295
 8000730:	e006      	b.n	8000740 <__cmpdf2+0x4>
 8000732:	bf00      	nop

08000734 <__ledf2>:
 8000734:	f04f 0c01 	mov.w	ip, #1
 8000738:	e002      	b.n	8000740 <__cmpdf2+0x4>
 800073a:	bf00      	nop

0800073c <__cmpdf2>:
 800073c:	f04f 0c01 	mov.w	ip, #1
 8000740:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000744:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000748:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800074c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000756:	d01b      	beq.n	8000790 <__cmpdf2+0x54>
 8000758:	b001      	add	sp, #4
 800075a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800075e:	bf0c      	ite	eq
 8000760:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000764:	ea91 0f03 	teqne	r1, r3
 8000768:	bf02      	ittt	eq
 800076a:	ea90 0f02 	teqeq	r0, r2
 800076e:	2000      	moveq	r0, #0
 8000770:	4770      	bxeq	lr
 8000772:	f110 0f00 	cmn.w	r0, #0
 8000776:	ea91 0f03 	teq	r1, r3
 800077a:	bf58      	it	pl
 800077c:	4299      	cmppl	r1, r3
 800077e:	bf08      	it	eq
 8000780:	4290      	cmpeq	r0, r2
 8000782:	bf2c      	ite	cs
 8000784:	17d8      	asrcs	r0, r3, #31
 8000786:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800078a:	f040 0001 	orr.w	r0, r0, #1
 800078e:	4770      	bx	lr
 8000790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d102      	bne.n	80007a0 <__cmpdf2+0x64>
 800079a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800079e:	d107      	bne.n	80007b0 <__cmpdf2+0x74>
 80007a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a8:	d1d6      	bne.n	8000758 <__cmpdf2+0x1c>
 80007aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007ae:	d0d3      	beq.n	8000758 <__cmpdf2+0x1c>
 80007b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdrcmple>:
 80007b8:	4684      	mov	ip, r0
 80007ba:	4610      	mov	r0, r2
 80007bc:	4662      	mov	r2, ip
 80007be:	468c      	mov	ip, r1
 80007c0:	4619      	mov	r1, r3
 80007c2:	4663      	mov	r3, ip
 80007c4:	e000      	b.n	80007c8 <__aeabi_cdcmpeq>
 80007c6:	bf00      	nop

080007c8 <__aeabi_cdcmpeq>:
 80007c8:	b501      	push	{r0, lr}
 80007ca:	f7ff ffb7 	bl	800073c <__cmpdf2>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	bf48      	it	mi
 80007d2:	f110 0f00 	cmnmi.w	r0, #0
 80007d6:	bd01      	pop	{r0, pc}

080007d8 <__aeabi_dcmpeq>:
 80007d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007dc:	f7ff fff4 	bl	80007c8 <__aeabi_cdcmpeq>
 80007e0:	bf0c      	ite	eq
 80007e2:	2001      	moveq	r0, #1
 80007e4:	2000      	movne	r0, #0
 80007e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ea:	bf00      	nop

080007ec <__aeabi_dcmplt>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff ffea 	bl	80007c8 <__aeabi_cdcmpeq>
 80007f4:	bf34      	ite	cc
 80007f6:	2001      	movcc	r0, #1
 80007f8:	2000      	movcs	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_dcmple>:
 8000800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000804:	f7ff ffe0 	bl	80007c8 <__aeabi_cdcmpeq>
 8000808:	bf94      	ite	ls
 800080a:	2001      	movls	r0, #1
 800080c:	2000      	movhi	r0, #0
 800080e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000812:	bf00      	nop

08000814 <__aeabi_dcmpge>:
 8000814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000818:	f7ff ffce 	bl	80007b8 <__aeabi_cdrcmple>
 800081c:	bf94      	ite	ls
 800081e:	2001      	movls	r0, #1
 8000820:	2000      	movhi	r0, #0
 8000822:	f85d fb08 	ldr.w	pc, [sp], #8
 8000826:	bf00      	nop

08000828 <__aeabi_dcmpgt>:
 8000828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800082c:	f7ff ffc4 	bl	80007b8 <__aeabi_cdrcmple>
 8000830:	bf34      	ite	cc
 8000832:	2001      	movcc	r0, #1
 8000834:	2000      	movcs	r0, #0
 8000836:	f85d fb08 	ldr.w	pc, [sp], #8
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	0000      	movs	r0, r0
	...

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000894:	b088      	sub	sp, #32
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fdb0 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f922 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f000 f9fe 	bl	8000ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a4:	f000 f9b4 	bl	8000c10 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80008a8:	f000 f9dc 	bl	8000c64 <MX_DMA_Init>
  MX_ADC1_Init();
 80008ac:	f000 f972 	bl	8000b94 <MX_ADC1_Init>
  	//arm_rfft_instance_f32 S;
    //arm_cfft_instance_f32 S_CFFT;

    //arm_rfft_init_f32(&S, &S_CFFT, 128, 0, 1);

    HAL_ADC_Start_DMA(&hadc1, &adc_data, 2);
 80008b0:	2202      	movs	r2, #2
 80008b2:	4983      	ldr	r1, [pc, #524]	; (8000ac0 <main+0x230>)
 80008b4:	4883      	ldr	r0, [pc, #524]	; (8000ac4 <main+0x234>)
 80008b6:	f000 feff 	bl	80016b8 <HAL_ADC_Start_DMA>

    HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008be:	f000 fdff 	bl	80014c0 <HAL_Delay>

    /*---------------------Generacja tablicy probek------------------------*/
    int freq = 1000;
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	613b      	str	r3, [r7, #16]

    for(int i=0; i<128; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	e09d      	b.n	8000a0a <main+0x17a>
    {
        real[i] = (int16_t) 1000*sin(2*PI*freq*i*0.00001) +
 80008ce:	6938      	ldr	r0, [r7, #16]
 80008d0:	f7ff fec2 	bl	8000658 <__aeabi_i2d>
 80008d4:	a370      	add	r3, pc, #448	; (adr r3, 8000a98 <main+0x208>)
 80008d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008da:	f7ff fc41 	bl	8000160 <__aeabi_dmul>
 80008de:	4602      	mov	r2, r0
 80008e0:	460b      	mov	r3, r1
 80008e2:	4614      	mov	r4, r2
 80008e4:	461d      	mov	r5, r3
 80008e6:	69f8      	ldr	r0, [r7, #28]
 80008e8:	f7ff feb6 	bl	8000658 <__aeabi_i2d>
 80008ec:	4602      	mov	r2, r0
 80008ee:	460b      	mov	r3, r1
 80008f0:	4620      	mov	r0, r4
 80008f2:	4629      	mov	r1, r5
 80008f4:	f7ff fc34 	bl	8000160 <__aeabi_dmul>
 80008f8:	4602      	mov	r2, r0
 80008fa:	460b      	mov	r3, r1
 80008fc:	4610      	mov	r0, r2
 80008fe:	4619      	mov	r1, r3
 8000900:	a367      	add	r3, pc, #412	; (adr r3, 8000aa0 <main+0x210>)
 8000902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000906:	f7ff fc2b 	bl	8000160 <__aeabi_dmul>
 800090a:	4602      	mov	r2, r0
 800090c:	460b      	mov	r3, r1
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	f003 f973 	bl	8003bfc <sin>
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	4b6b      	ldr	r3, [pc, #428]	; (8000ac8 <main+0x238>)
 800091c:	f7ff fc20 	bl	8000160 <__aeabi_dmul>
 8000920:	4602      	mov	r2, r0
 8000922:	460b      	mov	r3, r1
 8000924:	4614      	mov	r4, r2
 8000926:	461d      	mov	r5, r3
                                      800*sin(2*PI*2*freq*i*0.00001) +
 8000928:	6938      	ldr	r0, [r7, #16]
 800092a:	f7ff fe95 	bl	8000658 <__aeabi_i2d>
 800092e:	a35e      	add	r3, pc, #376	; (adr r3, 8000aa8 <main+0x218>)
 8000930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000934:	f7ff fc14 	bl	8000160 <__aeabi_dmul>
 8000938:	4602      	mov	r2, r0
 800093a:	460b      	mov	r3, r1
 800093c:	4690      	mov	r8, r2
 800093e:	4699      	mov	r9, r3
 8000940:	69f8      	ldr	r0, [r7, #28]
 8000942:	f7ff fe89 	bl	8000658 <__aeabi_i2d>
 8000946:	4602      	mov	r2, r0
 8000948:	460b      	mov	r3, r1
 800094a:	4640      	mov	r0, r8
 800094c:	4649      	mov	r1, r9
 800094e:	f7ff fc07 	bl	8000160 <__aeabi_dmul>
 8000952:	4602      	mov	r2, r0
 8000954:	460b      	mov	r3, r1
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	a351      	add	r3, pc, #324	; (adr r3, 8000aa0 <main+0x210>)
 800095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000960:	f7ff fbfe 	bl	8000160 <__aeabi_dmul>
 8000964:	4602      	mov	r2, r0
 8000966:	460b      	mov	r3, r1
 8000968:	4610      	mov	r0, r2
 800096a:	4619      	mov	r1, r3
 800096c:	f003 f946 	bl	8003bfc <sin>
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <main+0x23c>)
 8000976:	f7ff fbf3 	bl	8000160 <__aeabi_dmul>
 800097a:	4602      	mov	r2, r0
 800097c:	460b      	mov	r3, r1
        real[i] = (int16_t) 1000*sin(2*PI*freq*i*0.00001) +
 800097e:	4620      	mov	r0, r4
 8000980:	4629      	mov	r1, r5
 8000982:	f7ff fd1d 	bl	80003c0 <__adddf3>
 8000986:	4602      	mov	r2, r0
 8000988:	460b      	mov	r3, r1
 800098a:	4614      	mov	r4, r2
 800098c:	461d      	mov	r5, r3
                                      300*sin(2*PI*3*freq*i*0.00001);
 800098e:	6938      	ldr	r0, [r7, #16]
 8000990:	f7ff fe62 	bl	8000658 <__aeabi_i2d>
 8000994:	a346      	add	r3, pc, #280	; (adr r3, 8000ab0 <main+0x220>)
 8000996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099a:	f7ff fbe1 	bl	8000160 <__aeabi_dmul>
 800099e:	4602      	mov	r2, r0
 80009a0:	460b      	mov	r3, r1
 80009a2:	4690      	mov	r8, r2
 80009a4:	4699      	mov	r9, r3
 80009a6:	69f8      	ldr	r0, [r7, #28]
 80009a8:	f7ff fe56 	bl	8000658 <__aeabi_i2d>
 80009ac:	4602      	mov	r2, r0
 80009ae:	460b      	mov	r3, r1
 80009b0:	4640      	mov	r0, r8
 80009b2:	4649      	mov	r1, r9
 80009b4:	f7ff fbd4 	bl	8000160 <__aeabi_dmul>
 80009b8:	4602      	mov	r2, r0
 80009ba:	460b      	mov	r3, r1
 80009bc:	4610      	mov	r0, r2
 80009be:	4619      	mov	r1, r3
 80009c0:	a337      	add	r3, pc, #220	; (adr r3, 8000aa0 <main+0x210>)
 80009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c6:	f7ff fbcb 	bl	8000160 <__aeabi_dmul>
 80009ca:	4602      	mov	r2, r0
 80009cc:	460b      	mov	r3, r1
 80009ce:	4610      	mov	r0, r2
 80009d0:	4619      	mov	r1, r3
 80009d2:	f003 f913 	bl	8003bfc <sin>
 80009d6:	a338      	add	r3, pc, #224	; (adr r3, 8000ab8 <main+0x228>)
 80009d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009dc:	f7ff fbc0 	bl	8000160 <__aeabi_dmul>
 80009e0:	4602      	mov	r2, r0
 80009e2:	460b      	mov	r3, r1
                                      800*sin(2*PI*2*freq*i*0.00001) +
 80009e4:	4620      	mov	r0, r4
 80009e6:	4629      	mov	r1, r5
 80009e8:	f7ff fcea 	bl	80003c0 <__adddf3>
 80009ec:	4602      	mov	r2, r0
 80009ee:	460b      	mov	r3, r1
        real[i] = (int16_t) 1000*sin(2*PI*freq*i*0.00001) +
 80009f0:	4610      	mov	r0, r2
 80009f2:	4619      	mov	r1, r3
 80009f4:	f7ff ff22 	bl	800083c <__aeabi_d2iz>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b219      	sxth	r1, r3
 80009fc:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <main+0x240>)
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i<128; i++)
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	3301      	adds	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0e:	f77f af5e 	ble.w	80008ce <main+0x3e>
	  //for(int i = 0; i < 128; i++)
	  //{
	  //	 real[i] = adc_data;
	  //}

	  UART2_Print("[");
 8000a12:	4830      	ldr	r0, [pc, #192]	; (8000ad4 <main+0x244>)
 8000a14:	f000 f9b2 	bl	8000d7c <UART2_Print>
	  for(int i = 0; i < 128; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	e010      	b.n	8000a40 <main+0x1b0>
	  {
	   	  sprintf(text, "%d, ", real[i]);
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <main+0x240>)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a26:	461a      	mov	r2, r3
 8000a28:	463b      	mov	r3, r7
 8000a2a:	492b      	ldr	r1, [pc, #172]	; (8000ad8 <main+0x248>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fcab 	bl	8003388 <siprintf>
	   	  UART2_Print(text);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f9a1 	bl	8000d7c <UART2_Print>
	  for(int i = 0; i < 128; i++)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2b7f      	cmp	r3, #127	; 0x7f
 8000a44:	ddeb      	ble.n	8000a1e <main+0x18e>
	  }
	  UART2_Print(" ]\n");
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <main+0x24c>)
 8000a48:	f000 f998 	bl	8000d7c <UART2_Print>

	  fix_fft(real, imag, 7, 0);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2207      	movs	r2, #7
 8000a50:	4923      	ldr	r1, [pc, #140]	; (8000ae0 <main+0x250>)
 8000a52:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <main+0x240>)
 8000a54:	f000 f9ce 	bl	8000df4 <fix_fft>

	  //sprintf(text, "%c ", "[");
	  UART2_Print("[");
 8000a58:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <main+0x244>)
 8000a5a:	f000 f98f 	bl	8000d7c <UART2_Print>

	  for(int i = 0; i < 64; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e010      	b.n	8000a86 <main+0x1f6>
	  {
	  	  sprintf(text, "%d, ", real[i]);
 8000a64:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <main+0x240>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4919      	ldr	r1, [pc, #100]	; (8000ad8 <main+0x248>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fc88 	bl	8003388 <siprintf>
	  	  UART2_Print(text);
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f97e 	bl	8000d7c <UART2_Print>
	  for(int i = 0; i < 64; i++)
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3301      	adds	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8a:	ddeb      	ble.n	8000a64 <main+0x1d4>
	  }

	  //sprintf(text, " %c", "]");
	  UART2_Print(" ]\n");
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <main+0x24c>)
 8000a8e:	f000 f975 	bl	8000d7c <UART2_Print>

	  while(1);
 8000a92:	e7fe      	b.n	8000a92 <main+0x202>
 8000a94:	f3af 8000 	nop.w
 8000a98:	51eb851f 	.word	0x51eb851f
 8000a9c:	40191eb8 	.word	0x40191eb8
 8000aa0:	88e368f1 	.word	0x88e368f1
 8000aa4:	3ee4f8b5 	.word	0x3ee4f8b5
 8000aa8:	51eb851f 	.word	0x51eb851f
 8000aac:	40291eb8 	.word	0x40291eb8
 8000ab0:	3d70a3d7 	.word	0x3d70a3d7
 8000ab4:	4032d70a 	.word	0x4032d70a
 8000ab8:	00000000 	.word	0x00000000
 8000abc:	4072c000 	.word	0x4072c000
 8000ac0:	2000068c 	.word	0x2000068c
 8000ac4:	2000089c 	.word	0x2000089c
 8000ac8:	408f4000 	.word	0x408f4000
 8000acc:	40890000 	.word	0x40890000
 8000ad0:	20000690 	.word	0x20000690
 8000ad4:	08004c18 	.word	0x08004c18
 8000ad8:	08004c1c 	.word	0x08004c1c
 8000adc:	08004c24 	.word	0x08004c24
 8000ae0:	20000790 	.word	0x20000790

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b094      	sub	sp, #80	; 0x50
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	2228      	movs	r2, #40	; 0x28
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fc40 	bl	8003378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b24:	2300      	movs	r3, #0
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b28:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fd6e 	bl	8002614 <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b3e:	f000 f931 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	230f      	movs	r3, #15
 8000b44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 ffd8 	bl	8002b14 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b6a:	f000 f91b 	bl	8000da4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000b72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b76:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f964 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b86:	f000 f90d 	bl	8000da4 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	; 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000ba6:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <MX_ADC1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bbe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bd2:	f000 fc99 	bl	8001508 <HAL_ADC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bdc:	f000 f8e2 	bl	8000da4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000be8:	2303      	movs	r3, #3
 8000bea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_ADC1_Init+0x74>)
 8000bf2:	f000 fe5b 	bl	80018ac <HAL_ADC_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bfc:	f000 f8d2 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000089c 	.word	0x2000089c
 8000c0c:	40012400 	.word	0x40012400

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_USART2_UART_Init+0x50>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c48:	f002 f9b4 	bl	8002fb4 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c52:	f000 f8a7 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000910 	.word	0x20000910
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_DMA_Init+0x38>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <MX_DMA_Init+0x38>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_DMA_Init+0x38>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200b      	movs	r0, #11
 8000c88:	f001 f8e1 	bl	8001e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c8c:	200b      	movs	r0, #11
 8000c8e:	f001 f8fa 	bl	8001e86 <HAL_NVIC_EnableIRQ>

}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0320 	and.w	r3, r3, #32
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_GPIO_Init+0xcc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	4815      	ldr	r0, [pc, #84]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000d1a:	f001 fc41 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_GPIO_Init+0xd4>)
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_GPIO_Init+0xd8>)
 8000d34:	f001 fab0 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4808      	ldr	r0, [pc, #32]	; (8000d70 <MX_GPIO_Init+0xd0>)
 8000d50:	f001 faa2 	bl	8002298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	f001 f878 	bl	8001e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f001 f891 	bl	8001e86 <HAL_NVIC_EnableIRQ>

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	10110000 	.word	0x10110000
 8000d78:	40011000 	.word	0x40011000

08000d7c <UART2_Print>:

/* USER CODE BEGIN 4 */
void UART2_Print(uint8_t* uart_message)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, uart_message, strlen((char*)uart_message), 30);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff f9e3 	bl	8000150 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	231e      	movs	r3, #30
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <UART2_Print+0x24>)
 8000d94:	f002 f95b 	bl	800304e <HAL_UART_Transmit>

}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000910 	.word	0x20000910

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>

08000dae <FIX_MPY>:
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 16-bit.
*/
int16_t FIX_MPY(int16_t a, int16_t b)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	460a      	mov	r2, r1
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	80bb      	strh	r3, [r7, #4]
    /* shift right one less bit (i.e. 15-1) */
    int32_t c = ((int32_t)a * (int32_t)b) >> 14;
 8000dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dc6:	fb02 f303 	mul.w	r3, r2, r3
 8000dca:	139b      	asrs	r3, r3, #14
 8000dcc:	60fb      	str	r3, [r7, #12]
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	80bb      	strh	r3, [r7, #4]
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	105b      	asrs	r3, r3, #1
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	80fb      	strh	r3, [r7, #6]
    return a;
 8000de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <fix_fft>:
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int32_t fix_fft(int16_t fr[], int16_t fi[], int16_t m, uint8_t inverse)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b093      	sub	sp, #76	; 0x4c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	460b      	mov	r3, r1
 8000e04:	80fb      	strh	r3, [r7, #6]
 8000e06:	4613      	mov	r3, r2
 8000e08:	717b      	strb	r3, [r7, #5]
    int32_t mr, nn, i, j, l, k, istep, n, scale, shift;
    int16_t qr, qi, tr, ti, wr, wi;

    n = 1 << m;
 8000e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	623b      	str	r3, [r7, #32]

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1c:	dd02      	ble.n	8000e24 <fix_fft+0x30>
        return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e171      	b.n	8001108 <fix_fft+0x314>

    mr = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
    nn = n - 1;
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	61fb      	str	r3, [r7, #28]
    scale = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30

    /* decimation in time - re-order data */
    for (m = 1; m <= nn; ++m) {
 8000e32:	2301      	movs	r3, #1
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	e04e      	b.n	8000ed6 <fix_fft+0xe2>
        l = n;
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
        do {
            l >>= 1;
 8000e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3e:	105b      	asrs	r3, r3, #1
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (mr + l > nn);
 8000e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e46:	4413      	add	r3, r2
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbf6      	blt.n	8000e3c <fix_fft+0x48>
        mr = (mr & (l - 1)) + l;
 8000e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e50:	1e5a      	subs	r2, r3, #1
 8000e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e54:	4013      	ands	r3, r2
 8000e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e58:	4413      	add	r3, r2
 8000e5a:	647b      	str	r3, [r7, #68]	; 0x44

        if (mr <= m)
 8000e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e62:	429a      	cmp	r2, r3
 8000e64:	dd32      	ble.n	8000ecc <fix_fft+0xd8>
            continue;
        tr = fr[m];
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	82fb      	strh	r3, [r7, #22]
        fr[m] = fr[mr];
 8000e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	68f9      	ldr	r1, [r7, #12]
 8000e84:	440b      	add	r3, r1
 8000e86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e8a:	801a      	strh	r2, [r3, #0]
        fr[mr] = tr;
 8000e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	8afa      	ldrh	r2, [r7, #22]
 8000e96:	801a      	strh	r2, [r3, #0]
        ti = fi[m];
 8000e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	82bb      	strh	r3, [r7, #20]
        fi[m] = fi[mr];
 8000ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	441a      	add	r2, r3
 8000eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ebc:	801a      	strh	r2, [r3, #0]
        fi[mr] = ti;
 8000ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	8aba      	ldrh	r2, [r7, #20]
 8000ec8:	801a      	strh	r2, [r3, #0]
 8000eca:	e000      	b.n	8000ece <fix_fft+0xda>
            continue;
 8000ecc:	bf00      	nop
    for (m = 1; m <= nn; ++m) {
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	daab      	bge.n	8000e38 <fix_fft+0x44>
    }

    l = 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    k = LOG2_N_WAVE - 1;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    while (l < n) {
 8000ee8:	e108      	b.n	80010fc <fix_fft+0x308>
        if (inverse) {
 8000eea:	797b      	ldrb	r3, [r7, #5]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d039      	beq.n	8000f64 <fix_fft+0x170>
            /* variable scaling, depending upon data */
            shift = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (i = 0; i < n; ++i) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8000ef8:	e029      	b.n	8000f4e <fix_fft+0x15a>
                j = fr[i];
 8000efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (j < 0)
 8000f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da02      	bge.n	8000f14 <fix_fft+0x120>
                    j = -j;
 8000f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f10:	425b      	negs	r3, r3
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
                m = fi[i];
 8000f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	80fb      	strh	r3, [r7, #6]
                if (m < 0)
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da03      	bge.n	8000f30 <fix_fft+0x13c>
                    m = -m;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	80fb      	strh	r3, [r7, #6]
                if (j > 16383 || m > 16383) {
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f36:	da04      	bge.n	8000f42 <fix_fft+0x14e>
 8000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f40:	db02      	blt.n	8000f48 <fix_fft+0x154>
                    shift = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8000f46:	e006      	b.n	8000f56 <fix_fft+0x162>
            for (i = 0; i < n; ++i) {
 8000f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dbd1      	blt.n	8000efa <fix_fft+0x106>
                }
            }
            if (shift)
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <fix_fft+0x174>
                ++scale;
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5e:	3301      	adds	r3, #1
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
 8000f62:	e001      	b.n	8000f68 <fix_fft+0x174>
			  fixed scaling, for proper normalization --
			  there will be log2(n) passes, so this results
			  in an overall factor of 1/n, distributed to
			  maximize arithmetic accuracy.
			*/
            shift = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*
		  it may not be obvious, but the shift will be
		  performed on each data point exactly once,
		  during this pass.
		*/
        istep = l << 1;
 8000f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
        for (m = 0; m < l; ++m) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	e0b8      	b.n	80010e6 <fix_fft+0x2f2>
            j = m << k;
 8000f74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* 0 <= j < N_WAVE/2 */
            wr = Sinewave[j + N_WAVE / 4];
 8000f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <fix_fft+0x31c>)
 8000f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8c:	84fb      	strh	r3, [r7, #38]	; 0x26
            wi = -Sinewave[j];
 8000f8e:	4a60      	ldr	r2, [pc, #384]	; (8001110 <fix_fft+0x31c>)
 8000f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f92:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	425b      	negs	r3, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (inverse)
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <fix_fft+0x1b8>
                wi = -wi;
 8000fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fa6:	425b      	negs	r3, r3
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (shift) {
 8000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <fix_fft+0x1ce>
                wr >>= 1;
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fb6:	105b      	asrs	r3, r3, #1
 8000fb8:	84fb      	strh	r3, [r7, #38]	; 0x26
                wi >>= 1;
 8000fba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000fbe:	105b      	asrs	r3, r3, #1
 8000fc0:	84bb      	strh	r3, [r7, #36]	; 0x24
            }
            for (i = m; i < n; i += istep) {
 8000fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8000fc8:	e084      	b.n	80010d4 <fix_fft+0x2e0>
                j = i + l;
 8000fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fce:	4413      	add	r3, r2
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
                tr = FIX_MPY(wr, fr[j]) - FIX_MPY(wi, fi[j]);
 8000fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fde:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fee2 	bl	8000dae <FIX_MPY>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29c      	uxth	r4, r3
 8000fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ffa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fed4 	bl	8000dae <FIX_MPY>
 8001006:	4603      	mov	r3, r0
 8001008:	b29b      	uxth	r3, r3
 800100a:	1ae3      	subs	r3, r4, r3
 800100c:	b29b      	uxth	r3, r3
 800100e:	82fb      	strh	r3, [r7, #22]
                ti = FIX_MPY(wr, fi[j]) + FIX_MPY(wi, fr[j]);
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	f9b3 2000 	ldrsh.w	r2, [r3]
 800101c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fec3 	bl	8000dae <FIX_MPY>
 8001028:	4603      	mov	r3, r0
 800102a:	b29c      	uxth	r4, r3
 800102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001038:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff feb5 	bl	8000dae <FIX_MPY>
 8001044:	4603      	mov	r3, r0
 8001046:	b29b      	uxth	r3, r3
 8001048:	4423      	add	r3, r4
 800104a:	b29b      	uxth	r3, r3
 800104c:	82bb      	strh	r3, [r7, #20]
                qr = fr[i];
 800104e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	857b      	strh	r3, [r7, #42]	; 0x2a
                qi = fi[i];
 800105a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	853b      	strh	r3, [r7, #40]	; 0x28
                if (shift) {
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <fix_fft+0x288>
                    qr >>= 1;
 800106c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001070:	105b      	asrs	r3, r3, #1
 8001072:	857b      	strh	r3, [r7, #42]	; 0x2a
                    qi >>= 1;
 8001074:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001078:	105b      	asrs	r3, r3, #1
 800107a:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                fr[j] = qr - tr;
 800107c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800107e:	8afb      	ldrh	r3, [r7, #22]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b299      	uxth	r1, r3
 8001084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	b20a      	sxth	r2, r1
 800108e:	801a      	strh	r2, [r3, #0]
                fi[j] = qi - ti;
 8001090:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001092:	8abb      	ldrh	r3, [r7, #20]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	b299      	uxth	r1, r3
 8001098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	4413      	add	r3, r2
 80010a0:	b20a      	sxth	r2, r1
 80010a2:	801a      	strh	r2, [r3, #0]
                fr[i] = qr + tr;
 80010a4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80010a6:	8afb      	ldrh	r3, [r7, #22]
 80010a8:	4413      	add	r3, r2
 80010aa:	b299      	uxth	r1, r3
 80010ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	b20a      	sxth	r2, r1
 80010b6:	801a      	strh	r2, [r3, #0]
                fi[i] = qi + ti;
 80010b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010ba:	8abb      	ldrh	r3, [r7, #20]
 80010bc:	4413      	add	r3, r2
 80010be:	b299      	uxth	r1, r3
 80010c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	4413      	add	r3, r2
 80010c8:	b20a      	sxth	r2, r1
 80010ca:	801a      	strh	r2, [r3, #0]
            for (i = m; i < n; i += istep) {
 80010cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4413      	add	r3, r2
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
 80010d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f6ff af76 	blt.w	8000fca <fix_fft+0x1d6>
        for (m = 0; m < l; ++m) {
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	80fb      	strh	r3, [r7, #6]
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f73f af41 	bgt.w	8000f74 <fix_fft+0x180>
            }
        }
        --k;
 80010f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f4:	3b01      	subs	r3, #1
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
        l = istep;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l < n) {
 80010fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	429a      	cmp	r2, r3
 8001102:	f6ff aef2 	blt.w	8000eea <fix_fft+0xf6>
    }
    return scale;
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001108:	4618      	mov	r0, r3
 800110a:	374c      	adds	r7, #76	; 0x4c
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	20000000 	.word	0x20000000

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_MspInit+0x5c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_MspInit+0x5c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_MspInit+0x5c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_MspInit+0x5c>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_MspInit+0x5c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_MspInit+0x5c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_MspInit+0x60>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_MspInit+0x60>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000

08001178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a28      	ldr	r2, [pc, #160]	; (8001234 <HAL_ADC_MspInit+0xbc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d149      	bne.n	800122c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_ADC_MspInit+0xc0>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_ADC_MspInit+0xc0>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_ADC_MspInit+0xc0>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c8:	2301      	movs	r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	2303      	movs	r3, #3
 80011ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4819      	ldr	r0, [pc, #100]	; (800123c <HAL_ADC_MspInit+0xc4>)
 80011d8:	f001 f85e 	bl	8002298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_ADC_MspInit+0xcc>)
 80011e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 80011f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 80011fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001202:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 8001206:	2220      	movs	r2, #32
 8001208:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 8001212:	f000 fe53 	bl	8001ebc <HAL_DMA_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800121c:	f7ff fdc2 	bl	8000da4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 8001224:	621a      	str	r2, [r3, #32]
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_ADC_MspInit+0xc8>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40012400 	.word	0x40012400
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800
 8001240:	200008cc 	.word	0x200008cc
 8001244:	40020008 	.word	0x40020008

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <HAL_UART_MspInit+0x70>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d123      	bne.n	80012b0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_UART_MspInit+0x74>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <HAL_UART_MspInit+0x74>)
 800126e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001272:	61d3      	str	r3, [r2, #28]
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_MspInit+0x74>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_UART_MspInit+0x74>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_UART_MspInit+0x74>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_UART_MspInit+0x74>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001298:	230c      	movs	r3, #12
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_UART_MspInit+0x78>)
 80012ac:	f000 fff4 	bl	8002298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f8bd 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <DMA1_Channel1_IRQHandler+0x10>)
 800131a:	f000 fe89 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200008cc 	.word	0x200008cc

08001328 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800132c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001330:	f001 f94e 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f001 ffdc 	bl	8003324 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20005000 	.word	0x20005000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000890 	.word	0x20000890
 80013a0:	20000968 	.word	0x20000968

080013a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d6:	f7ff ffe5 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f001 ffa9 	bl	8003330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7ff fa57 	bl	8000890 <main>
  bx lr
 80013e2:	4770      	bx	lr
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000670 	.word	0x20000670
  ldr r2, =_sidata
 80013ec:	08004e68 	.word	0x08004e68
  ldr r2, =_sbss
 80013f0:	20000670 	.word	0x20000670
  ldr r4, =_ebss
 80013f4:	20000968 	.word	0x20000968

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x28>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 fd13 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f808 	bl	8001428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fe7c 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x54>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x58>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fd2b 	bl	8001ea2 <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f000 fcf3 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_InitTick+0x5c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000600 	.word	0x20000600
 8001480:	20000608 	.word	0x20000608
 8001484:	20000604 	.word	0x20000604

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_IncTick+0x20>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000608 	.word	0x20000608
 80014a8:	20000954 	.word	0x20000954

080014ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000954 	.word	0x20000954

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fff0 	bl	80014ac <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffe0 	bl	80014ac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000608 	.word	0x20000608

08001508 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0be      	b.n	80016a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	2b00      	cmp	r3, #0
 8001536:	d109      	bne.n	800154c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fe16 	bl	8001178 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 faff 	bl	8001b50 <ADC_ConversionStop_Disable>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 8099 	bne.w	8001696 <HAL_ADC_Init+0x18e>
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8095 	bne.w	8001696 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001574:	f023 0302 	bic.w	r3, r3, #2
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001588:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7b1b      	ldrb	r3, [r3, #12]
 800158e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001590:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	4313      	orrs	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a0:	d003      	beq.n	80015aa <HAL_ADC_Init+0xa2>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_ADC_Init+0xa8>
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	e000      	b.n	80015b2 <HAL_ADC_Init+0xaa>
 80015b0:	2300      	movs	r3, #0
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7d1b      	ldrb	r3, [r3, #20]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d119      	bne.n	80015f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7b1b      	ldrb	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	035a      	lsls	r2, r3, #13
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e00b      	b.n	80015f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f043 0201 	orr.w	r2, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_ADC_Init+0x1a8>)
 8001610:	4013      	ands	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	430b      	orrs	r3, r1
 800161a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001624:	d003      	beq.n	800162e <HAL_ADC_Init+0x126>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d104      	bne.n	8001638 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	3b01      	subs	r3, #1
 8001634:	051b      	lsls	r3, r3, #20
 8001636:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	430a      	orrs	r2, r1
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_ADC_Init+0x1ac>)
 8001654:	4013      	ands	r3, r2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d10b      	bne.n	8001674 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001672:	e018      	b.n	80016a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f023 0312 	bic.w	r3, r3, #18
 800167c:	f043 0210 	orr.w	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001694:	e007      	b.n	80016a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	ffe1f7fd 	.word	0xffe1f7fd
 80016b4:	ff1f0efe 	.word	0xff1f0efe

080016b8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a64      	ldr	r2, [pc, #400]	; (8001860 <HAL_ADC_Start_DMA+0x1a8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d004      	beq.n	80016dc <HAL_ADC_Start_DMA+0x24>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_ADC_Start_DMA+0x1ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d106      	bne.n	80016ea <HAL_ADC_Start_DMA+0x32>
 80016dc:	4b60      	ldr	r3, [pc, #384]	; (8001860 <HAL_ADC_Start_DMA+0x1a8>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 80b3 	bne.w	8001850 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_Start_DMA+0x40>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e0ae      	b.n	8001856 <HAL_ADC_Start_DMA+0x19e>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f9cb 	bl	8001a9c <ADC_Enable>
 8001706:	4603      	mov	r3, r0
 8001708:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f040 809a 	bne.w	8001846 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a4e      	ldr	r2, [pc, #312]	; (8001864 <HAL_ADC_Start_DMA+0x1ac>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d105      	bne.n	800173c <HAL_ADC_Start_DMA+0x84>
 8001730:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <HAL_ADC_Start_DMA+0x1a8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d115      	bne.n	8001768 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	2b00      	cmp	r3, #0
 8001754:	d026      	beq.n	80017a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800175e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001766:	e01d      	b.n	80017a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_ADC_Start_DMA+0x1a8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <HAL_ADC_Start_DMA+0xd0>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_ADC_Start_DMA+0x1ac>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10d      	bne.n	80017a4 <HAL_ADC_Start_DMA+0xec>
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <HAL_ADC_Start_DMA+0x1a8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d007      	beq.n	80017a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800179c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	f023 0206 	bic.w	r2, r3, #6
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_ADC_Start_DMA+0x1b0>)
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a24      	ldr	r2, [pc, #144]	; (800186c <HAL_ADC_Start_DMA+0x1b4>)
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a23      	ldr	r2, [pc, #140]	; (8001870 <HAL_ADC_Start_DMA+0x1b8>)
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0202 	mvn.w	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a18      	ldr	r0, [r3, #32]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	334c      	adds	r3, #76	; 0x4c
 8001808:	4619      	mov	r1, r3
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f000 fbaf 	bl	8001f70 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800181c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001820:	d108      	bne.n	8001834 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001830:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001832:	e00f      	b.n	8001854 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001842:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001844:	e006      	b.n	8001854 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800184e:	e001      	b.n	8001854 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001854:	7dfb      	ldrb	r3, [r7, #23]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40012400 	.word	0x40012400
 8001864:	40012800 	.word	0x40012800
 8001868:	08001bd3 	.word	0x08001bd3
 800186c:	08001c4f 	.word	0x08001c4f
 8001870:	08001c6b 	.word	0x08001c6b

08001874 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x20>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e0dc      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x1da>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d81c      	bhi.n	8001916 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b05      	subs	r3, #5
 80018ee:	221f      	movs	r2, #31
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4019      	ands	r1, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b05      	subs	r3, #5
 8001908:	fa00 f203 	lsl.w	r2, r0, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34
 8001914:	e03c      	b.n	8001990 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d81c      	bhi.n	8001958 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b23      	subs	r3, #35	; 0x23
 8001930:	221f      	movs	r2, #31
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	4019      	ands	r1, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b23      	subs	r3, #35	; 0x23
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
 8001956:	e01b      	b.n	8001990 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3b41      	subs	r3, #65	; 0x41
 800196a:	221f      	movs	r2, #31
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b41      	subs	r3, #65	; 0x41
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d91c      	bls.n	80019d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68d9      	ldr	r1, [r3, #12]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	3b1e      	subs	r3, #30
 80019aa:	2207      	movs	r2, #7
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4019      	ands	r1, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	3b1e      	subs	r3, #30
 80019c4:	fa00 f203 	lsl.w	r2, r0, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	e019      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6919      	ldr	r1, [r3, #16]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	2207      	movs	r2, #7
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4019      	ands	r1, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6898      	ldr	r0, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	fa00 f203 	lsl.w	r2, r0, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d003      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a12:	2b11      	cmp	r3, #17
 8001a14:	d132      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d125      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d126      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d11a      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	0c9a      	lsrs	r2, r3, #18
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a5c:	e002      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f9      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x1b2>
 8001a6a:	e007      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40012400 	.word	0x40012400
 8001a94:	20000600 	.word	0x20000600
 8001a98:	431bde83 	.word	0x431bde83

08001a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d040      	beq.n	8001b3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <ADC_Enable+0xac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <ADC_Enable+0xb0>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	0c9b      	lsrs	r3, r3, #18
 8001ad6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ad8:	e002      	b.n	8001ae0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ae6:	f7ff fce1 	bl	80014ac <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aec:	e01f      	b.n	8001b2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aee:	f7ff fcdd 	bl	80014ac <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d918      	bls.n	8001b2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d011      	beq.n	8001b2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f043 0210 	orr.w	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e007      	b.n	8001b3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d1d8      	bne.n	8001aee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000600 	.word	0x20000600
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d12e      	bne.n	8001bc8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b7a:	f7ff fc97 	bl	80014ac <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b80:	e01b      	b.n	8001bba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b82:	f7ff fc93 	bl	80014ac <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d914      	bls.n	8001bba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10d      	bne.n	8001bba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e007      	b.n	8001bca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d0dc      	beq.n	8001b82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d127      	bne.n	8001c3c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c06:	d115      	bne.n	8001c34 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d111      	bne.n	8001c34 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff fe1d 	bl	8001874 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c3a:	e004      	b.n	8001c46 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff fe12 	bl	8001886 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f043 0204 	orr.w	r2, r3, #4
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff fe01 	bl	8001898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4906      	ldr	r1, [pc, #24]	; (8001d38 <__NVIC_EnableIRQ+0x34>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff90 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff2d 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff42 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff35 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e043      	b.n	8001f5a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_DMA_Init+0xa8>)
 8001eda:	4413      	add	r3, r2
 8001edc:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <HAL_DMA_Init+0xac>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <HAL_DMA_Init+0xb0>)
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	bffdfff8 	.word	0xbffdfff8
 8001f68:	cccccccd 	.word	0xcccccccd
 8001f6c:	40020000 	.word	0x40020000

08001f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Start_IT+0x20>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e04a      	b.n	8002026 <HAL_DMA_Start_IT+0xb6>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d13a      	bne.n	8002018 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f938 	bl	800223c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 020e 	orr.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e00f      	b.n	8002006 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0204 	bic.w	r2, r2, #4
 8001ff4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 020a 	orr.w	r2, r2, #10
 8002004:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e005      	b.n	8002024 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002020:	2302      	movs	r3, #2
 8002022:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2204      	movs	r2, #4
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d04f      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc8>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d04a      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_DMA_IRQHandler+0x1f0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d029      	beq.n	80020de <HAL_DMA_IRQHandler+0xae>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_DMA_IRQHandler+0x1f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d022      	beq.n	80020da <HAL_DMA_IRQHandler+0xaa>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_DMA_IRQHandler+0x1f8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0xa4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a62      	ldr	r2, [pc, #392]	; (800222c <HAL_DMA_IRQHandler+0x1fc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d012      	beq.n	80020ce <HAL_DMA_IRQHandler+0x9e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a60      	ldr	r2, [pc, #384]	; (8002230 <HAL_DMA_IRQHandler+0x200>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00a      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x98>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_DMA_IRQHandler+0x204>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d102      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x92>
 80020bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020c0:	e00e      	b.n	80020e0 <HAL_DMA_IRQHandler+0xb0>
 80020c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020c6:	e00b      	b.n	80020e0 <HAL_DMA_IRQHandler+0xb0>
 80020c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020cc:	e008      	b.n	80020e0 <HAL_DMA_IRQHandler+0xb0>
 80020ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d2:	e005      	b.n	80020e0 <HAL_DMA_IRQHandler+0xb0>
 80020d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d8:	e002      	b.n	80020e0 <HAL_DMA_IRQHandler+0xb0>
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_IRQHandler+0xb0>
 80020de:	2304      	movs	r3, #4
 80020e0:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_DMA_IRQHandler+0x208>)
 80020e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8094 	beq.w	8002216 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020f6:	e08e      	b.n	8002216 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2202      	movs	r2, #2
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d056      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x186>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d051      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 020a 	bic.w	r2, r2, #10
 800212e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a38      	ldr	r2, [pc, #224]	; (8002220 <HAL_DMA_IRQHandler+0x1f0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d029      	beq.n	8002196 <HAL_DMA_IRQHandler+0x166>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a37      	ldr	r2, [pc, #220]	; (8002224 <HAL_DMA_IRQHandler+0x1f4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d022      	beq.n	8002192 <HAL_DMA_IRQHandler+0x162>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a35      	ldr	r2, [pc, #212]	; (8002228 <HAL_DMA_IRQHandler+0x1f8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01a      	beq.n	800218c <HAL_DMA_IRQHandler+0x15c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a34      	ldr	r2, [pc, #208]	; (800222c <HAL_DMA_IRQHandler+0x1fc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d012      	beq.n	8002186 <HAL_DMA_IRQHandler+0x156>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a32      	ldr	r2, [pc, #200]	; (8002230 <HAL_DMA_IRQHandler+0x200>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00a      	beq.n	8002180 <HAL_DMA_IRQHandler+0x150>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_DMA_IRQHandler+0x204>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d102      	bne.n	800217a <HAL_DMA_IRQHandler+0x14a>
 8002174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002178:	e00e      	b.n	8002198 <HAL_DMA_IRQHandler+0x168>
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	e00b      	b.n	8002198 <HAL_DMA_IRQHandler+0x168>
 8002180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002184:	e008      	b.n	8002198 <HAL_DMA_IRQHandler+0x168>
 8002186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218a:	e005      	b.n	8002198 <HAL_DMA_IRQHandler+0x168>
 800218c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002190:	e002      	b.n	8002198 <HAL_DMA_IRQHandler+0x168>
 8002192:	2320      	movs	r3, #32
 8002194:	e000      	b.n	8002198 <HAL_DMA_IRQHandler+0x168>
 8002196:	2302      	movs	r3, #2
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_DMA_IRQHandler+0x208>)
 800219a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d034      	beq.n	8002216 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021b4:	e02f      	b.n	8002216 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2208      	movs	r2, #8
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d028      	beq.n	8002218 <HAL_DMA_IRQHandler+0x1e8>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d023      	beq.n	8002218 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 020e 	bic.w	r2, r2, #14
 80021de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
    }
  }
  return;
 8002216:	bf00      	nop
 8002218:	bf00      	nop
}
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020008 	.word	0x40020008
 8002224:	4002001c 	.word	0x4002001c
 8002228:	40020030 	.word	0x40020030
 800222c:	40020044 	.word	0x40020044
 8002230:	40020058 	.word	0x40020058
 8002234:	4002006c 	.word	0x4002006c
 8002238:	40020000 	.word	0x40020000

0800223c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d108      	bne.n	800227c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800227a:	e007      	b.n	800228c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
	...

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b08b      	sub	sp, #44	; 0x2c
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022aa:	e169      	b.n	8002580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022ac:	2201      	movs	r2, #1
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 8158 	bne.w	800257a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a9a      	ldr	r2, [pc, #616]	; (8002538 <HAL_GPIO_Init+0x2a0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d05e      	beq.n	8002392 <HAL_GPIO_Init+0xfa>
 80022d4:	4a98      	ldr	r2, [pc, #608]	; (8002538 <HAL_GPIO_Init+0x2a0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d875      	bhi.n	80023c6 <HAL_GPIO_Init+0x12e>
 80022da:	4a98      	ldr	r2, [pc, #608]	; (800253c <HAL_GPIO_Init+0x2a4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d058      	beq.n	8002392 <HAL_GPIO_Init+0xfa>
 80022e0:	4a96      	ldr	r2, [pc, #600]	; (800253c <HAL_GPIO_Init+0x2a4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d86f      	bhi.n	80023c6 <HAL_GPIO_Init+0x12e>
 80022e6:	4a96      	ldr	r2, [pc, #600]	; (8002540 <HAL_GPIO_Init+0x2a8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d052      	beq.n	8002392 <HAL_GPIO_Init+0xfa>
 80022ec:	4a94      	ldr	r2, [pc, #592]	; (8002540 <HAL_GPIO_Init+0x2a8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d869      	bhi.n	80023c6 <HAL_GPIO_Init+0x12e>
 80022f2:	4a94      	ldr	r2, [pc, #592]	; (8002544 <HAL_GPIO_Init+0x2ac>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d04c      	beq.n	8002392 <HAL_GPIO_Init+0xfa>
 80022f8:	4a92      	ldr	r2, [pc, #584]	; (8002544 <HAL_GPIO_Init+0x2ac>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d863      	bhi.n	80023c6 <HAL_GPIO_Init+0x12e>
 80022fe:	4a92      	ldr	r2, [pc, #584]	; (8002548 <HAL_GPIO_Init+0x2b0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d046      	beq.n	8002392 <HAL_GPIO_Init+0xfa>
 8002304:	4a90      	ldr	r2, [pc, #576]	; (8002548 <HAL_GPIO_Init+0x2b0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d85d      	bhi.n	80023c6 <HAL_GPIO_Init+0x12e>
 800230a:	2b12      	cmp	r3, #18
 800230c:	d82a      	bhi.n	8002364 <HAL_GPIO_Init+0xcc>
 800230e:	2b12      	cmp	r3, #18
 8002310:	d859      	bhi.n	80023c6 <HAL_GPIO_Init+0x12e>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <HAL_GPIO_Init+0x80>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002393 	.word	0x08002393
 800231c:	0800236d 	.word	0x0800236d
 8002320:	0800237f 	.word	0x0800237f
 8002324:	080023c1 	.word	0x080023c1
 8002328:	080023c7 	.word	0x080023c7
 800232c:	080023c7 	.word	0x080023c7
 8002330:	080023c7 	.word	0x080023c7
 8002334:	080023c7 	.word	0x080023c7
 8002338:	080023c7 	.word	0x080023c7
 800233c:	080023c7 	.word	0x080023c7
 8002340:	080023c7 	.word	0x080023c7
 8002344:	080023c7 	.word	0x080023c7
 8002348:	080023c7 	.word	0x080023c7
 800234c:	080023c7 	.word	0x080023c7
 8002350:	080023c7 	.word	0x080023c7
 8002354:	080023c7 	.word	0x080023c7
 8002358:	080023c7 	.word	0x080023c7
 800235c:	08002375 	.word	0x08002375
 8002360:	08002389 	.word	0x08002389
 8002364:	4a79      	ldr	r2, [pc, #484]	; (800254c <HAL_GPIO_Init+0x2b4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800236a:	e02c      	b.n	80023c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	623b      	str	r3, [r7, #32]
          break;
 8002372:	e029      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	3304      	adds	r3, #4
 800237a:	623b      	str	r3, [r7, #32]
          break;
 800237c:	e024      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	3308      	adds	r3, #8
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e01f      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	330c      	adds	r3, #12
 800238e:	623b      	str	r3, [r7, #32]
          break;
 8002390:	e01a      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800239a:	2304      	movs	r3, #4
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e013      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a8:	2308      	movs	r3, #8
 80023aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	611a      	str	r2, [r3, #16]
          break;
 80023b2:	e009      	b.n	80023c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b4:	2308      	movs	r3, #8
 80023b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	615a      	str	r2, [r3, #20]
          break;
 80023be:	e003      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
          break;
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x130>
          break;
 80023c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2bff      	cmp	r3, #255	; 0xff
 80023cc:	d801      	bhi.n	80023d2 <HAL_GPIO_Init+0x13a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	e001      	b.n	80023d6 <HAL_GPIO_Init+0x13e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d802      	bhi.n	80023e4 <HAL_GPIO_Init+0x14c>
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x152>
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3b08      	subs	r3, #8
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	210f      	movs	r1, #15
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	401a      	ands	r2, r3
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	431a      	orrs	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80b1 	beq.w	800257a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002418:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <HAL_GPIO_Init+0x2b8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_GPIO_Init+0x2b8>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_GPIO_Init+0x2b8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002430:	4a48      	ldr	r2, [pc, #288]	; (8002554 <HAL_GPIO_Init+0x2bc>)
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a40      	ldr	r2, [pc, #256]	; (8002558 <HAL_GPIO_Init+0x2c0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <HAL_GPIO_Init+0x1ec>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3f      	ldr	r2, [pc, #252]	; (800255c <HAL_GPIO_Init+0x2c4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00d      	beq.n	8002480 <HAL_GPIO_Init+0x1e8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <HAL_GPIO_Init+0x2c8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <HAL_GPIO_Init+0x1e4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <HAL_GPIO_Init+0x2cc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_GPIO_Init+0x1e0>
 8002474:	2303      	movs	r3, #3
 8002476:	e006      	b.n	8002486 <HAL_GPIO_Init+0x1ee>
 8002478:	2304      	movs	r3, #4
 800247a:	e004      	b.n	8002486 <HAL_GPIO_Init+0x1ee>
 800247c:	2302      	movs	r3, #2
 800247e:	e002      	b.n	8002486 <HAL_GPIO_Init+0x1ee>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_GPIO_Init+0x1ee>
 8002484:	2300      	movs	r3, #0
 8002486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002488:	f002 0203 	and.w	r2, r2, #3
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	4093      	lsls	r3, r2
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002496:	492f      	ldr	r1, [pc, #188]	; (8002554 <HAL_GPIO_Init+0x2bc>)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	492c      	ldr	r1, [pc, #176]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4928      	ldr	r1, [pc, #160]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4922      	ldr	r1, [pc, #136]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	491e      	ldr	r1, [pc, #120]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	4918      	ldr	r1, [pc, #96]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	4914      	ldr	r1, [pc, #80]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d021      	beq.n	800256c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
 8002534:	e021      	b.n	800257a <HAL_GPIO_Init+0x2e2>
 8002536:	bf00      	nop
 8002538:	10320000 	.word	0x10320000
 800253c:	10310000 	.word	0x10310000
 8002540:	10220000 	.word	0x10220000
 8002544:	10210000 	.word	0x10210000
 8002548:	10120000 	.word	0x10120000
 800254c:	10110000 	.word	0x10110000
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	40010800 	.word	0x40010800
 800255c:	40010c00 	.word	0x40010c00
 8002560:	40011000 	.word	0x40011000
 8002564:	40011400 	.word	0x40011400
 8002568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_GPIO_Init+0x304>)
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	43db      	mvns	r3, r3
 8002574:	4909      	ldr	r1, [pc, #36]	; (800259c <HAL_GPIO_Init+0x304>)
 8002576:	4013      	ands	r3, r2
 8002578:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	f47f ae8e 	bne.w	80022ac <HAL_GPIO_Init+0x14>
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	372c      	adds	r7, #44	; 0x2c
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025bc:	e003      	b.n	80025c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f806 	bl	8002600 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e26c      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8087 	beq.w	8002742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002634:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	d00c      	beq.n	800265a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002640:	4b8f      	ldr	r3, [pc, #572]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
 800264c:	4b8c      	ldr	r3, [pc, #560]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d10b      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d06c      	beq.n	8002740 <HAL_RCC_OscConfig+0x12c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d168      	bne.n	8002740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e246      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x76>
 800267c:	4b80      	ldr	r3, [pc, #512]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7f      	ldr	r2, [pc, #508]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e02e      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x98>
 8002692:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a77      	ldr	r2, [pc, #476]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e01d      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0xbc>
 80026b6:	4b72      	ldr	r3, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a71      	ldr	r2, [pc, #452]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026d0:	4b6b      	ldr	r3, [pc, #428]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a67      	ldr	r2, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fedc 	bl	80014ac <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fed8 	bl	80014ac <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1fa      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe4>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fec8 	bl	80014ac <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fec4 	bl	80014ac <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e1e6      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x10c>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d063      	beq.n	8002816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d11c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x18c>
 8002766:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d116      	bne.n	80027a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e1ba      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	e03a      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7fe fe7d 	bl	80014ac <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fe79 	bl	80014ac <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e19b      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
 80027e8:	e015      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe5c 	bl	80014ac <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7fe fe58 	bl	80014ac <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e17a      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03a      	beq.n	8002898 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d019      	beq.n	800285e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe fe3c 	bl	80014ac <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7fe fe38 	bl	80014ac <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e15a      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f000 fad8 	bl	8002e0c <RCC_Delay>
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fe22 	bl	80014ac <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286a:	e00f      	b.n	800288c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fe1e 	bl	80014ac <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d908      	bls.n	800288c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e140      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	42420000 	.word	0x42420000
 8002888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e9      	bne.n	800286c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a6 	beq.w	80029f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b97      	ldr	r3, [pc, #604]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4a93      	ldr	r2, [pc, #588]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	61d3      	str	r3, [r2, #28]
 80028c2:	4b91      	ldr	r3, [pc, #580]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a8a      	ldr	r2, [pc, #552]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fddf 	bl	80014ac <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7fe fddb 	bl	80014ac <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0fd      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x312>
 8002918:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e02d      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x334>
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a75      	ldr	r2, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a72      	ldr	r2, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	e01c      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x356>
 8002950:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e00b      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a63      	ldr	r2, [pc, #396]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe fd8f 	bl	80014ac <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fd8b 	bl	80014ac <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0ab      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ee      	beq.n	8002992 <HAL_RCC_OscConfig+0x37e>
 80029b4:	e014      	b.n	80029e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fd79 	bl	80014ac <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fd75 	bl	80014ac <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e095      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ee      	bne.n	80029be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8081 	beq.w	8002afe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d061      	beq.n	8002acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d146      	bne.n	8002a9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fd49 	bl	80014ac <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fd45 	bl	80014ac <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e067      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d108      	bne.n	8002a58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	492d      	ldr	r1, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a19      	ldr	r1, [r3, #32]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fd19 	bl	80014ac <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fd15 	bl	80014ac <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e037      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46a>
 8002a9c:	e02f      	b.n	8002afe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fd02 	bl	80014ac <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe fcfe 	bl	80014ac <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e020      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x498>
 8002aca:	e018      	b.n	8002afe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	42420060 	.word	0x42420060

08002b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0d0      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e073      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4936      	ldr	r1, [pc, #216]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fc52 	bl	80014ac <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe fc4e 	bl	80014ac <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e053      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d210      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4922      	ldr	r1, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fbb0 	bl	8001428 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08004c38 	.word	0x08004c38
 8002ce0:	20000600 	.word	0x20000600
 8002ce4:	20000604 	.word	0x20000604

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b490      	push	{r4, r7}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf0:	1d3c      	adds	r4, r7, #4
 8002cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cf8:	f240 2301 	movw	r3, #513	; 0x201
 8002cfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d002      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x46>
 8002d26:	e02d      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	0c9b      	lsrs	r3, r3, #18
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d66:	fb02 f203 	mul.w	r2, r2, r3
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e004      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	623b      	str	r3, [r7, #32]
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc90      	pop	{r4, r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	08004c28 	.word	0x08004c28
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	003d0900 	.word	0x003d0900

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000600 	.word	0x20000600

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	f7ff fff2 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08004c48 	.word	0x08004c48

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	0adb      	lsrs	r3, r3, #11
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4903      	ldr	r1, [pc, #12]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08004c48 	.word	0x08004c48

08002e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <RCC_Delay+0x34>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <RCC_Delay+0x38>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a5b      	lsrs	r3, r3, #9
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e28:	bf00      	nop
  }
  while (Delay --);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e5a      	subs	r2, r3, #1
 8002e2e:	60fa      	str	r2, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f9      	bne.n	8002e28 <RCC_Delay+0x1c>
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	20000600 	.word	0x20000600
 8002e44:	10624dd3 	.word	0x10624dd3

08002e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d07d      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e68:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	4a4b      	ldr	r2, [pc, #300]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	61d3      	str	r3, [r2, #28]
 8002e80:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d118      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9c:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a42      	ldr	r2, [pc, #264]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fb00 	bl	80014ac <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	e008      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe fafc 	bl	80014ac <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e06d      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d02e      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d027      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002efc:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f02:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7fe facb 	bl	80014ac <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fac7 	bl	80014ac <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e036      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4917      	ldr	r1, [pc, #92]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f54:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	490b      	ldr	r1, [pc, #44]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	42420440 	.word	0x42420440

08002fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e03f      	b.n	8003046 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe f934 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f905 	bl	8003208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800300c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800301c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800302c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08a      	sub	sp, #40	; 0x28
 8003052:	af02      	add	r7, sp, #8
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	d17c      	bne.n	8003168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_Transmit+0x2c>
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e075      	b.n	800316a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_UART_Transmit+0x3e>
 8003088:	2302      	movs	r3, #2
 800308a:	e06e      	b.n	800316a <HAL_UART_Transmit+0x11c>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2221      	movs	r2, #33	; 0x21
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a2:	f7fe fa03 	bl	80014ac <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d108      	bne.n	80030d0 <HAL_UART_Transmit+0x82>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e003      	b.n	80030d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030e0:	e02a      	b.n	8003138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f840 	bl	8003172 <UART_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e036      	b.n	800316a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	3302      	adds	r3, #2
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e007      	b.n	800312a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1cf      	bne.n	80030e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f810 	bl	8003172 <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e006      	b.n	800316a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	e02c      	b.n	80031de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d028      	beq.n	80031de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003192:	f7fe f98b 	bl	80014ac <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d21d      	bcs.n	80031de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e00f      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4013      	ands	r3, r2
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	bf0c      	ite	eq
 80031ee:	2301      	moveq	r3, #1
 80031f0:	2300      	movne	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d0c3      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003242:	f023 030c 	bic.w	r3, r3, #12
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	430b      	orrs	r3, r1
 800324e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2c      	ldr	r2, [pc, #176]	; (800331c <UART_SetConfig+0x114>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7ff fdb8 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	e002      	b.n	800327e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7ff fda0 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 800327c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <UART_SetConfig+0x118>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	0119      	lsls	r1, r3, #4
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <UART_SetConfig+0x118>)
 80032b6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2064      	movs	r0, #100	; 0x64
 80032be:	fb00 f303 	mul.w	r3, r0, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	; 0x32
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <UART_SetConfig+0x118>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d4:	4419      	add	r1, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <UART_SetConfig+0x118>)
 80032ee:	fba3 0302 	umull	r0, r3, r3, r2
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2064      	movs	r0, #100	; 0x64
 80032f6:	fb00 f303 	mul.w	r3, r0, r3
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	3332      	adds	r3, #50	; 0x32
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <UART_SetConfig+0x118>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	440a      	add	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013800 	.word	0x40013800
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <__errno>:
 8003324:	4b01      	ldr	r3, [pc, #4]	; (800332c <__errno+0x8>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000060c 	.word	0x2000060c

08003330 <__libc_init_array>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	2600      	movs	r6, #0
 8003334:	4d0c      	ldr	r5, [pc, #48]	; (8003368 <__libc_init_array+0x38>)
 8003336:	4c0d      	ldr	r4, [pc, #52]	; (800336c <__libc_init_array+0x3c>)
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	42a6      	cmp	r6, r4
 800333e:	d109      	bne.n	8003354 <__libc_init_array+0x24>
 8003340:	f001 fc5c 	bl	8004bfc <_init>
 8003344:	2600      	movs	r6, #0
 8003346:	4d0a      	ldr	r5, [pc, #40]	; (8003370 <__libc_init_array+0x40>)
 8003348:	4c0a      	ldr	r4, [pc, #40]	; (8003374 <__libc_init_array+0x44>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	42a6      	cmp	r6, r4
 8003350:	d105      	bne.n	800335e <__libc_init_array+0x2e>
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	f855 3b04 	ldr.w	r3, [r5], #4
 8003358:	4798      	blx	r3
 800335a:	3601      	adds	r6, #1
 800335c:	e7ee      	b.n	800333c <__libc_init_array+0xc>
 800335e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003362:	4798      	blx	r3
 8003364:	3601      	adds	r6, #1
 8003366:	e7f2      	b.n	800334e <__libc_init_array+0x1e>
 8003368:	08004e60 	.word	0x08004e60
 800336c:	08004e60 	.word	0x08004e60
 8003370:	08004e60 	.word	0x08004e60
 8003374:	08004e64 	.word	0x08004e64

08003378 <memset>:
 8003378:	4603      	mov	r3, r0
 800337a:	4402      	add	r2, r0
 800337c:	4293      	cmp	r3, r2
 800337e:	d100      	bne.n	8003382 <memset+0xa>
 8003380:	4770      	bx	lr
 8003382:	f803 1b01 	strb.w	r1, [r3], #1
 8003386:	e7f9      	b.n	800337c <memset+0x4>

08003388 <siprintf>:
 8003388:	b40e      	push	{r1, r2, r3}
 800338a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800338e:	b500      	push	{lr}
 8003390:	b09c      	sub	sp, #112	; 0x70
 8003392:	ab1d      	add	r3, sp, #116	; 0x74
 8003394:	9002      	str	r0, [sp, #8]
 8003396:	9006      	str	r0, [sp, #24]
 8003398:	9107      	str	r1, [sp, #28]
 800339a:	9104      	str	r1, [sp, #16]
 800339c:	4808      	ldr	r0, [pc, #32]	; (80033c0 <siprintf+0x38>)
 800339e:	4909      	ldr	r1, [pc, #36]	; (80033c4 <siprintf+0x3c>)
 80033a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033a4:	9105      	str	r1, [sp, #20]
 80033a6:	6800      	ldr	r0, [r0, #0]
 80033a8:	a902      	add	r1, sp, #8
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	f000 f868 	bl	8003480 <_svfiprintf_r>
 80033b0:	2200      	movs	r2, #0
 80033b2:	9b02      	ldr	r3, [sp, #8]
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	b01c      	add	sp, #112	; 0x70
 80033b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033bc:	b003      	add	sp, #12
 80033be:	4770      	bx	lr
 80033c0:	2000060c 	.word	0x2000060c
 80033c4:	ffff0208 	.word	0xffff0208

080033c8 <__ssputs_r>:
 80033c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033cc:	688e      	ldr	r6, [r1, #8]
 80033ce:	4682      	mov	sl, r0
 80033d0:	429e      	cmp	r6, r3
 80033d2:	460c      	mov	r4, r1
 80033d4:	4690      	mov	r8, r2
 80033d6:	461f      	mov	r7, r3
 80033d8:	d838      	bhi.n	800344c <__ssputs_r+0x84>
 80033da:	898a      	ldrh	r2, [r1, #12]
 80033dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033e0:	d032      	beq.n	8003448 <__ssputs_r+0x80>
 80033e2:	6825      	ldr	r5, [r4, #0]
 80033e4:	6909      	ldr	r1, [r1, #16]
 80033e6:	3301      	adds	r3, #1
 80033e8:	eba5 0901 	sub.w	r9, r5, r1
 80033ec:	6965      	ldr	r5, [r4, #20]
 80033ee:	444b      	add	r3, r9
 80033f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033f8:	106d      	asrs	r5, r5, #1
 80033fa:	429d      	cmp	r5, r3
 80033fc:	bf38      	it	cc
 80033fe:	461d      	movcc	r5, r3
 8003400:	0553      	lsls	r3, r2, #21
 8003402:	d531      	bpl.n	8003468 <__ssputs_r+0xa0>
 8003404:	4629      	mov	r1, r5
 8003406:	f000 fb53 	bl	8003ab0 <_malloc_r>
 800340a:	4606      	mov	r6, r0
 800340c:	b950      	cbnz	r0, 8003424 <__ssputs_r+0x5c>
 800340e:	230c      	movs	r3, #12
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	f8ca 3000 	str.w	r3, [sl]
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003424:	464a      	mov	r2, r9
 8003426:	6921      	ldr	r1, [r4, #16]
 8003428:	f000 face 	bl	80039c8 <memcpy>
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	6126      	str	r6, [r4, #16]
 800343a:	444e      	add	r6, r9
 800343c:	6026      	str	r6, [r4, #0]
 800343e:	463e      	mov	r6, r7
 8003440:	6165      	str	r5, [r4, #20]
 8003442:	eba5 0509 	sub.w	r5, r5, r9
 8003446:	60a5      	str	r5, [r4, #8]
 8003448:	42be      	cmp	r6, r7
 800344a:	d900      	bls.n	800344e <__ssputs_r+0x86>
 800344c:	463e      	mov	r6, r7
 800344e:	4632      	mov	r2, r6
 8003450:	4641      	mov	r1, r8
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	f000 fac6 	bl	80039e4 <memmove>
 8003458:	68a3      	ldr	r3, [r4, #8]
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	1b9b      	subs	r3, r3, r6
 800345e:	4432      	add	r2, r6
 8003460:	2000      	movs	r0, #0
 8003462:	60a3      	str	r3, [r4, #8]
 8003464:	6022      	str	r2, [r4, #0]
 8003466:	e7db      	b.n	8003420 <__ssputs_r+0x58>
 8003468:	462a      	mov	r2, r5
 800346a:	f000 fb7b 	bl	8003b64 <_realloc_r>
 800346e:	4606      	mov	r6, r0
 8003470:	2800      	cmp	r0, #0
 8003472:	d1e1      	bne.n	8003438 <__ssputs_r+0x70>
 8003474:	4650      	mov	r0, sl
 8003476:	6921      	ldr	r1, [r4, #16]
 8003478:	f000 face 	bl	8003a18 <_free_r>
 800347c:	e7c7      	b.n	800340e <__ssputs_r+0x46>
	...

08003480 <_svfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	4698      	mov	r8, r3
 8003486:	898b      	ldrh	r3, [r1, #12]
 8003488:	4607      	mov	r7, r0
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	460d      	mov	r5, r1
 800348e:	4614      	mov	r4, r2
 8003490:	b09d      	sub	sp, #116	; 0x74
 8003492:	d50e      	bpl.n	80034b2 <_svfiprintf_r+0x32>
 8003494:	690b      	ldr	r3, [r1, #16]
 8003496:	b963      	cbnz	r3, 80034b2 <_svfiprintf_r+0x32>
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	f000 fb09 	bl	8003ab0 <_malloc_r>
 800349e:	6028      	str	r0, [r5, #0]
 80034a0:	6128      	str	r0, [r5, #16]
 80034a2:	b920      	cbnz	r0, 80034ae <_svfiprintf_r+0x2e>
 80034a4:	230c      	movs	r3, #12
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	e0d1      	b.n	8003652 <_svfiprintf_r+0x1d2>
 80034ae:	2340      	movs	r3, #64	; 0x40
 80034b0:	616b      	str	r3, [r5, #20]
 80034b2:	2300      	movs	r3, #0
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
 80034b6:	2320      	movs	r3, #32
 80034b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034bc:	2330      	movs	r3, #48	; 0x30
 80034be:	f04f 0901 	mov.w	r9, #1
 80034c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80034c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800366c <_svfiprintf_r+0x1ec>
 80034ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ce:	4623      	mov	r3, r4
 80034d0:	469a      	mov	sl, r3
 80034d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034d6:	b10a      	cbz	r2, 80034dc <_svfiprintf_r+0x5c>
 80034d8:	2a25      	cmp	r2, #37	; 0x25
 80034da:	d1f9      	bne.n	80034d0 <_svfiprintf_r+0x50>
 80034dc:	ebba 0b04 	subs.w	fp, sl, r4
 80034e0:	d00b      	beq.n	80034fa <_svfiprintf_r+0x7a>
 80034e2:	465b      	mov	r3, fp
 80034e4:	4622      	mov	r2, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	4638      	mov	r0, r7
 80034ea:	f7ff ff6d 	bl	80033c8 <__ssputs_r>
 80034ee:	3001      	adds	r0, #1
 80034f0:	f000 80aa 	beq.w	8003648 <_svfiprintf_r+0x1c8>
 80034f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034f6:	445a      	add	r2, fp
 80034f8:	9209      	str	r2, [sp, #36]	; 0x24
 80034fa:	f89a 3000 	ldrb.w	r3, [sl]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80a2 	beq.w	8003648 <_svfiprintf_r+0x1c8>
 8003504:	2300      	movs	r3, #0
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800350e:	f10a 0a01 	add.w	sl, sl, #1
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	9307      	str	r3, [sp, #28]
 8003516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800351a:	931a      	str	r3, [sp, #104]	; 0x68
 800351c:	4654      	mov	r4, sl
 800351e:	2205      	movs	r2, #5
 8003520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003524:	4851      	ldr	r0, [pc, #324]	; (800366c <_svfiprintf_r+0x1ec>)
 8003526:	f000 fa41 	bl	80039ac <memchr>
 800352a:	9a04      	ldr	r2, [sp, #16]
 800352c:	b9d8      	cbnz	r0, 8003566 <_svfiprintf_r+0xe6>
 800352e:	06d0      	lsls	r0, r2, #27
 8003530:	bf44      	itt	mi
 8003532:	2320      	movmi	r3, #32
 8003534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003538:	0711      	lsls	r1, r2, #28
 800353a:	bf44      	itt	mi
 800353c:	232b      	movmi	r3, #43	; 0x2b
 800353e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003542:	f89a 3000 	ldrb.w	r3, [sl]
 8003546:	2b2a      	cmp	r3, #42	; 0x2a
 8003548:	d015      	beq.n	8003576 <_svfiprintf_r+0xf6>
 800354a:	4654      	mov	r4, sl
 800354c:	2000      	movs	r0, #0
 800354e:	f04f 0c0a 	mov.w	ip, #10
 8003552:	9a07      	ldr	r2, [sp, #28]
 8003554:	4621      	mov	r1, r4
 8003556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800355a:	3b30      	subs	r3, #48	; 0x30
 800355c:	2b09      	cmp	r3, #9
 800355e:	d94e      	bls.n	80035fe <_svfiprintf_r+0x17e>
 8003560:	b1b0      	cbz	r0, 8003590 <_svfiprintf_r+0x110>
 8003562:	9207      	str	r2, [sp, #28]
 8003564:	e014      	b.n	8003590 <_svfiprintf_r+0x110>
 8003566:	eba0 0308 	sub.w	r3, r0, r8
 800356a:	fa09 f303 	lsl.w	r3, r9, r3
 800356e:	4313      	orrs	r3, r2
 8003570:	46a2      	mov	sl, r4
 8003572:	9304      	str	r3, [sp, #16]
 8003574:	e7d2      	b.n	800351c <_svfiprintf_r+0x9c>
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	1d19      	adds	r1, r3, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	9103      	str	r1, [sp, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	bfbb      	ittet	lt
 8003582:	425b      	neglt	r3, r3
 8003584:	f042 0202 	orrlt.w	r2, r2, #2
 8003588:	9307      	strge	r3, [sp, #28]
 800358a:	9307      	strlt	r3, [sp, #28]
 800358c:	bfb8      	it	lt
 800358e:	9204      	strlt	r2, [sp, #16]
 8003590:	7823      	ldrb	r3, [r4, #0]
 8003592:	2b2e      	cmp	r3, #46	; 0x2e
 8003594:	d10c      	bne.n	80035b0 <_svfiprintf_r+0x130>
 8003596:	7863      	ldrb	r3, [r4, #1]
 8003598:	2b2a      	cmp	r3, #42	; 0x2a
 800359a:	d135      	bne.n	8003608 <_svfiprintf_r+0x188>
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	3402      	adds	r4, #2
 80035a0:	1d1a      	adds	r2, r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	9203      	str	r2, [sp, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bfb8      	it	lt
 80035aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80035ae:	9305      	str	r3, [sp, #20]
 80035b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800367c <_svfiprintf_r+0x1fc>
 80035b4:	2203      	movs	r2, #3
 80035b6:	4650      	mov	r0, sl
 80035b8:	7821      	ldrb	r1, [r4, #0]
 80035ba:	f000 f9f7 	bl	80039ac <memchr>
 80035be:	b140      	cbz	r0, 80035d2 <_svfiprintf_r+0x152>
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	eba0 000a 	sub.w	r0, r0, sl
 80035c6:	fa03 f000 	lsl.w	r0, r3, r0
 80035ca:	9b04      	ldr	r3, [sp, #16]
 80035cc:	3401      	adds	r4, #1
 80035ce:	4303      	orrs	r3, r0
 80035d0:	9304      	str	r3, [sp, #16]
 80035d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d6:	2206      	movs	r2, #6
 80035d8:	4825      	ldr	r0, [pc, #148]	; (8003670 <_svfiprintf_r+0x1f0>)
 80035da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035de:	f000 f9e5 	bl	80039ac <memchr>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d038      	beq.n	8003658 <_svfiprintf_r+0x1d8>
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <_svfiprintf_r+0x1f4>)
 80035e8:	bb1b      	cbnz	r3, 8003632 <_svfiprintf_r+0x1b2>
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	3307      	adds	r3, #7
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	3308      	adds	r3, #8
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f8:	4433      	add	r3, r6
 80035fa:	9309      	str	r3, [sp, #36]	; 0x24
 80035fc:	e767      	b.n	80034ce <_svfiprintf_r+0x4e>
 80035fe:	460c      	mov	r4, r1
 8003600:	2001      	movs	r0, #1
 8003602:	fb0c 3202 	mla	r2, ip, r2, r3
 8003606:	e7a5      	b.n	8003554 <_svfiprintf_r+0xd4>
 8003608:	2300      	movs	r3, #0
 800360a:	f04f 0c0a 	mov.w	ip, #10
 800360e:	4619      	mov	r1, r3
 8003610:	3401      	adds	r4, #1
 8003612:	9305      	str	r3, [sp, #20]
 8003614:	4620      	mov	r0, r4
 8003616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800361a:	3a30      	subs	r2, #48	; 0x30
 800361c:	2a09      	cmp	r2, #9
 800361e:	d903      	bls.n	8003628 <_svfiprintf_r+0x1a8>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0c5      	beq.n	80035b0 <_svfiprintf_r+0x130>
 8003624:	9105      	str	r1, [sp, #20]
 8003626:	e7c3      	b.n	80035b0 <_svfiprintf_r+0x130>
 8003628:	4604      	mov	r4, r0
 800362a:	2301      	movs	r3, #1
 800362c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003630:	e7f0      	b.n	8003614 <_svfiprintf_r+0x194>
 8003632:	ab03      	add	r3, sp, #12
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	462a      	mov	r2, r5
 8003638:	4638      	mov	r0, r7
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <_svfiprintf_r+0x1f8>)
 800363c:	a904      	add	r1, sp, #16
 800363e:	f3af 8000 	nop.w
 8003642:	1c42      	adds	r2, r0, #1
 8003644:	4606      	mov	r6, r0
 8003646:	d1d6      	bne.n	80035f6 <_svfiprintf_r+0x176>
 8003648:	89ab      	ldrh	r3, [r5, #12]
 800364a:	065b      	lsls	r3, r3, #25
 800364c:	f53f af2c 	bmi.w	80034a8 <_svfiprintf_r+0x28>
 8003650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003652:	b01d      	add	sp, #116	; 0x74
 8003654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003658:	ab03      	add	r3, sp, #12
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	462a      	mov	r2, r5
 800365e:	4638      	mov	r0, r7
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <_svfiprintf_r+0x1f8>)
 8003662:	a904      	add	r1, sp, #16
 8003664:	f000 f87c 	bl	8003760 <_printf_i>
 8003668:	e7eb      	b.n	8003642 <_svfiprintf_r+0x1c2>
 800366a:	bf00      	nop
 800366c:	08004c50 	.word	0x08004c50
 8003670:	08004c5a 	.word	0x08004c5a
 8003674:	00000000 	.word	0x00000000
 8003678:	080033c9 	.word	0x080033c9
 800367c:	08004c56 	.word	0x08004c56

08003680 <_printf_common>:
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	4616      	mov	r6, r2
 8003686:	4699      	mov	r9, r3
 8003688:	688a      	ldr	r2, [r1, #8]
 800368a:	690b      	ldr	r3, [r1, #16]
 800368c:	4607      	mov	r7, r0
 800368e:	4293      	cmp	r3, r2
 8003690:	bfb8      	it	lt
 8003692:	4613      	movlt	r3, r2
 8003694:	6033      	str	r3, [r6, #0]
 8003696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800369a:	460c      	mov	r4, r1
 800369c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a0:	b10a      	cbz	r2, 80036a6 <_printf_common+0x26>
 80036a2:	3301      	adds	r3, #1
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	0699      	lsls	r1, r3, #26
 80036aa:	bf42      	ittt	mi
 80036ac:	6833      	ldrmi	r3, [r6, #0]
 80036ae:	3302      	addmi	r3, #2
 80036b0:	6033      	strmi	r3, [r6, #0]
 80036b2:	6825      	ldr	r5, [r4, #0]
 80036b4:	f015 0506 	ands.w	r5, r5, #6
 80036b8:	d106      	bne.n	80036c8 <_printf_common+0x48>
 80036ba:	f104 0a19 	add.w	sl, r4, #25
 80036be:	68e3      	ldr	r3, [r4, #12]
 80036c0:	6832      	ldr	r2, [r6, #0]
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	42ab      	cmp	r3, r5
 80036c6:	dc28      	bgt.n	800371a <_printf_common+0x9a>
 80036c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036cc:	1e13      	subs	r3, r2, #0
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	bf18      	it	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	0692      	lsls	r2, r2, #26
 80036d6:	d42d      	bmi.n	8003734 <_printf_common+0xb4>
 80036d8:	4649      	mov	r1, r9
 80036da:	4638      	mov	r0, r7
 80036dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d020      	beq.n	8003728 <_printf_common+0xa8>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	68e5      	ldr	r5, [r4, #12]
 80036ea:	f003 0306 	and.w	r3, r3, #6
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf18      	it	ne
 80036f2:	2500      	movne	r5, #0
 80036f4:	6832      	ldr	r2, [r6, #0]
 80036f6:	f04f 0600 	mov.w	r6, #0
 80036fa:	68a3      	ldr	r3, [r4, #8]
 80036fc:	bf08      	it	eq
 80036fe:	1aad      	subeq	r5, r5, r2
 8003700:	6922      	ldr	r2, [r4, #16]
 8003702:	bf08      	it	eq
 8003704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003708:	4293      	cmp	r3, r2
 800370a:	bfc4      	itt	gt
 800370c:	1a9b      	subgt	r3, r3, r2
 800370e:	18ed      	addgt	r5, r5, r3
 8003710:	341a      	adds	r4, #26
 8003712:	42b5      	cmp	r5, r6
 8003714:	d11a      	bne.n	800374c <_printf_common+0xcc>
 8003716:	2000      	movs	r0, #0
 8003718:	e008      	b.n	800372c <_printf_common+0xac>
 800371a:	2301      	movs	r3, #1
 800371c:	4652      	mov	r2, sl
 800371e:	4649      	mov	r1, r9
 8003720:	4638      	mov	r0, r7
 8003722:	47c0      	blx	r8
 8003724:	3001      	adds	r0, #1
 8003726:	d103      	bne.n	8003730 <_printf_common+0xb0>
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003730:	3501      	adds	r5, #1
 8003732:	e7c4      	b.n	80036be <_printf_common+0x3e>
 8003734:	2030      	movs	r0, #48	; 0x30
 8003736:	18e1      	adds	r1, r4, r3
 8003738:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003742:	4422      	add	r2, r4
 8003744:	3302      	adds	r3, #2
 8003746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800374a:	e7c5      	b.n	80036d8 <_printf_common+0x58>
 800374c:	2301      	movs	r3, #1
 800374e:	4622      	mov	r2, r4
 8003750:	4649      	mov	r1, r9
 8003752:	4638      	mov	r0, r7
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d0e6      	beq.n	8003728 <_printf_common+0xa8>
 800375a:	3601      	adds	r6, #1
 800375c:	e7d9      	b.n	8003712 <_printf_common+0x92>
	...

08003760 <_printf_i>:
 8003760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	460c      	mov	r4, r1
 8003766:	7e27      	ldrb	r7, [r4, #24]
 8003768:	4691      	mov	r9, r2
 800376a:	2f78      	cmp	r7, #120	; 0x78
 800376c:	4680      	mov	r8, r0
 800376e:	469a      	mov	sl, r3
 8003770:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003776:	d807      	bhi.n	8003788 <_printf_i+0x28>
 8003778:	2f62      	cmp	r7, #98	; 0x62
 800377a:	d80a      	bhi.n	8003792 <_printf_i+0x32>
 800377c:	2f00      	cmp	r7, #0
 800377e:	f000 80d9 	beq.w	8003934 <_printf_i+0x1d4>
 8003782:	2f58      	cmp	r7, #88	; 0x58
 8003784:	f000 80a4 	beq.w	80038d0 <_printf_i+0x170>
 8003788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800378c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003790:	e03a      	b.n	8003808 <_printf_i+0xa8>
 8003792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003796:	2b15      	cmp	r3, #21
 8003798:	d8f6      	bhi.n	8003788 <_printf_i+0x28>
 800379a:	a001      	add	r0, pc, #4	; (adr r0, 80037a0 <_printf_i+0x40>)
 800379c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	08003789 	.word	0x08003789
 80037ac:	08003789 	.word	0x08003789
 80037b0:	08003789 	.word	0x08003789
 80037b4:	08003789 	.word	0x08003789
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	08003789 	.word	0x08003789
 80037c0:	08003789 	.word	0x08003789
 80037c4:	08003789 	.word	0x08003789
 80037c8:	08003789 	.word	0x08003789
 80037cc:	0800391b 	.word	0x0800391b
 80037d0:	0800383d 	.word	0x0800383d
 80037d4:	080038fd 	.word	0x080038fd
 80037d8:	08003789 	.word	0x08003789
 80037dc:	08003789 	.word	0x08003789
 80037e0:	0800393d 	.word	0x0800393d
 80037e4:	08003789 	.word	0x08003789
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	08003789 	.word	0x08003789
 80037f0:	08003789 	.word	0x08003789
 80037f4:	08003905 	.word	0x08003905
 80037f8:	680b      	ldr	r3, [r1, #0]
 80037fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037fe:	1d1a      	adds	r2, r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	600a      	str	r2, [r1, #0]
 8003804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003808:	2301      	movs	r3, #1
 800380a:	e0a4      	b.n	8003956 <_printf_i+0x1f6>
 800380c:	6825      	ldr	r5, [r4, #0]
 800380e:	6808      	ldr	r0, [r1, #0]
 8003810:	062e      	lsls	r6, r5, #24
 8003812:	f100 0304 	add.w	r3, r0, #4
 8003816:	d50a      	bpl.n	800382e <_printf_i+0xce>
 8003818:	6805      	ldr	r5, [r0, #0]
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	2d00      	cmp	r5, #0
 800381e:	da03      	bge.n	8003828 <_printf_i+0xc8>
 8003820:	232d      	movs	r3, #45	; 0x2d
 8003822:	426d      	negs	r5, r5
 8003824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003828:	230a      	movs	r3, #10
 800382a:	485e      	ldr	r0, [pc, #376]	; (80039a4 <_printf_i+0x244>)
 800382c:	e019      	b.n	8003862 <_printf_i+0x102>
 800382e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003832:	6805      	ldr	r5, [r0, #0]
 8003834:	600b      	str	r3, [r1, #0]
 8003836:	bf18      	it	ne
 8003838:	b22d      	sxthne	r5, r5
 800383a:	e7ef      	b.n	800381c <_printf_i+0xbc>
 800383c:	680b      	ldr	r3, [r1, #0]
 800383e:	6825      	ldr	r5, [r4, #0]
 8003840:	1d18      	adds	r0, r3, #4
 8003842:	6008      	str	r0, [r1, #0]
 8003844:	0628      	lsls	r0, r5, #24
 8003846:	d501      	bpl.n	800384c <_printf_i+0xec>
 8003848:	681d      	ldr	r5, [r3, #0]
 800384a:	e002      	b.n	8003852 <_printf_i+0xf2>
 800384c:	0669      	lsls	r1, r5, #25
 800384e:	d5fb      	bpl.n	8003848 <_printf_i+0xe8>
 8003850:	881d      	ldrh	r5, [r3, #0]
 8003852:	2f6f      	cmp	r7, #111	; 0x6f
 8003854:	bf0c      	ite	eq
 8003856:	2308      	moveq	r3, #8
 8003858:	230a      	movne	r3, #10
 800385a:	4852      	ldr	r0, [pc, #328]	; (80039a4 <_printf_i+0x244>)
 800385c:	2100      	movs	r1, #0
 800385e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003862:	6866      	ldr	r6, [r4, #4]
 8003864:	2e00      	cmp	r6, #0
 8003866:	bfa8      	it	ge
 8003868:	6821      	ldrge	r1, [r4, #0]
 800386a:	60a6      	str	r6, [r4, #8]
 800386c:	bfa4      	itt	ge
 800386e:	f021 0104 	bicge.w	r1, r1, #4
 8003872:	6021      	strge	r1, [r4, #0]
 8003874:	b90d      	cbnz	r5, 800387a <_printf_i+0x11a>
 8003876:	2e00      	cmp	r6, #0
 8003878:	d04d      	beq.n	8003916 <_printf_i+0x1b6>
 800387a:	4616      	mov	r6, r2
 800387c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003880:	fb03 5711 	mls	r7, r3, r1, r5
 8003884:	5dc7      	ldrb	r7, [r0, r7]
 8003886:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800388a:	462f      	mov	r7, r5
 800388c:	42bb      	cmp	r3, r7
 800388e:	460d      	mov	r5, r1
 8003890:	d9f4      	bls.n	800387c <_printf_i+0x11c>
 8003892:	2b08      	cmp	r3, #8
 8003894:	d10b      	bne.n	80038ae <_printf_i+0x14e>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	07df      	lsls	r7, r3, #31
 800389a:	d508      	bpl.n	80038ae <_printf_i+0x14e>
 800389c:	6923      	ldr	r3, [r4, #16]
 800389e:	6861      	ldr	r1, [r4, #4]
 80038a0:	4299      	cmp	r1, r3
 80038a2:	bfde      	ittt	le
 80038a4:	2330      	movle	r3, #48	; 0x30
 80038a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038ae:	1b92      	subs	r2, r2, r6
 80038b0:	6122      	str	r2, [r4, #16]
 80038b2:	464b      	mov	r3, r9
 80038b4:	4621      	mov	r1, r4
 80038b6:	4640      	mov	r0, r8
 80038b8:	f8cd a000 	str.w	sl, [sp]
 80038bc:	aa03      	add	r2, sp, #12
 80038be:	f7ff fedf 	bl	8003680 <_printf_common>
 80038c2:	3001      	adds	r0, #1
 80038c4:	d14c      	bne.n	8003960 <_printf_i+0x200>
 80038c6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ca:	b004      	add	sp, #16
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	4834      	ldr	r0, [pc, #208]	; (80039a4 <_printf_i+0x244>)
 80038d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038d6:	680e      	ldr	r6, [r1, #0]
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f856 5b04 	ldr.w	r5, [r6], #4
 80038de:	061f      	lsls	r7, r3, #24
 80038e0:	600e      	str	r6, [r1, #0]
 80038e2:	d514      	bpl.n	800390e <_printf_i+0x1ae>
 80038e4:	07d9      	lsls	r1, r3, #31
 80038e6:	bf44      	itt	mi
 80038e8:	f043 0320 	orrmi.w	r3, r3, #32
 80038ec:	6023      	strmi	r3, [r4, #0]
 80038ee:	b91d      	cbnz	r5, 80038f8 <_printf_i+0x198>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	f023 0320 	bic.w	r3, r3, #32
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	2310      	movs	r3, #16
 80038fa:	e7af      	b.n	800385c <_printf_i+0xfc>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	f043 0320 	orr.w	r3, r3, #32
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	2378      	movs	r3, #120	; 0x78
 8003906:	4828      	ldr	r0, [pc, #160]	; (80039a8 <_printf_i+0x248>)
 8003908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800390c:	e7e3      	b.n	80038d6 <_printf_i+0x176>
 800390e:	065e      	lsls	r6, r3, #25
 8003910:	bf48      	it	mi
 8003912:	b2ad      	uxthmi	r5, r5
 8003914:	e7e6      	b.n	80038e4 <_printf_i+0x184>
 8003916:	4616      	mov	r6, r2
 8003918:	e7bb      	b.n	8003892 <_printf_i+0x132>
 800391a:	680b      	ldr	r3, [r1, #0]
 800391c:	6826      	ldr	r6, [r4, #0]
 800391e:	1d1d      	adds	r5, r3, #4
 8003920:	6960      	ldr	r0, [r4, #20]
 8003922:	600d      	str	r5, [r1, #0]
 8003924:	0635      	lsls	r5, r6, #24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	d501      	bpl.n	800392e <_printf_i+0x1ce>
 800392a:	6018      	str	r0, [r3, #0]
 800392c:	e002      	b.n	8003934 <_printf_i+0x1d4>
 800392e:	0671      	lsls	r1, r6, #25
 8003930:	d5fb      	bpl.n	800392a <_printf_i+0x1ca>
 8003932:	8018      	strh	r0, [r3, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	4616      	mov	r6, r2
 8003938:	6123      	str	r3, [r4, #16]
 800393a:	e7ba      	b.n	80038b2 <_printf_i+0x152>
 800393c:	680b      	ldr	r3, [r1, #0]
 800393e:	1d1a      	adds	r2, r3, #4
 8003940:	600a      	str	r2, [r1, #0]
 8003942:	681e      	ldr	r6, [r3, #0]
 8003944:	2100      	movs	r1, #0
 8003946:	4630      	mov	r0, r6
 8003948:	6862      	ldr	r2, [r4, #4]
 800394a:	f000 f82f 	bl	80039ac <memchr>
 800394e:	b108      	cbz	r0, 8003954 <_printf_i+0x1f4>
 8003950:	1b80      	subs	r0, r0, r6
 8003952:	6060      	str	r0, [r4, #4]
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	2300      	movs	r3, #0
 800395a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395e:	e7a8      	b.n	80038b2 <_printf_i+0x152>
 8003960:	4632      	mov	r2, r6
 8003962:	4649      	mov	r1, r9
 8003964:	4640      	mov	r0, r8
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	47d0      	blx	sl
 800396a:	3001      	adds	r0, #1
 800396c:	d0ab      	beq.n	80038c6 <_printf_i+0x166>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	079b      	lsls	r3, r3, #30
 8003972:	d413      	bmi.n	800399c <_printf_i+0x23c>
 8003974:	68e0      	ldr	r0, [r4, #12]
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	4298      	cmp	r0, r3
 800397a:	bfb8      	it	lt
 800397c:	4618      	movlt	r0, r3
 800397e:	e7a4      	b.n	80038ca <_printf_i+0x16a>
 8003980:	2301      	movs	r3, #1
 8003982:	4632      	mov	r2, r6
 8003984:	4649      	mov	r1, r9
 8003986:	4640      	mov	r0, r8
 8003988:	47d0      	blx	sl
 800398a:	3001      	adds	r0, #1
 800398c:	d09b      	beq.n	80038c6 <_printf_i+0x166>
 800398e:	3501      	adds	r5, #1
 8003990:	68e3      	ldr	r3, [r4, #12]
 8003992:	9903      	ldr	r1, [sp, #12]
 8003994:	1a5b      	subs	r3, r3, r1
 8003996:	42ab      	cmp	r3, r5
 8003998:	dcf2      	bgt.n	8003980 <_printf_i+0x220>
 800399a:	e7eb      	b.n	8003974 <_printf_i+0x214>
 800399c:	2500      	movs	r5, #0
 800399e:	f104 0619 	add.w	r6, r4, #25
 80039a2:	e7f5      	b.n	8003990 <_printf_i+0x230>
 80039a4:	08004c61 	.word	0x08004c61
 80039a8:	08004c72 	.word	0x08004c72

080039ac <memchr>:
 80039ac:	4603      	mov	r3, r0
 80039ae:	b510      	push	{r4, lr}
 80039b0:	b2c9      	uxtb	r1, r1
 80039b2:	4402      	add	r2, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	d101      	bne.n	80039be <memchr+0x12>
 80039ba:	2000      	movs	r0, #0
 80039bc:	e003      	b.n	80039c6 <memchr+0x1a>
 80039be:	7804      	ldrb	r4, [r0, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	428c      	cmp	r4, r1
 80039c4:	d1f6      	bne.n	80039b4 <memchr+0x8>
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <memcpy>:
 80039c8:	440a      	add	r2, r1
 80039ca:	4291      	cmp	r1, r2
 80039cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80039d0:	d100      	bne.n	80039d4 <memcpy+0xc>
 80039d2:	4770      	bx	lr
 80039d4:	b510      	push	{r4, lr}
 80039d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039da:	4291      	cmp	r1, r2
 80039dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039e0:	d1f9      	bne.n	80039d6 <memcpy+0xe>
 80039e2:	bd10      	pop	{r4, pc}

080039e4 <memmove>:
 80039e4:	4288      	cmp	r0, r1
 80039e6:	b510      	push	{r4, lr}
 80039e8:	eb01 0402 	add.w	r4, r1, r2
 80039ec:	d902      	bls.n	80039f4 <memmove+0x10>
 80039ee:	4284      	cmp	r4, r0
 80039f0:	4623      	mov	r3, r4
 80039f2:	d807      	bhi.n	8003a04 <memmove+0x20>
 80039f4:	1e43      	subs	r3, r0, #1
 80039f6:	42a1      	cmp	r1, r4
 80039f8:	d008      	beq.n	8003a0c <memmove+0x28>
 80039fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a02:	e7f8      	b.n	80039f6 <memmove+0x12>
 8003a04:	4601      	mov	r1, r0
 8003a06:	4402      	add	r2, r0
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	d100      	bne.n	8003a0e <memmove+0x2a>
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a16:	e7f7      	b.n	8003a08 <memmove+0x24>

08003a18 <_free_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	d043      	beq.n	8003aa8 <_free_r+0x90>
 8003a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a24:	1f0c      	subs	r4, r1, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfb8      	it	lt
 8003a2a:	18e4      	addlt	r4, r4, r3
 8003a2c:	f000 f8d0 	bl	8003bd0 <__malloc_lock>
 8003a30:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <_free_r+0x94>)
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	4610      	mov	r0, r2
 8003a36:	b933      	cbnz	r3, 8003a46 <_free_r+0x2e>
 8003a38:	6063      	str	r3, [r4, #4]
 8003a3a:	6014      	str	r4, [r2, #0]
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a42:	f000 b8cb 	b.w	8003bdc <__malloc_unlock>
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	d90a      	bls.n	8003a60 <_free_r+0x48>
 8003a4a:	6821      	ldr	r1, [r4, #0]
 8003a4c:	1862      	adds	r2, r4, r1
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	bf01      	itttt	eq
 8003a52:	681a      	ldreq	r2, [r3, #0]
 8003a54:	685b      	ldreq	r3, [r3, #4]
 8003a56:	1852      	addeq	r2, r2, r1
 8003a58:	6022      	streq	r2, [r4, #0]
 8003a5a:	6063      	str	r3, [r4, #4]
 8003a5c:	6004      	str	r4, [r0, #0]
 8003a5e:	e7ed      	b.n	8003a3c <_free_r+0x24>
 8003a60:	461a      	mov	r2, r3
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b10b      	cbz	r3, 8003a6a <_free_r+0x52>
 8003a66:	42a3      	cmp	r3, r4
 8003a68:	d9fa      	bls.n	8003a60 <_free_r+0x48>
 8003a6a:	6811      	ldr	r1, [r2, #0]
 8003a6c:	1850      	adds	r0, r2, r1
 8003a6e:	42a0      	cmp	r0, r4
 8003a70:	d10b      	bne.n	8003a8a <_free_r+0x72>
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	4401      	add	r1, r0
 8003a76:	1850      	adds	r0, r2, r1
 8003a78:	4283      	cmp	r3, r0
 8003a7a:	6011      	str	r1, [r2, #0]
 8003a7c:	d1de      	bne.n	8003a3c <_free_r+0x24>
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4401      	add	r1, r0
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	6053      	str	r3, [r2, #4]
 8003a88:	e7d8      	b.n	8003a3c <_free_r+0x24>
 8003a8a:	d902      	bls.n	8003a92 <_free_r+0x7a>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	e7d4      	b.n	8003a3c <_free_r+0x24>
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	1821      	adds	r1, r4, r0
 8003a96:	428b      	cmp	r3, r1
 8003a98:	bf01      	itttt	eq
 8003a9a:	6819      	ldreq	r1, [r3, #0]
 8003a9c:	685b      	ldreq	r3, [r3, #4]
 8003a9e:	1809      	addeq	r1, r1, r0
 8003aa0:	6021      	streq	r1, [r4, #0]
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	6054      	str	r4, [r2, #4]
 8003aa6:	e7c9      	b.n	8003a3c <_free_r+0x24>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000894 	.word	0x20000894

08003ab0 <_malloc_r>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	1ccd      	adds	r5, r1, #3
 8003ab4:	f025 0503 	bic.w	r5, r5, #3
 8003ab8:	3508      	adds	r5, #8
 8003aba:	2d0c      	cmp	r5, #12
 8003abc:	bf38      	it	cc
 8003abe:	250c      	movcc	r5, #12
 8003ac0:	2d00      	cmp	r5, #0
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	db01      	blt.n	8003aca <_malloc_r+0x1a>
 8003ac6:	42a9      	cmp	r1, r5
 8003ac8:	d903      	bls.n	8003ad2 <_malloc_r+0x22>
 8003aca:	230c      	movs	r3, #12
 8003acc:	6033      	str	r3, [r6, #0]
 8003ace:	2000      	movs	r0, #0
 8003ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad2:	f000 f87d 	bl	8003bd0 <__malloc_lock>
 8003ad6:	4921      	ldr	r1, [pc, #132]	; (8003b5c <_malloc_r+0xac>)
 8003ad8:	680a      	ldr	r2, [r1, #0]
 8003ada:	4614      	mov	r4, r2
 8003adc:	b99c      	cbnz	r4, 8003b06 <_malloc_r+0x56>
 8003ade:	4f20      	ldr	r7, [pc, #128]	; (8003b60 <_malloc_r+0xb0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	b923      	cbnz	r3, 8003aee <_malloc_r+0x3e>
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f000 f862 	bl	8003bb0 <_sbrk_r>
 8003aec:	6038      	str	r0, [r7, #0]
 8003aee:	4629      	mov	r1, r5
 8003af0:	4630      	mov	r0, r6
 8003af2:	f000 f85d 	bl	8003bb0 <_sbrk_r>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d123      	bne.n	8003b42 <_malloc_r+0x92>
 8003afa:	230c      	movs	r3, #12
 8003afc:	4630      	mov	r0, r6
 8003afe:	6033      	str	r3, [r6, #0]
 8003b00:	f000 f86c 	bl	8003bdc <__malloc_unlock>
 8003b04:	e7e3      	b.n	8003ace <_malloc_r+0x1e>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	1b5b      	subs	r3, r3, r5
 8003b0a:	d417      	bmi.n	8003b3c <_malloc_r+0x8c>
 8003b0c:	2b0b      	cmp	r3, #11
 8003b0e:	d903      	bls.n	8003b18 <_malloc_r+0x68>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	441c      	add	r4, r3
 8003b14:	6025      	str	r5, [r4, #0]
 8003b16:	e004      	b.n	8003b22 <_malloc_r+0x72>
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	42a2      	cmp	r2, r4
 8003b1c:	bf0c      	ite	eq
 8003b1e:	600b      	streq	r3, [r1, #0]
 8003b20:	6053      	strne	r3, [r2, #4]
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f85a 	bl	8003bdc <__malloc_unlock>
 8003b28:	f104 000b 	add.w	r0, r4, #11
 8003b2c:	1d23      	adds	r3, r4, #4
 8003b2e:	f020 0007 	bic.w	r0, r0, #7
 8003b32:	1ac2      	subs	r2, r0, r3
 8003b34:	d0cc      	beq.n	8003ad0 <_malloc_r+0x20>
 8003b36:	1a1b      	subs	r3, r3, r0
 8003b38:	50a3      	str	r3, [r4, r2]
 8003b3a:	e7c9      	b.n	8003ad0 <_malloc_r+0x20>
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	6864      	ldr	r4, [r4, #4]
 8003b40:	e7cc      	b.n	8003adc <_malloc_r+0x2c>
 8003b42:	1cc4      	adds	r4, r0, #3
 8003b44:	f024 0403 	bic.w	r4, r4, #3
 8003b48:	42a0      	cmp	r0, r4
 8003b4a:	d0e3      	beq.n	8003b14 <_malloc_r+0x64>
 8003b4c:	1a21      	subs	r1, r4, r0
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f000 f82e 	bl	8003bb0 <_sbrk_r>
 8003b54:	3001      	adds	r0, #1
 8003b56:	d1dd      	bne.n	8003b14 <_malloc_r+0x64>
 8003b58:	e7cf      	b.n	8003afa <_malloc_r+0x4a>
 8003b5a:	bf00      	nop
 8003b5c:	20000894 	.word	0x20000894
 8003b60:	20000898 	.word	0x20000898

08003b64 <_realloc_r>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	4607      	mov	r7, r0
 8003b68:	4614      	mov	r4, r2
 8003b6a:	460e      	mov	r6, r1
 8003b6c:	b921      	cbnz	r1, 8003b78 <_realloc_r+0x14>
 8003b6e:	4611      	mov	r1, r2
 8003b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b74:	f7ff bf9c 	b.w	8003ab0 <_malloc_r>
 8003b78:	b922      	cbnz	r2, 8003b84 <_realloc_r+0x20>
 8003b7a:	f7ff ff4d 	bl	8003a18 <_free_r>
 8003b7e:	4625      	mov	r5, r4
 8003b80:	4628      	mov	r0, r5
 8003b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b84:	f000 f830 	bl	8003be8 <_malloc_usable_size_r>
 8003b88:	42a0      	cmp	r0, r4
 8003b8a:	d20f      	bcs.n	8003bac <_realloc_r+0x48>
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f7ff ff8e 	bl	8003ab0 <_malloc_r>
 8003b94:	4605      	mov	r5, r0
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d0f2      	beq.n	8003b80 <_realloc_r+0x1c>
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	f7ff ff13 	bl	80039c8 <memcpy>
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	f7ff ff37 	bl	8003a18 <_free_r>
 8003baa:	e7e9      	b.n	8003b80 <_realloc_r+0x1c>
 8003bac:	4635      	mov	r5, r6
 8003bae:	e7e7      	b.n	8003b80 <_realloc_r+0x1c>

08003bb0 <_sbrk_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4d05      	ldr	r5, [pc, #20]	; (8003bcc <_sbrk_r+0x1c>)
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	f7fd fbbc 	bl	8001338 <_sbrk>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_sbrk_r+0x1a>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_sbrk_r+0x1a>
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	20000958 	.word	0x20000958

08003bd0 <__malloc_lock>:
 8003bd0:	4801      	ldr	r0, [pc, #4]	; (8003bd8 <__malloc_lock+0x8>)
 8003bd2:	f000 b811 	b.w	8003bf8 <__retarget_lock_acquire_recursive>
 8003bd6:	bf00      	nop
 8003bd8:	20000960 	.word	0x20000960

08003bdc <__malloc_unlock>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	; (8003be4 <__malloc_unlock+0x8>)
 8003bde:	f000 b80c 	b.w	8003bfa <__retarget_lock_release_recursive>
 8003be2:	bf00      	nop
 8003be4:	20000960 	.word	0x20000960

08003be8 <_malloc_usable_size_r>:
 8003be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bec:	1f18      	subs	r0, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfbc      	itt	lt
 8003bf2:	580b      	ldrlt	r3, [r1, r0]
 8003bf4:	18c0      	addlt	r0, r0, r3
 8003bf6:	4770      	bx	lr

08003bf8 <__retarget_lock_acquire_recursive>:
 8003bf8:	4770      	bx	lr

08003bfa <__retarget_lock_release_recursive>:
 8003bfa:	4770      	bx	lr

08003bfc <sin>:
 8003bfc:	b530      	push	{r4, r5, lr}
 8003bfe:	4a20      	ldr	r2, [pc, #128]	; (8003c80 <sin+0x84>)
 8003c00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c04:	4293      	cmp	r3, r2
 8003c06:	b087      	sub	sp, #28
 8003c08:	dc06      	bgt.n	8003c18 <sin+0x1c>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2300      	movs	r3, #0
 8003c12:	f000 fe31 	bl	8004878 <__kernel_sin>
 8003c16:	e006      	b.n	8003c26 <sin+0x2a>
 8003c18:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <sin+0x88>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	dd05      	ble.n	8003c2a <sin+0x2e>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	f7fc fbcb 	bl	80003bc <__aeabi_dsub>
 8003c26:	b007      	add	sp, #28
 8003c28:	bd30      	pop	{r4, r5, pc}
 8003c2a:	aa02      	add	r2, sp, #8
 8003c2c:	f000 f82c 	bl	8003c88 <__ieee754_rem_pio2>
 8003c30:	f000 0003 	and.w	r0, r0, #3
 8003c34:	2801      	cmp	r0, #1
 8003c36:	d009      	beq.n	8003c4c <sin+0x50>
 8003c38:	2802      	cmp	r0, #2
 8003c3a:	d00e      	beq.n	8003c5a <sin+0x5e>
 8003c3c:	b9c0      	cbnz	r0, 8003c70 <sin+0x74>
 8003c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c42:	2301      	movs	r3, #1
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c4a:	e7e2      	b.n	8003c12 <sin+0x16>
 8003c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c54:	f000 fa08 	bl	8004068 <__kernel_cos>
 8003c58:	e7e5      	b.n	8003c26 <sin+0x2a>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c66:	f000 fe07 	bl	8004878 <__kernel_sin>
 8003c6a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003c6e:	e7da      	b.n	8003c26 <sin+0x2a>
 8003c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c78:	f000 f9f6 	bl	8004068 <__kernel_cos>
 8003c7c:	e7f5      	b.n	8003c6a <sin+0x6e>
 8003c7e:	bf00      	nop
 8003c80:	3fe921fb 	.word	0x3fe921fb
 8003c84:	7fefffff 	.word	0x7fefffff

08003c88 <__ieee754_rem_pio2>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	4ac4      	ldr	r2, [pc, #784]	; (8003fa0 <__ieee754_rem_pio2+0x318>)
 8003c90:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003c94:	b08d      	sub	sp, #52	; 0x34
 8003c96:	4592      	cmp	sl, r2
 8003c98:	9104      	str	r1, [sp, #16]
 8003c9a:	dc07      	bgt.n	8003cac <__ieee754_rem_pio2+0x24>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e9c4 0100 	strd	r0, r1, [r4]
 8003ca4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003ca8:	2500      	movs	r5, #0
 8003caa:	e024      	b.n	8003cf6 <__ieee754_rem_pio2+0x6e>
 8003cac:	4abd      	ldr	r2, [pc, #756]	; (8003fa4 <__ieee754_rem_pio2+0x31c>)
 8003cae:	4592      	cmp	sl, r2
 8003cb0:	dc72      	bgt.n	8003d98 <__ieee754_rem_pio2+0x110>
 8003cb2:	9b04      	ldr	r3, [sp, #16]
 8003cb4:	4dbc      	ldr	r5, [pc, #752]	; (8003fa8 <__ieee754_rem_pio2+0x320>)
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	a3ab      	add	r3, pc, #684	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2e0>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	dd36      	ble.n	8003d2e <__ieee754_rem_pio2+0xa6>
 8003cc0:	f7fc fb7c 	bl	80003bc <__aeabi_dsub>
 8003cc4:	45aa      	cmp	sl, r5
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	d018      	beq.n	8003cfe <__ieee754_rem_pio2+0x76>
 8003ccc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x2e8>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f7fc fb73 	bl	80003bc <__aeabi_dsub>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4630      	mov	r0, r6
 8003cdc:	e9c4 2300 	strd	r2, r3, [r4]
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	f7fc fb6b 	bl	80003bc <__aeabi_dsub>
 8003ce6:	a3a2      	add	r3, pc, #648	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x2e8>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f7fc fb66 	bl	80003bc <__aeabi_dsub>
 8003cf0:	2501      	movs	r5, #1
 8003cf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	b00d      	add	sp, #52	; 0x34
 8003cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfe:	a39e      	add	r3, pc, #632	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x2f0>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fb5a 	bl	80003bc <__aeabi_dsub>
 8003d08:	a39d      	add	r3, pc, #628	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x2f8>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460f      	mov	r7, r1
 8003d12:	f7fc fb53 	bl	80003bc <__aeabi_dsub>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8003d20:	4639      	mov	r1, r7
 8003d22:	f7fc fb4b 	bl	80003bc <__aeabi_dsub>
 8003d26:	a396      	add	r3, pc, #600	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x2f8>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	e7de      	b.n	8003cec <__ieee754_rem_pio2+0x64>
 8003d2e:	f7fc fb47 	bl	80003c0 <__adddf3>
 8003d32:	45aa      	cmp	sl, r5
 8003d34:	4606      	mov	r6, r0
 8003d36:	460f      	mov	r7, r1
 8003d38:	d016      	beq.n	8003d68 <__ieee754_rem_pio2+0xe0>
 8003d3a:	a38d      	add	r3, pc, #564	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x2e8>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fb3e 	bl	80003c0 <__adddf3>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4630      	mov	r0, r6
 8003d4a:	e9c4 2300 	strd	r2, r3, [r4]
 8003d4e:	4639      	mov	r1, r7
 8003d50:	f7fc fb34 	bl	80003bc <__aeabi_dsub>
 8003d54:	a386      	add	r3, pc, #536	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x2e8>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f7fc fb31 	bl	80003c0 <__adddf3>
 8003d5e:	f04f 35ff 	mov.w	r5, #4294967295
 8003d62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d66:	e7c6      	b.n	8003cf6 <__ieee754_rem_pio2+0x6e>
 8003d68:	a383      	add	r3, pc, #524	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x2f0>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc fb27 	bl	80003c0 <__adddf3>
 8003d72:	a383      	add	r3, pc, #524	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x2f8>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	4606      	mov	r6, r0
 8003d7a:	460f      	mov	r7, r1
 8003d7c:	f7fc fb20 	bl	80003c0 <__adddf3>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4630      	mov	r0, r6
 8003d86:	e9c4 2300 	strd	r2, r3, [r4]
 8003d8a:	4639      	mov	r1, r7
 8003d8c:	f7fc fb16 	bl	80003bc <__aeabi_dsub>
 8003d90:	a37b      	add	r3, pc, #492	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x2f8>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	e7e0      	b.n	8003d5a <__ieee754_rem_pio2+0xd2>
 8003d98:	4a84      	ldr	r2, [pc, #528]	; (8003fac <__ieee754_rem_pio2+0x324>)
 8003d9a:	4592      	cmp	sl, r2
 8003d9c:	f300 80d5 	bgt.w	8003f4a <__ieee754_rem_pio2+0x2c2>
 8003da0:	f000 fe20 	bl	80049e4 <fabs>
 8003da4:	a378      	add	r3, pc, #480	; (adr r3, 8003f88 <__ieee754_rem_pio2+0x300>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	4606      	mov	r6, r0
 8003dac:	460f      	mov	r7, r1
 8003dae:	f7fc f9d7 	bl	8000160 <__aeabi_dmul>
 8003db2:	2200      	movs	r2, #0
 8003db4:	4b7e      	ldr	r3, [pc, #504]	; (8003fb0 <__ieee754_rem_pio2+0x328>)
 8003db6:	f7fc fb03 	bl	80003c0 <__adddf3>
 8003dba:	f7fc fd3f 	bl	800083c <__aeabi_d2iz>
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	f7fc fc4a 	bl	8000658 <__aeabi_i2d>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dcc:	a366      	add	r3, pc, #408	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x2e0>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc f9c5 	bl	8000160 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4630      	mov	r0, r6
 8003ddc:	4639      	mov	r1, r7
 8003dde:	f7fc faed 	bl	80003bc <__aeabi_dsub>
 8003de2:	a363      	add	r3, pc, #396	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x2e8>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	4680      	mov	r8, r0
 8003dea:	4689      	mov	r9, r1
 8003dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003df0:	f7fc f9b6 	bl	8000160 <__aeabi_dmul>
 8003df4:	2d1f      	cmp	r5, #31
 8003df6:	4606      	mov	r6, r0
 8003df8:	460f      	mov	r7, r1
 8003dfa:	dc0e      	bgt.n	8003e1a <__ieee754_rem_pio2+0x192>
 8003dfc:	4b6d      	ldr	r3, [pc, #436]	; (8003fb4 <__ieee754_rem_pio2+0x32c>)
 8003dfe:	1e6a      	subs	r2, r5, #1
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	4553      	cmp	r3, sl
 8003e06:	d008      	beq.n	8003e1a <__ieee754_rem_pio2+0x192>
 8003e08:	4632      	mov	r2, r6
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	4649      	mov	r1, r9
 8003e10:	f7fc fad4 	bl	80003bc <__aeabi_dsub>
 8003e14:	e9c4 0100 	strd	r0, r1, [r4]
 8003e18:	e013      	b.n	8003e42 <__ieee754_rem_pio2+0x1ba>
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	4640      	mov	r0, r8
 8003e20:	4649      	mov	r1, r9
 8003e22:	f7fc facb 	bl	80003bc <__aeabi_dsub>
 8003e26:	ea4f 532a 	mov.w	r3, sl, asr #20
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e30:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8003e34:	f1ba 0f10 	cmp.w	sl, #16
 8003e38:	dc1f      	bgt.n	8003e7a <__ieee754_rem_pio2+0x1f2>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9c4 2300 	strd	r2, r3, [r4]
 8003e42:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003e46:	4640      	mov	r0, r8
 8003e48:	4653      	mov	r3, sl
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f7fc fab6 	bl	80003bc <__aeabi_dsub>
 8003e50:	4632      	mov	r2, r6
 8003e52:	463b      	mov	r3, r7
 8003e54:	f7fc fab2 	bl	80003bc <__aeabi_dsub>
 8003e58:	460b      	mov	r3, r1
 8003e5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e5e:	9904      	ldr	r1, [sp, #16]
 8003e60:	4602      	mov	r2, r0
 8003e62:	2900      	cmp	r1, #0
 8003e64:	f6bf af47 	bge.w	8003cf6 <__ieee754_rem_pio2+0x6e>
 8003e68:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003e6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	60e3      	str	r3, [r4, #12]
 8003e76:	426d      	negs	r5, r5
 8003e78:	e73d      	b.n	8003cf6 <__ieee754_rem_pio2+0x6e>
 8003e7a:	a33f      	add	r3, pc, #252	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x2f0>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e84:	f7fc f96c 	bl	8000160 <__aeabi_dmul>
 8003e88:	4606      	mov	r6, r0
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4640      	mov	r0, r8
 8003e92:	4649      	mov	r1, r9
 8003e94:	f7fc fa92 	bl	80003bc <__aeabi_dsub>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4682      	mov	sl, r0
 8003e9e:	468b      	mov	fp, r1
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	f7fc fa8a 	bl	80003bc <__aeabi_dsub>
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	463b      	mov	r3, r7
 8003eac:	f7fc fa86 	bl	80003bc <__aeabi_dsub>
 8003eb0:	a333      	add	r3, pc, #204	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x2f8>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	460f      	mov	r7, r1
 8003eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ebe:	f7fc f94f 	bl	8000160 <__aeabi_dmul>
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	f7fc fa79 	bl	80003bc <__aeabi_dsub>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4606      	mov	r6, r0
 8003ed0:	460f      	mov	r7, r1
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	f7fc fa71 	bl	80003bc <__aeabi_dsub>
 8003eda:	9a05      	ldr	r2, [sp, #20]
 8003edc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b31      	cmp	r3, #49	; 0x31
 8003ee4:	dc06      	bgt.n	8003ef4 <__ieee754_rem_pio2+0x26c>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	46d0      	mov	r8, sl
 8003eec:	46d9      	mov	r9, fp
 8003eee:	e9c4 2300 	strd	r2, r3, [r4]
 8003ef2:	e7a6      	b.n	8003e42 <__ieee754_rem_pio2+0x1ba>
 8003ef4:	a326      	add	r3, pc, #152	; (adr r3, 8003f90 <__ieee754_rem_pio2+0x308>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003efe:	f7fc f92f 	bl	8000160 <__aeabi_dmul>
 8003f02:	4606      	mov	r6, r0
 8003f04:	460f      	mov	r7, r1
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4650      	mov	r0, sl
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	f7fc fa55 	bl	80003bc <__aeabi_dsub>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4680      	mov	r8, r0
 8003f18:	4689      	mov	r9, r1
 8003f1a:	4650      	mov	r0, sl
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	f7fc fa4d 	bl	80003bc <__aeabi_dsub>
 8003f22:	4632      	mov	r2, r6
 8003f24:	463b      	mov	r3, r7
 8003f26:	f7fc fa49 	bl	80003bc <__aeabi_dsub>
 8003f2a:	a31b      	add	r3, pc, #108	; (adr r3, 8003f98 <__ieee754_rem_pio2+0x310>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	4606      	mov	r6, r0
 8003f32:	460f      	mov	r7, r1
 8003f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f38:	f7fc f912 	bl	8000160 <__aeabi_dmul>
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	463b      	mov	r3, r7
 8003f40:	f7fc fa3c 	bl	80003bc <__aeabi_dsub>
 8003f44:	4606      	mov	r6, r0
 8003f46:	460f      	mov	r7, r1
 8003f48:	e75e      	b.n	8003e08 <__ieee754_rem_pio2+0x180>
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <__ieee754_rem_pio2+0x330>)
 8003f4c:	4592      	cmp	sl, r2
 8003f4e:	dd35      	ble.n	8003fbc <__ieee754_rem_pio2+0x334>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	f7fc fa32 	bl	80003bc <__aeabi_dsub>
 8003f58:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f5c:	e9c4 0100 	strd	r0, r1, [r4]
 8003f60:	e6a2      	b.n	8003ca8 <__ieee754_rem_pio2+0x20>
 8003f62:	bf00      	nop
 8003f64:	f3af 8000 	nop.w
 8003f68:	54400000 	.word	0x54400000
 8003f6c:	3ff921fb 	.word	0x3ff921fb
 8003f70:	1a626331 	.word	0x1a626331
 8003f74:	3dd0b461 	.word	0x3dd0b461
 8003f78:	1a600000 	.word	0x1a600000
 8003f7c:	3dd0b461 	.word	0x3dd0b461
 8003f80:	2e037073 	.word	0x2e037073
 8003f84:	3ba3198a 	.word	0x3ba3198a
 8003f88:	6dc9c883 	.word	0x6dc9c883
 8003f8c:	3fe45f30 	.word	0x3fe45f30
 8003f90:	2e000000 	.word	0x2e000000
 8003f94:	3ba3198a 	.word	0x3ba3198a
 8003f98:	252049c1 	.word	0x252049c1
 8003f9c:	397b839a 	.word	0x397b839a
 8003fa0:	3fe921fb 	.word	0x3fe921fb
 8003fa4:	4002d97b 	.word	0x4002d97b
 8003fa8:	3ff921fb 	.word	0x3ff921fb
 8003fac:	413921fb 	.word	0x413921fb
 8003fb0:	3fe00000 	.word	0x3fe00000
 8003fb4:	08004c84 	.word	0x08004c84
 8003fb8:	7fefffff 	.word	0x7fefffff
 8003fbc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003fc0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003fc4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003fc8:	460f      	mov	r7, r1
 8003fca:	4606      	mov	r6, r0
 8003fcc:	f7fc fc36 	bl	800083c <__aeabi_d2iz>
 8003fd0:	f7fc fb42 	bl	8000658 <__aeabi_i2d>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4630      	mov	r0, r6
 8003fda:	4639      	mov	r1, r7
 8003fdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fe0:	f7fc f9ec 	bl	80003bc <__aeabi_dsub>
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <__ieee754_rem_pio2+0x3d8>)
 8003fe8:	f7fc f8ba 	bl	8000160 <__aeabi_dmul>
 8003fec:	460f      	mov	r7, r1
 8003fee:	4606      	mov	r6, r0
 8003ff0:	f7fc fc24 	bl	800083c <__aeabi_d2iz>
 8003ff4:	f7fc fb30 	bl	8000658 <__aeabi_i2d>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	4639      	mov	r1, r7
 8004000:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004004:	f7fc f9da 	bl	80003bc <__aeabi_dsub>
 8004008:	2200      	movs	r2, #0
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <__ieee754_rem_pio2+0x3d8>)
 800400c:	f7fc f8a8 	bl	8000160 <__aeabi_dmul>
 8004010:	f04f 0803 	mov.w	r8, #3
 8004014:	2600      	movs	r6, #0
 8004016:	2700      	movs	r7, #0
 8004018:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800401c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004020:	4632      	mov	r2, r6
 8004022:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004026:	463b      	mov	r3, r7
 8004028:	46c2      	mov	sl, r8
 800402a:	f108 38ff 	add.w	r8, r8, #4294967295
 800402e:	f7fc fbd3 	bl	80007d8 <__aeabi_dcmpeq>
 8004032:	2800      	cmp	r0, #0
 8004034:	d1f4      	bne.n	8004020 <__ieee754_rem_pio2+0x398>
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <__ieee754_rem_pio2+0x3dc>)
 8004038:	462a      	mov	r2, r5
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	2302      	movs	r3, #2
 800403e:	4621      	mov	r1, r4
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	a806      	add	r0, sp, #24
 8004044:	4653      	mov	r3, sl
 8004046:	f000 f8cd 	bl	80041e4 <__kernel_rem_pio2>
 800404a:	9b04      	ldr	r3, [sp, #16]
 800404c:	4605      	mov	r5, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f6bf ae51 	bge.w	8003cf6 <__ieee754_rem_pio2+0x6e>
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800405a:	6063      	str	r3, [r4, #4]
 800405c:	68e3      	ldr	r3, [r4, #12]
 800405e:	e707      	b.n	8003e70 <__ieee754_rem_pio2+0x1e8>
 8004060:	41700000 	.word	0x41700000
 8004064:	08004d04 	.word	0x08004d04

08004068 <__kernel_cos>:
 8004068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004070:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004074:	4680      	mov	r8, r0
 8004076:	460f      	mov	r7, r1
 8004078:	e9cd 2300 	strd	r2, r3, [sp]
 800407c:	da04      	bge.n	8004088 <__kernel_cos+0x20>
 800407e:	f7fc fbdd 	bl	800083c <__aeabi_d2iz>
 8004082:	2800      	cmp	r0, #0
 8004084:	f000 8086 	beq.w	8004194 <__kernel_cos+0x12c>
 8004088:	4642      	mov	r2, r8
 800408a:	463b      	mov	r3, r7
 800408c:	4640      	mov	r0, r8
 800408e:	4639      	mov	r1, r7
 8004090:	f7fc f866 	bl	8000160 <__aeabi_dmul>
 8004094:	2200      	movs	r2, #0
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <__kernel_cos+0x168>)
 8004098:	4604      	mov	r4, r0
 800409a:	460d      	mov	r5, r1
 800409c:	f7fc f860 	bl	8000160 <__aeabi_dmul>
 80040a0:	a33f      	add	r3, pc, #252	; (adr r3, 80041a0 <__kernel_cos+0x138>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	4682      	mov	sl, r0
 80040a8:	468b      	mov	fp, r1
 80040aa:	4620      	mov	r0, r4
 80040ac:	4629      	mov	r1, r5
 80040ae:	f7fc f857 	bl	8000160 <__aeabi_dmul>
 80040b2:	a33d      	add	r3, pc, #244	; (adr r3, 80041a8 <__kernel_cos+0x140>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f7fc f982 	bl	80003c0 <__adddf3>
 80040bc:	4622      	mov	r2, r4
 80040be:	462b      	mov	r3, r5
 80040c0:	f7fc f84e 	bl	8000160 <__aeabi_dmul>
 80040c4:	a33a      	add	r3, pc, #232	; (adr r3, 80041b0 <__kernel_cos+0x148>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f7fc f977 	bl	80003bc <__aeabi_dsub>
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f7fc f845 	bl	8000160 <__aeabi_dmul>
 80040d6:	a338      	add	r3, pc, #224	; (adr r3, 80041b8 <__kernel_cos+0x150>)
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f7fc f970 	bl	80003c0 <__adddf3>
 80040e0:	4622      	mov	r2, r4
 80040e2:	462b      	mov	r3, r5
 80040e4:	f7fc f83c 	bl	8000160 <__aeabi_dmul>
 80040e8:	a335      	add	r3, pc, #212	; (adr r3, 80041c0 <__kernel_cos+0x158>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc f965 	bl	80003bc <__aeabi_dsub>
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	f7fc f833 	bl	8000160 <__aeabi_dmul>
 80040fa:	a333      	add	r3, pc, #204	; (adr r3, 80041c8 <__kernel_cos+0x160>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc f95e 	bl	80003c0 <__adddf3>
 8004104:	4622      	mov	r2, r4
 8004106:	462b      	mov	r3, r5
 8004108:	f7fc f82a 	bl	8000160 <__aeabi_dmul>
 800410c:	4622      	mov	r2, r4
 800410e:	462b      	mov	r3, r5
 8004110:	f7fc f826 	bl	8000160 <__aeabi_dmul>
 8004114:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004118:	4604      	mov	r4, r0
 800411a:	460d      	mov	r5, r1
 800411c:	4640      	mov	r0, r8
 800411e:	4639      	mov	r1, r7
 8004120:	f7fc f81e 	bl	8000160 <__aeabi_dmul>
 8004124:	460b      	mov	r3, r1
 8004126:	4602      	mov	r2, r0
 8004128:	4629      	mov	r1, r5
 800412a:	4620      	mov	r0, r4
 800412c:	f7fc f946 	bl	80003bc <__aeabi_dsub>
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <__kernel_cos+0x16c>)
 8004132:	4680      	mov	r8, r0
 8004134:	429e      	cmp	r6, r3
 8004136:	4689      	mov	r9, r1
 8004138:	dc0e      	bgt.n	8004158 <__kernel_cos+0xf0>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4650      	mov	r0, sl
 8004140:	4659      	mov	r1, fp
 8004142:	f7fc f93b 	bl	80003bc <__aeabi_dsub>
 8004146:	4602      	mov	r2, r0
 8004148:	2000      	movs	r0, #0
 800414a:	460b      	mov	r3, r1
 800414c:	4922      	ldr	r1, [pc, #136]	; (80041d8 <__kernel_cos+0x170>)
 800414e:	f7fc f935 	bl	80003bc <__aeabi_dsub>
 8004152:	b003      	add	sp, #12
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004158:	2400      	movs	r4, #0
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <__kernel_cos+0x174>)
 800415c:	4622      	mov	r2, r4
 800415e:	429e      	cmp	r6, r3
 8004160:	bfcc      	ite	gt
 8004162:	4d1f      	ldrgt	r5, [pc, #124]	; (80041e0 <__kernel_cos+0x178>)
 8004164:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004168:	462b      	mov	r3, r5
 800416a:	2000      	movs	r0, #0
 800416c:	491a      	ldr	r1, [pc, #104]	; (80041d8 <__kernel_cos+0x170>)
 800416e:	f7fc f925 	bl	80003bc <__aeabi_dsub>
 8004172:	4622      	mov	r2, r4
 8004174:	4606      	mov	r6, r0
 8004176:	460f      	mov	r7, r1
 8004178:	462b      	mov	r3, r5
 800417a:	4650      	mov	r0, sl
 800417c:	4659      	mov	r1, fp
 800417e:	f7fc f91d 	bl	80003bc <__aeabi_dsub>
 8004182:	4642      	mov	r2, r8
 8004184:	464b      	mov	r3, r9
 8004186:	f7fc f919 	bl	80003bc <__aeabi_dsub>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4630      	mov	r0, r6
 8004190:	4639      	mov	r1, r7
 8004192:	e7dc      	b.n	800414e <__kernel_cos+0xe6>
 8004194:	2000      	movs	r0, #0
 8004196:	4910      	ldr	r1, [pc, #64]	; (80041d8 <__kernel_cos+0x170>)
 8004198:	e7db      	b.n	8004152 <__kernel_cos+0xea>
 800419a:	bf00      	nop
 800419c:	f3af 8000 	nop.w
 80041a0:	be8838d4 	.word	0xbe8838d4
 80041a4:	bda8fae9 	.word	0xbda8fae9
 80041a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80041ac:	3e21ee9e 	.word	0x3e21ee9e
 80041b0:	809c52ad 	.word	0x809c52ad
 80041b4:	3e927e4f 	.word	0x3e927e4f
 80041b8:	19cb1590 	.word	0x19cb1590
 80041bc:	3efa01a0 	.word	0x3efa01a0
 80041c0:	16c15177 	.word	0x16c15177
 80041c4:	3f56c16c 	.word	0x3f56c16c
 80041c8:	5555554c 	.word	0x5555554c
 80041cc:	3fa55555 	.word	0x3fa55555
 80041d0:	3fe00000 	.word	0x3fe00000
 80041d4:	3fd33332 	.word	0x3fd33332
 80041d8:	3ff00000 	.word	0x3ff00000
 80041dc:	3fe90000 	.word	0x3fe90000
 80041e0:	3fd20000 	.word	0x3fd20000

080041e4 <__kernel_rem_pio2>:
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80041ec:	9308      	str	r3, [sp, #32]
 80041ee:	9101      	str	r1, [sp, #4]
 80041f0:	4bc0      	ldr	r3, [pc, #768]	; (80044f4 <__kernel_rem_pio2+0x310>)
 80041f2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80041f4:	f112 0f14 	cmn.w	r2, #20
 80041f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80041fc:	bfa8      	it	ge
 80041fe:	1ed4      	subge	r4, r2, #3
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	9b08      	ldr	r3, [sp, #32]
 8004204:	bfb8      	it	lt
 8004206:	2400      	movlt	r4, #0
 8004208:	f103 33ff 	add.w	r3, r3, #4294967295
 800420c:	9306      	str	r3, [sp, #24]
 800420e:	bfa4      	itt	ge
 8004210:	2318      	movge	r3, #24
 8004212:	fb94 f4f3 	sdivge	r4, r4, r3
 8004216:	f06f 0317 	mvn.w	r3, #23
 800421a:	fb04 3303 	mla	r3, r4, r3, r3
 800421e:	eb03 0a02 	add.w	sl, r3, r2
 8004222:	9a06      	ldr	r2, [sp, #24]
 8004224:	9b04      	ldr	r3, [sp, #16]
 8004226:	1aa7      	subs	r7, r4, r2
 8004228:	eb03 0802 	add.w	r8, r3, r2
 800422c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800422e:	2500      	movs	r5, #0
 8004230:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004234:	2200      	movs	r2, #0
 8004236:	2300      	movs	r3, #0
 8004238:	9009      	str	r0, [sp, #36]	; 0x24
 800423a:	ae20      	add	r6, sp, #128	; 0x80
 800423c:	4545      	cmp	r5, r8
 800423e:	dd19      	ble.n	8004274 <__kernel_rem_pio2+0x90>
 8004240:	9b08      	ldr	r3, [sp, #32]
 8004242:	aa20      	add	r2, sp, #128	; 0x80
 8004244:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004248:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800424c:	f1c3 0301 	rsb	r3, r3, #1
 8004250:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004254:	9307      	str	r3, [sp, #28]
 8004256:	9b07      	ldr	r3, [sp, #28]
 8004258:	9a04      	ldr	r2, [sp, #16]
 800425a:	4443      	add	r3, r8
 800425c:	429a      	cmp	r2, r3
 800425e:	db35      	blt.n	80042cc <__kernel_rem_pio2+0xe8>
 8004260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004262:	2200      	movs	r2, #0
 8004264:	f1a3 0908 	sub.w	r9, r3, #8
 8004268:	2300      	movs	r3, #0
 800426a:	462f      	mov	r7, r5
 800426c:	2600      	movs	r6, #0
 800426e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004272:	e01f      	b.n	80042b4 <__kernel_rem_pio2+0xd0>
 8004274:	42ef      	cmn	r7, r5
 8004276:	d40b      	bmi.n	8004290 <__kernel_rem_pio2+0xac>
 8004278:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800427c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004280:	f7fc f9ea 	bl	8000658 <__aeabi_i2d>
 8004284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004288:	e8e6 0102 	strd	r0, r1, [r6], #8
 800428c:	3501      	adds	r5, #1
 800428e:	e7d5      	b.n	800423c <__kernel_rem_pio2+0x58>
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	e7f8      	b.n	8004288 <__kernel_rem_pio2+0xa4>
 8004296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800429a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800429e:	f7fb ff5f 	bl	8000160 <__aeabi_dmul>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042aa:	f7fc f889 	bl	80003c0 <__adddf3>
 80042ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b2:	3601      	adds	r6, #1
 80042b4:	9b06      	ldr	r3, [sp, #24]
 80042b6:	3f08      	subs	r7, #8
 80042b8:	429e      	cmp	r6, r3
 80042ba:	ddec      	ble.n	8004296 <__kernel_rem_pio2+0xb2>
 80042bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042c0:	3508      	adds	r5, #8
 80042c2:	e8eb 2302 	strd	r2, r3, [fp], #8
 80042c6:	f108 0801 	add.w	r8, r8, #1
 80042ca:	e7c4      	b.n	8004256 <__kernel_rem_pio2+0x72>
 80042cc:	9b04      	ldr	r3, [sp, #16]
 80042ce:	aa0c      	add	r2, sp, #48	; 0x30
 80042d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80042d6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80042d8:	9f04      	ldr	r7, [sp, #16]
 80042da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80042de:	930a      	str	r3, [sp, #40]	; 0x28
 80042e0:	463e      	mov	r6, r7
 80042e2:	ab98      	add	r3, sp, #608	; 0x260
 80042e4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80042e8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80042ec:	f8cd b008 	str.w	fp, [sp, #8]
 80042f0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80042f4:	2e00      	cmp	r6, #0
 80042f6:	dc71      	bgt.n	80043dc <__kernel_rem_pio2+0x1f8>
 80042f8:	4652      	mov	r2, sl
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f000 fbf7 	bl	8004af0 <scalbn>
 8004302:	2200      	movs	r2, #0
 8004304:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004308:	4604      	mov	r4, r0
 800430a:	460d      	mov	r5, r1
 800430c:	f7fb ff28 	bl	8000160 <__aeabi_dmul>
 8004310:	f000 fb6e 	bl	80049f0 <floor>
 8004314:	2200      	movs	r2, #0
 8004316:	4b78      	ldr	r3, [pc, #480]	; (80044f8 <__kernel_rem_pio2+0x314>)
 8004318:	f7fb ff22 	bl	8000160 <__aeabi_dmul>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4620      	mov	r0, r4
 8004322:	4629      	mov	r1, r5
 8004324:	f7fc f84a 	bl	80003bc <__aeabi_dsub>
 8004328:	460d      	mov	r5, r1
 800432a:	4604      	mov	r4, r0
 800432c:	f7fc fa86 	bl	800083c <__aeabi_d2iz>
 8004330:	9007      	str	r0, [sp, #28]
 8004332:	f7fc f991 	bl	8000658 <__aeabi_i2d>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4620      	mov	r0, r4
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc f83d 	bl	80003bc <__aeabi_dsub>
 8004342:	f1ba 0f00 	cmp.w	sl, #0
 8004346:	4680      	mov	r8, r0
 8004348:	4689      	mov	r9, r1
 800434a:	dd70      	ble.n	800442e <__kernel_rem_pio2+0x24a>
 800434c:	1e7a      	subs	r2, r7, #1
 800434e:	ab0c      	add	r3, sp, #48	; 0x30
 8004350:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004354:	9c07      	ldr	r4, [sp, #28]
 8004356:	f1ca 0118 	rsb	r1, sl, #24
 800435a:	fa40 f301 	asr.w	r3, r0, r1
 800435e:	441c      	add	r4, r3
 8004360:	408b      	lsls	r3, r1
 8004362:	1ac0      	subs	r0, r0, r3
 8004364:	ab0c      	add	r3, sp, #48	; 0x30
 8004366:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800436a:	f1ca 0317 	rsb	r3, sl, #23
 800436e:	9407      	str	r4, [sp, #28]
 8004370:	fa40 f303 	asr.w	r3, r0, r3
 8004374:	9302      	str	r3, [sp, #8]
 8004376:	9b02      	ldr	r3, [sp, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	dd66      	ble.n	800444a <__kernel_rem_pio2+0x266>
 800437c:	2200      	movs	r2, #0
 800437e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004382:	4614      	mov	r4, r2
 8004384:	9b07      	ldr	r3, [sp, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	9307      	str	r3, [sp, #28]
 800438a:	4297      	cmp	r7, r2
 800438c:	f300 809f 	bgt.w	80044ce <__kernel_rem_pio2+0x2ea>
 8004390:	f1ba 0f00 	cmp.w	sl, #0
 8004394:	dd07      	ble.n	80043a6 <__kernel_rem_pio2+0x1c2>
 8004396:	f1ba 0f01 	cmp.w	sl, #1
 800439a:	f000 80b9 	beq.w	8004510 <__kernel_rem_pio2+0x32c>
 800439e:	f1ba 0f02 	cmp.w	sl, #2
 80043a2:	f000 80bf 	beq.w	8004524 <__kernel_rem_pio2+0x340>
 80043a6:	9b02      	ldr	r3, [sp, #8]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d14e      	bne.n	800444a <__kernel_rem_pio2+0x266>
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	2000      	movs	r0, #0
 80043b2:	4952      	ldr	r1, [pc, #328]	; (80044fc <__kernel_rem_pio2+0x318>)
 80043b4:	f7fc f802 	bl	80003bc <__aeabi_dsub>
 80043b8:	4680      	mov	r8, r0
 80043ba:	4689      	mov	r9, r1
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d044      	beq.n	800444a <__kernel_rem_pio2+0x266>
 80043c0:	4652      	mov	r2, sl
 80043c2:	2000      	movs	r0, #0
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <__kernel_rem_pio2+0x318>)
 80043c6:	f000 fb93 	bl	8004af0 <scalbn>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4640      	mov	r0, r8
 80043d0:	4649      	mov	r1, r9
 80043d2:	f7fb fff3 	bl	80003bc <__aeabi_dsub>
 80043d6:	4680      	mov	r8, r0
 80043d8:	4689      	mov	r9, r1
 80043da:	e036      	b.n	800444a <__kernel_rem_pio2+0x266>
 80043dc:	2200      	movs	r2, #0
 80043de:	4b48      	ldr	r3, [pc, #288]	; (8004500 <__kernel_rem_pio2+0x31c>)
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fb febc 	bl	8000160 <__aeabi_dmul>
 80043e8:	f7fc fa28 	bl	800083c <__aeabi_d2iz>
 80043ec:	f7fc f934 	bl	8000658 <__aeabi_i2d>
 80043f0:	2200      	movs	r2, #0
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <__kernel_rem_pio2+0x320>)
 80043f4:	4680      	mov	r8, r0
 80043f6:	4689      	mov	r9, r1
 80043f8:	f7fb feb2 	bl	8000160 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4620      	mov	r0, r4
 8004402:	4629      	mov	r1, r5
 8004404:	f7fb ffda 	bl	80003bc <__aeabi_dsub>
 8004408:	f7fc fa18 	bl	800083c <__aeabi_d2iz>
 800440c:	9b02      	ldr	r3, [sp, #8]
 800440e:	3e01      	subs	r6, #1
 8004410:	f843 0b04 	str.w	r0, [r3], #4
 8004414:	9302      	str	r3, [sp, #8]
 8004416:	ab70      	add	r3, sp, #448	; 0x1c0
 8004418:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800441c:	4640      	mov	r0, r8
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	4649      	mov	r1, r9
 8004424:	f7fb ffcc 	bl	80003c0 <__adddf3>
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	e762      	b.n	80042f4 <__kernel_rem_pio2+0x110>
 800442e:	d105      	bne.n	800443c <__kernel_rem_pio2+0x258>
 8004430:	1e7b      	subs	r3, r7, #1
 8004432:	aa0c      	add	r2, sp, #48	; 0x30
 8004434:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004438:	15c3      	asrs	r3, r0, #23
 800443a:	e79b      	b.n	8004374 <__kernel_rem_pio2+0x190>
 800443c:	2200      	movs	r2, #0
 800443e:	4b32      	ldr	r3, [pc, #200]	; (8004508 <__kernel_rem_pio2+0x324>)
 8004440:	f7fc f9e8 	bl	8000814 <__aeabi_dcmpge>
 8004444:	2800      	cmp	r0, #0
 8004446:	d13f      	bne.n	80044c8 <__kernel_rem_pio2+0x2e4>
 8004448:	9002      	str	r0, [sp, #8]
 800444a:	2200      	movs	r2, #0
 800444c:	2300      	movs	r3, #0
 800444e:	4640      	mov	r0, r8
 8004450:	4649      	mov	r1, r9
 8004452:	f7fc f9c1 	bl	80007d8 <__aeabi_dcmpeq>
 8004456:	2800      	cmp	r0, #0
 8004458:	f000 80b5 	beq.w	80045c6 <__kernel_rem_pio2+0x3e2>
 800445c:	1e7c      	subs	r4, r7, #1
 800445e:	4623      	mov	r3, r4
 8004460:	2200      	movs	r2, #0
 8004462:	9904      	ldr	r1, [sp, #16]
 8004464:	428b      	cmp	r3, r1
 8004466:	da64      	bge.n	8004532 <__kernel_rem_pio2+0x34e>
 8004468:	2a00      	cmp	r2, #0
 800446a:	d078      	beq.n	800455e <__kernel_rem_pio2+0x37a>
 800446c:	ab0c      	add	r3, sp, #48	; 0x30
 800446e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004472:	f1aa 0a18 	sub.w	sl, sl, #24
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80a3 	beq.w	80045c2 <__kernel_rem_pio2+0x3de>
 800447c:	4652      	mov	r2, sl
 800447e:	2000      	movs	r0, #0
 8004480:	491e      	ldr	r1, [pc, #120]	; (80044fc <__kernel_rem_pio2+0x318>)
 8004482:	f000 fb35 	bl	8004af0 <scalbn>
 8004486:	46a2      	mov	sl, r4
 8004488:	4606      	mov	r6, r0
 800448a:	460f      	mov	r7, r1
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	00e3      	lsls	r3, r4, #3
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8004500 <__kernel_rem_pio2+0x31c>
 8004498:	ab70      	add	r3, sp, #448	; 0x1c0
 800449a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800449e:	f1ba 0f00 	cmp.w	sl, #0
 80044a2:	f280 80c6 	bge.w	8004632 <__kernel_rem_pio2+0x44e>
 80044a6:	4627      	mov	r7, r4
 80044a8:	f04f 0800 	mov.w	r8, #0
 80044ac:	2f00      	cmp	r7, #0
 80044ae:	f2c0 80f3 	blt.w	8004698 <__kernel_rem_pio2+0x4b4>
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <__kernel_rem_pio2+0x328>)
 80044b4:	f04f 0a00 	mov.w	sl, #0
 80044b8:	461d      	mov	r5, r3
 80044ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80044bc:	f04f 0b00 	mov.w	fp, #0
 80044c0:	2600      	movs	r6, #0
 80044c2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80044c6:	e0d9      	b.n	800467c <__kernel_rem_pio2+0x498>
 80044c8:	2302      	movs	r3, #2
 80044ca:	9302      	str	r3, [sp, #8]
 80044cc:	e756      	b.n	800437c <__kernel_rem_pio2+0x198>
 80044ce:	f8db 3000 	ldr.w	r3, [fp]
 80044d2:	b954      	cbnz	r4, 80044ea <__kernel_rem_pio2+0x306>
 80044d4:	b123      	cbz	r3, 80044e0 <__kernel_rem_pio2+0x2fc>
 80044d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80044da:	f8cb 3000 	str.w	r3, [fp]
 80044de:	2301      	movs	r3, #1
 80044e0:	461c      	mov	r4, r3
 80044e2:	3201      	adds	r2, #1
 80044e4:	f10b 0b04 	add.w	fp, fp, #4
 80044e8:	e74f      	b.n	800438a <__kernel_rem_pio2+0x1a6>
 80044ea:	1acb      	subs	r3, r1, r3
 80044ec:	f8cb 3000 	str.w	r3, [fp]
 80044f0:	4623      	mov	r3, r4
 80044f2:	e7f5      	b.n	80044e0 <__kernel_rem_pio2+0x2fc>
 80044f4:	08004e50 	.word	0x08004e50
 80044f8:	40200000 	.word	0x40200000
 80044fc:	3ff00000 	.word	0x3ff00000
 8004500:	3e700000 	.word	0x3e700000
 8004504:	41700000 	.word	0x41700000
 8004508:	3fe00000 	.word	0x3fe00000
 800450c:	08004e10 	.word	0x08004e10
 8004510:	1e7a      	subs	r2, r7, #1
 8004512:	ab0c      	add	r3, sp, #48	; 0x30
 8004514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004518:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800451c:	a90c      	add	r1, sp, #48	; 0x30
 800451e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004522:	e740      	b.n	80043a6 <__kernel_rem_pio2+0x1c2>
 8004524:	1e7a      	subs	r2, r7, #1
 8004526:	ab0c      	add	r3, sp, #48	; 0x30
 8004528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004530:	e7f4      	b.n	800451c <__kernel_rem_pio2+0x338>
 8004532:	a90c      	add	r1, sp, #48	; 0x30
 8004534:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004538:	3b01      	subs	r3, #1
 800453a:	430a      	orrs	r2, r1
 800453c:	e791      	b.n	8004462 <__kernel_rem_pio2+0x27e>
 800453e:	3401      	adds	r4, #1
 8004540:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004544:	2a00      	cmp	r2, #0
 8004546:	d0fa      	beq.n	800453e <__kernel_rem_pio2+0x35a>
 8004548:	9b08      	ldr	r3, [sp, #32]
 800454a:	1c7e      	adds	r6, r7, #1
 800454c:	18fd      	adds	r5, r7, r3
 800454e:	ab20      	add	r3, sp, #128	; 0x80
 8004550:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004554:	443c      	add	r4, r7
 8004556:	42b4      	cmp	r4, r6
 8004558:	da04      	bge.n	8004564 <__kernel_rem_pio2+0x380>
 800455a:	4627      	mov	r7, r4
 800455c:	e6c0      	b.n	80042e0 <__kernel_rem_pio2+0xfc>
 800455e:	2401      	movs	r4, #1
 8004560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004562:	e7ed      	b.n	8004540 <__kernel_rem_pio2+0x35c>
 8004564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004566:	462f      	mov	r7, r5
 8004568:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800456c:	f7fc f874 	bl	8000658 <__aeabi_i2d>
 8004570:	f04f 0b00 	mov.w	fp, #0
 8004574:	f04f 0800 	mov.w	r8, #0
 8004578:	f04f 0900 	mov.w	r9, #0
 800457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8004582:	3b08      	subs	r3, #8
 8004584:	9302      	str	r3, [sp, #8]
 8004586:	9b06      	ldr	r3, [sp, #24]
 8004588:	459b      	cmp	fp, r3
 800458a:	dd07      	ble.n	800459c <__kernel_rem_pio2+0x3b8>
 800458c:	ab70      	add	r3, sp, #448	; 0x1c0
 800458e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004592:	463d      	mov	r5, r7
 8004594:	e9c3 8900 	strd	r8, r9, [r3]
 8004598:	3601      	adds	r6, #1
 800459a:	e7dc      	b.n	8004556 <__kernel_rem_pio2+0x372>
 800459c:	9902      	ldr	r1, [sp, #8]
 800459e:	f10b 0b01 	add.w	fp, fp, #1
 80045a2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80045a6:	9102      	str	r1, [sp, #8]
 80045a8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80045ac:	f7fb fdd8 	bl	8000160 <__aeabi_dmul>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4640      	mov	r0, r8
 80045b6:	4649      	mov	r1, r9
 80045b8:	f7fb ff02 	bl	80003c0 <__adddf3>
 80045bc:	4680      	mov	r8, r0
 80045be:	4689      	mov	r9, r1
 80045c0:	e7e1      	b.n	8004586 <__kernel_rem_pio2+0x3a2>
 80045c2:	3c01      	subs	r4, #1
 80045c4:	e752      	b.n	800446c <__kernel_rem_pio2+0x288>
 80045c6:	f1ca 0200 	rsb	r2, sl, #0
 80045ca:	4640      	mov	r0, r8
 80045cc:	4649      	mov	r1, r9
 80045ce:	f000 fa8f 	bl	8004af0 <scalbn>
 80045d2:	2200      	movs	r2, #0
 80045d4:	4ba5      	ldr	r3, [pc, #660]	; (800486c <__kernel_rem_pio2+0x688>)
 80045d6:	4604      	mov	r4, r0
 80045d8:	460d      	mov	r5, r1
 80045da:	f7fc f91b 	bl	8000814 <__aeabi_dcmpge>
 80045de:	b1f8      	cbz	r0, 8004620 <__kernel_rem_pio2+0x43c>
 80045e0:	2200      	movs	r2, #0
 80045e2:	4ba3      	ldr	r3, [pc, #652]	; (8004870 <__kernel_rem_pio2+0x68c>)
 80045e4:	4620      	mov	r0, r4
 80045e6:	4629      	mov	r1, r5
 80045e8:	f7fb fdba 	bl	8000160 <__aeabi_dmul>
 80045ec:	f7fc f926 	bl	800083c <__aeabi_d2iz>
 80045f0:	4606      	mov	r6, r0
 80045f2:	f7fc f831 	bl	8000658 <__aeabi_i2d>
 80045f6:	2200      	movs	r2, #0
 80045f8:	4b9c      	ldr	r3, [pc, #624]	; (800486c <__kernel_rem_pio2+0x688>)
 80045fa:	f7fb fdb1 	bl	8000160 <__aeabi_dmul>
 80045fe:	460b      	mov	r3, r1
 8004600:	4602      	mov	r2, r0
 8004602:	4629      	mov	r1, r5
 8004604:	4620      	mov	r0, r4
 8004606:	f7fb fed9 	bl	80003bc <__aeabi_dsub>
 800460a:	f7fc f917 	bl	800083c <__aeabi_d2iz>
 800460e:	1c7c      	adds	r4, r7, #1
 8004610:	ab0c      	add	r3, sp, #48	; 0x30
 8004612:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004616:	f10a 0a18 	add.w	sl, sl, #24
 800461a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800461e:	e72d      	b.n	800447c <__kernel_rem_pio2+0x298>
 8004620:	4620      	mov	r0, r4
 8004622:	4629      	mov	r1, r5
 8004624:	f7fc f90a 	bl	800083c <__aeabi_d2iz>
 8004628:	ab0c      	add	r3, sp, #48	; 0x30
 800462a:	463c      	mov	r4, r7
 800462c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004630:	e724      	b.n	800447c <__kernel_rem_pio2+0x298>
 8004632:	ab0c      	add	r3, sp, #48	; 0x30
 8004634:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004638:	f7fc f80e 	bl	8000658 <__aeabi_i2d>
 800463c:	4632      	mov	r2, r6
 800463e:	463b      	mov	r3, r7
 8004640:	f7fb fd8e 	bl	8000160 <__aeabi_dmul>
 8004644:	4642      	mov	r2, r8
 8004646:	e86b 0102 	strd	r0, r1, [fp], #-8
 800464a:	464b      	mov	r3, r9
 800464c:	4630      	mov	r0, r6
 800464e:	4639      	mov	r1, r7
 8004650:	f7fb fd86 	bl	8000160 <__aeabi_dmul>
 8004654:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	e71f      	b.n	800449e <__kernel_rem_pio2+0x2ba>
 800465e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004662:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004666:	f7fb fd7b 	bl	8000160 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4650      	mov	r0, sl
 8004670:	4659      	mov	r1, fp
 8004672:	f7fb fea5 	bl	80003c0 <__adddf3>
 8004676:	4682      	mov	sl, r0
 8004678:	468b      	mov	fp, r1
 800467a:	3601      	adds	r6, #1
 800467c:	9b04      	ldr	r3, [sp, #16]
 800467e:	429e      	cmp	r6, r3
 8004680:	dc01      	bgt.n	8004686 <__kernel_rem_pio2+0x4a2>
 8004682:	45b0      	cmp	r8, r6
 8004684:	daeb      	bge.n	800465e <__kernel_rem_pio2+0x47a>
 8004686:	ab48      	add	r3, sp, #288	; 0x120
 8004688:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800468c:	e9c3 ab00 	strd	sl, fp, [r3]
 8004690:	3f01      	subs	r7, #1
 8004692:	f108 0801 	add.w	r8, r8, #1
 8004696:	e709      	b.n	80044ac <__kernel_rem_pio2+0x2c8>
 8004698:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800469a:	2b02      	cmp	r3, #2
 800469c:	dc09      	bgt.n	80046b2 <__kernel_rem_pio2+0x4ce>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dc34      	bgt.n	800470c <__kernel_rem_pio2+0x528>
 80046a2:	d05e      	beq.n	8004762 <__kernel_rem_pio2+0x57e>
 80046a4:	9b07      	ldr	r3, [sp, #28]
 80046a6:	f003 0007 	and.w	r0, r3, #7
 80046aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d1f5      	bne.n	80046a4 <__kernel_rem_pio2+0x4c0>
 80046b8:	9a06      	ldr	r2, [sp, #24]
 80046ba:	ab48      	add	r3, sp, #288	; 0x120
 80046bc:	441a      	add	r2, r3
 80046be:	4615      	mov	r5, r2
 80046c0:	4692      	mov	sl, r2
 80046c2:	46a3      	mov	fp, r4
 80046c4:	f1bb 0f00 	cmp.w	fp, #0
 80046c8:	dc7a      	bgt.n	80047c0 <__kernel_rem_pio2+0x5dc>
 80046ca:	46aa      	mov	sl, r5
 80046cc:	46a3      	mov	fp, r4
 80046ce:	f1bb 0f01 	cmp.w	fp, #1
 80046d2:	f300 8094 	bgt.w	80047fe <__kernel_rem_pio2+0x61a>
 80046d6:	2700      	movs	r7, #0
 80046d8:	463e      	mov	r6, r7
 80046da:	2c01      	cmp	r4, #1
 80046dc:	f300 80ae 	bgt.w	800483c <__kernel_rem_pio2+0x658>
 80046e0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80046e4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80046e8:	9b02      	ldr	r3, [sp, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 80b0 	bne.w	8004850 <__kernel_rem_pio2+0x66c>
 80046f0:	4603      	mov	r3, r0
 80046f2:	462a      	mov	r2, r5
 80046f4:	9801      	ldr	r0, [sp, #4]
 80046f6:	e9c0 2300 	strd	r2, r3, [r0]
 80046fa:	4622      	mov	r2, r4
 80046fc:	460b      	mov	r3, r1
 80046fe:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004702:	463a      	mov	r2, r7
 8004704:	4633      	mov	r3, r6
 8004706:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800470a:	e7cb      	b.n	80046a4 <__kernel_rem_pio2+0x4c0>
 800470c:	2000      	movs	r0, #0
 800470e:	9a06      	ldr	r2, [sp, #24]
 8004710:	ab48      	add	r3, sp, #288	; 0x120
 8004712:	441a      	add	r2, r3
 8004714:	4615      	mov	r5, r2
 8004716:	46a0      	mov	r8, r4
 8004718:	4601      	mov	r1, r0
 800471a:	f1b8 0f00 	cmp.w	r8, #0
 800471e:	da3c      	bge.n	800479a <__kernel_rem_pio2+0x5b6>
 8004720:	9b02      	ldr	r3, [sp, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d040      	beq.n	80047a8 <__kernel_rem_pio2+0x5c4>
 8004726:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800472a:	4602      	mov	r2, r0
 800472c:	462b      	mov	r3, r5
 800472e:	9d01      	ldr	r5, [sp, #4]
 8004730:	2601      	movs	r6, #1
 8004732:	e9c5 2300 	strd	r2, r3, [r5]
 8004736:	460b      	mov	r3, r1
 8004738:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800473c:	f7fb fe3e 	bl	80003bc <__aeabi_dsub>
 8004740:	4684      	mov	ip, r0
 8004742:	460f      	mov	r7, r1
 8004744:	ad48      	add	r5, sp, #288	; 0x120
 8004746:	42b4      	cmp	r4, r6
 8004748:	f105 0508 	add.w	r5, r5, #8
 800474c:	da2e      	bge.n	80047ac <__kernel_rem_pio2+0x5c8>
 800474e:	9b02      	ldr	r3, [sp, #8]
 8004750:	b10b      	cbz	r3, 8004756 <__kernel_rem_pio2+0x572>
 8004752:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004756:	4662      	mov	r2, ip
 8004758:	463b      	mov	r3, r7
 800475a:	9901      	ldr	r1, [sp, #4]
 800475c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004760:	e7a0      	b.n	80046a4 <__kernel_rem_pio2+0x4c0>
 8004762:	9a06      	ldr	r2, [sp, #24]
 8004764:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004766:	ab48      	add	r3, sp, #288	; 0x120
 8004768:	441a      	add	r2, r3
 800476a:	4615      	mov	r5, r2
 800476c:	4637      	mov	r7, r6
 800476e:	2c00      	cmp	r4, #0
 8004770:	da09      	bge.n	8004786 <__kernel_rem_pio2+0x5a2>
 8004772:	9b02      	ldr	r3, [sp, #8]
 8004774:	b10b      	cbz	r3, 800477a <__kernel_rem_pio2+0x596>
 8004776:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800477a:	4632      	mov	r2, r6
 800477c:	463b      	mov	r3, r7
 800477e:	9901      	ldr	r1, [sp, #4]
 8004780:	e9c1 2300 	strd	r2, r3, [r1]
 8004784:	e78e      	b.n	80046a4 <__kernel_rem_pio2+0x4c0>
 8004786:	4630      	mov	r0, r6
 8004788:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800478c:	4639      	mov	r1, r7
 800478e:	f7fb fe17 	bl	80003c0 <__adddf3>
 8004792:	3c01      	subs	r4, #1
 8004794:	4606      	mov	r6, r0
 8004796:	460f      	mov	r7, r1
 8004798:	e7e9      	b.n	800476e <__kernel_rem_pio2+0x58a>
 800479a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800479e:	f7fb fe0f 	bl	80003c0 <__adddf3>
 80047a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80047a6:	e7b8      	b.n	800471a <__kernel_rem_pio2+0x536>
 80047a8:	460d      	mov	r5, r1
 80047aa:	e7be      	b.n	800472a <__kernel_rem_pio2+0x546>
 80047ac:	4660      	mov	r0, ip
 80047ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047b2:	4639      	mov	r1, r7
 80047b4:	f7fb fe04 	bl	80003c0 <__adddf3>
 80047b8:	3601      	adds	r6, #1
 80047ba:	4684      	mov	ip, r0
 80047bc:	460f      	mov	r7, r1
 80047be:	e7c2      	b.n	8004746 <__kernel_rem_pio2+0x562>
 80047c0:	e9da 6700 	ldrd	r6, r7, [sl]
 80047c4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80047c8:	4632      	mov	r2, r6
 80047ca:	463b      	mov	r3, r7
 80047cc:	4640      	mov	r0, r8
 80047ce:	4649      	mov	r1, r9
 80047d0:	f7fb fdf6 	bl	80003c0 <__adddf3>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047dc:	4640      	mov	r0, r8
 80047de:	4649      	mov	r1, r9
 80047e0:	f7fb fdec 	bl	80003bc <__aeabi_dsub>
 80047e4:	4632      	mov	r2, r6
 80047e6:	463b      	mov	r3, r7
 80047e8:	f7fb fdea 	bl	80003c0 <__adddf3>
 80047ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80047f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047f8:	e9ca 2300 	strd	r2, r3, [sl]
 80047fc:	e762      	b.n	80046c4 <__kernel_rem_pio2+0x4e0>
 80047fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8004802:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004806:	4642      	mov	r2, r8
 8004808:	464b      	mov	r3, r9
 800480a:	4630      	mov	r0, r6
 800480c:	4639      	mov	r1, r7
 800480e:	f7fb fdd7 	bl	80003c0 <__adddf3>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800481a:	4630      	mov	r0, r6
 800481c:	4639      	mov	r1, r7
 800481e:	f7fb fdcd 	bl	80003bc <__aeabi_dsub>
 8004822:	4642      	mov	r2, r8
 8004824:	464b      	mov	r3, r9
 8004826:	f7fb fdcb 	bl	80003c0 <__adddf3>
 800482a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800482e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004836:	e9ca 2300 	strd	r2, r3, [sl]
 800483a:	e748      	b.n	80046ce <__kernel_rem_pio2+0x4ea>
 800483c:	4638      	mov	r0, r7
 800483e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004842:	4631      	mov	r1, r6
 8004844:	f7fb fdbc 	bl	80003c0 <__adddf3>
 8004848:	3c01      	subs	r4, #1
 800484a:	4607      	mov	r7, r0
 800484c:	460e      	mov	r6, r1
 800484e:	e744      	b.n	80046da <__kernel_rem_pio2+0x4f6>
 8004850:	9b01      	ldr	r3, [sp, #4]
 8004852:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004856:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800485a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800485e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004862:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004866:	601d      	str	r5, [r3, #0]
 8004868:	615e      	str	r6, [r3, #20]
 800486a:	e71b      	b.n	80046a4 <__kernel_rem_pio2+0x4c0>
 800486c:	41700000 	.word	0x41700000
 8004870:	3e700000 	.word	0x3e700000
 8004874:	00000000 	.word	0x00000000

08004878 <__kernel_sin>:
 8004878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	e9cd 2300 	strd	r2, r3, [sp]
 8004882:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004886:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800488a:	4682      	mov	sl, r0
 800488c:	460c      	mov	r4, r1
 800488e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004890:	da03      	bge.n	800489a <__kernel_sin+0x22>
 8004892:	f7fb ffd3 	bl	800083c <__aeabi_d2iz>
 8004896:	2800      	cmp	r0, #0
 8004898:	d050      	beq.n	800493c <__kernel_sin+0xc4>
 800489a:	4652      	mov	r2, sl
 800489c:	4623      	mov	r3, r4
 800489e:	4650      	mov	r0, sl
 80048a0:	4621      	mov	r1, r4
 80048a2:	f7fb fc5d 	bl	8000160 <__aeabi_dmul>
 80048a6:	4606      	mov	r6, r0
 80048a8:	460f      	mov	r7, r1
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4650      	mov	r0, sl
 80048b0:	4621      	mov	r1, r4
 80048b2:	f7fb fc55 	bl	8000160 <__aeabi_dmul>
 80048b6:	a33e      	add	r3, pc, #248	; (adr r3, 80049b0 <__kernel_sin+0x138>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	4680      	mov	r8, r0
 80048be:	4689      	mov	r9, r1
 80048c0:	4630      	mov	r0, r6
 80048c2:	4639      	mov	r1, r7
 80048c4:	f7fb fc4c 	bl	8000160 <__aeabi_dmul>
 80048c8:	a33b      	add	r3, pc, #236	; (adr r3, 80049b8 <__kernel_sin+0x140>)
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f7fb fd75 	bl	80003bc <__aeabi_dsub>
 80048d2:	4632      	mov	r2, r6
 80048d4:	463b      	mov	r3, r7
 80048d6:	f7fb fc43 	bl	8000160 <__aeabi_dmul>
 80048da:	a339      	add	r3, pc, #228	; (adr r3, 80049c0 <__kernel_sin+0x148>)
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f7fb fd6e 	bl	80003c0 <__adddf3>
 80048e4:	4632      	mov	r2, r6
 80048e6:	463b      	mov	r3, r7
 80048e8:	f7fb fc3a 	bl	8000160 <__aeabi_dmul>
 80048ec:	a336      	add	r3, pc, #216	; (adr r3, 80049c8 <__kernel_sin+0x150>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fd63 	bl	80003bc <__aeabi_dsub>
 80048f6:	4632      	mov	r2, r6
 80048f8:	463b      	mov	r3, r7
 80048fa:	f7fb fc31 	bl	8000160 <__aeabi_dmul>
 80048fe:	a334      	add	r3, pc, #208	; (adr r3, 80049d0 <__kernel_sin+0x158>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fd5c 	bl	80003c0 <__adddf3>
 8004908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800490c:	b9dd      	cbnz	r5, 8004946 <__kernel_sin+0xce>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4630      	mov	r0, r6
 8004914:	4639      	mov	r1, r7
 8004916:	f7fb fc23 	bl	8000160 <__aeabi_dmul>
 800491a:	a32f      	add	r3, pc, #188	; (adr r3, 80049d8 <__kernel_sin+0x160>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fd4c 	bl	80003bc <__aeabi_dsub>
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	f7fb fc1a 	bl	8000160 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4650      	mov	r0, sl
 8004932:	4621      	mov	r1, r4
 8004934:	f7fb fd44 	bl	80003c0 <__adddf3>
 8004938:	4682      	mov	sl, r0
 800493a:	460c      	mov	r4, r1
 800493c:	4650      	mov	r0, sl
 800493e:	4621      	mov	r1, r4
 8004940:	b006      	add	sp, #24
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	2200      	movs	r2, #0
 8004948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800494c:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <__kernel_sin+0x168>)
 800494e:	f7fb fc07 	bl	8000160 <__aeabi_dmul>
 8004952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800495a:	4640      	mov	r0, r8
 800495c:	4649      	mov	r1, r9
 800495e:	f7fb fbff 	bl	8000160 <__aeabi_dmul>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800496a:	f7fb fd27 	bl	80003bc <__aeabi_dsub>
 800496e:	4632      	mov	r2, r6
 8004970:	463b      	mov	r3, r7
 8004972:	f7fb fbf5 	bl	8000160 <__aeabi_dmul>
 8004976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800497a:	f7fb fd1f 	bl	80003bc <__aeabi_dsub>
 800497e:	a316      	add	r3, pc, #88	; (adr r3, 80049d8 <__kernel_sin+0x160>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	4640      	mov	r0, r8
 800498a:	4649      	mov	r1, r9
 800498c:	f7fb fbe8 	bl	8000160 <__aeabi_dmul>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4630      	mov	r0, r6
 8004996:	4639      	mov	r1, r7
 8004998:	f7fb fd12 	bl	80003c0 <__adddf3>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4650      	mov	r0, sl
 80049a2:	4621      	mov	r1, r4
 80049a4:	f7fb fd0a 	bl	80003bc <__aeabi_dsub>
 80049a8:	e7c6      	b.n	8004938 <__kernel_sin+0xc0>
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w
 80049b0:	5acfd57c 	.word	0x5acfd57c
 80049b4:	3de5d93a 	.word	0x3de5d93a
 80049b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80049bc:	3e5ae5e6 	.word	0x3e5ae5e6
 80049c0:	57b1fe7d 	.word	0x57b1fe7d
 80049c4:	3ec71de3 	.word	0x3ec71de3
 80049c8:	19c161d5 	.word	0x19c161d5
 80049cc:	3f2a01a0 	.word	0x3f2a01a0
 80049d0:	1110f8a6 	.word	0x1110f8a6
 80049d4:	3f811111 	.word	0x3f811111
 80049d8:	55555549 	.word	0x55555549
 80049dc:	3fc55555 	.word	0x3fc55555
 80049e0:	3fe00000 	.word	0x3fe00000

080049e4 <fabs>:
 80049e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80049e8:	4770      	bx	lr
 80049ea:	0000      	movs	r0, r0
 80049ec:	0000      	movs	r0, r0
	...

080049f0 <floor>:
 80049f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80049f8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80049fc:	2e13      	cmp	r6, #19
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4607      	mov	r7, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	4605      	mov	r5, r0
 8004a08:	dc34      	bgt.n	8004a74 <floor+0x84>
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	da15      	bge.n	8004a3a <floor+0x4a>
 8004a0e:	a334      	add	r3, pc, #208	; (adr r3, 8004ae0 <floor+0xf0>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fcd4 	bl	80003c0 <__adddf3>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f7fb ff04 	bl	8000828 <__aeabi_dcmpgt>
 8004a20:	b140      	cbz	r0, 8004a34 <floor+0x44>
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	da59      	bge.n	8004ada <floor+0xea>
 8004a26:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004a2a:	ea57 0503 	orrs.w	r5, r7, r3
 8004a2e:	d001      	beq.n	8004a34 <floor+0x44>
 8004a30:	2500      	movs	r5, #0
 8004a32:	4c2d      	ldr	r4, [pc, #180]	; (8004ae8 <floor+0xf8>)
 8004a34:	4623      	mov	r3, r4
 8004a36:	462f      	mov	r7, r5
 8004a38:	e025      	b.n	8004a86 <floor+0x96>
 8004a3a:	4a2c      	ldr	r2, [pc, #176]	; (8004aec <floor+0xfc>)
 8004a3c:	fa42 f806 	asr.w	r8, r2, r6
 8004a40:	ea01 0208 	and.w	r2, r1, r8
 8004a44:	4302      	orrs	r2, r0
 8004a46:	d01e      	beq.n	8004a86 <floor+0x96>
 8004a48:	a325      	add	r3, pc, #148	; (adr r3, 8004ae0 <floor+0xf0>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb fcb7 	bl	80003c0 <__adddf3>
 8004a52:	2200      	movs	r2, #0
 8004a54:	2300      	movs	r3, #0
 8004a56:	f7fb fee7 	bl	8000828 <__aeabi_dcmpgt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d0ea      	beq.n	8004a34 <floor+0x44>
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	bfbe      	ittt	lt
 8004a62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004a66:	fa43 f606 	asrlt.w	r6, r3, r6
 8004a6a:	19a4      	addlt	r4, r4, r6
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	ea24 0408 	bic.w	r4, r4, r8
 8004a72:	e7df      	b.n	8004a34 <floor+0x44>
 8004a74:	2e33      	cmp	r6, #51	; 0x33
 8004a76:	dd0a      	ble.n	8004a8e <floor+0x9e>
 8004a78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004a7c:	d103      	bne.n	8004a86 <floor+0x96>
 8004a7e:	f7fb fc9f 	bl	80003c0 <__adddf3>
 8004a82:	4607      	mov	r7, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4638      	mov	r0, r7
 8004a88:	4619      	mov	r1, r3
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a92:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004a96:	fa22 f808 	lsr.w	r8, r2, r8
 8004a9a:	ea18 0f00 	tst.w	r8, r0
 8004a9e:	d0f2      	beq.n	8004a86 <floor+0x96>
 8004aa0:	a30f      	add	r3, pc, #60	; (adr r3, 8004ae0 <floor+0xf0>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fc8b 	bl	80003c0 <__adddf3>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2300      	movs	r3, #0
 8004aae:	f7fb febb 	bl	8000828 <__aeabi_dcmpgt>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d0be      	beq.n	8004a34 <floor+0x44>
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	da02      	bge.n	8004ac0 <floor+0xd0>
 8004aba:	2e14      	cmp	r6, #20
 8004abc:	d103      	bne.n	8004ac6 <floor+0xd6>
 8004abe:	3401      	adds	r4, #1
 8004ac0:	ea25 0508 	bic.w	r5, r5, r8
 8004ac4:	e7b6      	b.n	8004a34 <floor+0x44>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004acc:	fa03 f606 	lsl.w	r6, r3, r6
 8004ad0:	4435      	add	r5, r6
 8004ad2:	42bd      	cmp	r5, r7
 8004ad4:	bf38      	it	cc
 8004ad6:	18e4      	addcc	r4, r4, r3
 8004ad8:	e7f2      	b.n	8004ac0 <floor+0xd0>
 8004ada:	2500      	movs	r5, #0
 8004adc:	462c      	mov	r4, r5
 8004ade:	e7a9      	b.n	8004a34 <floor+0x44>
 8004ae0:	8800759c 	.word	0x8800759c
 8004ae4:	7e37e43c 	.word	0x7e37e43c
 8004ae8:	bff00000 	.word	0xbff00000
 8004aec:	000fffff 	.word	0x000fffff

08004af0 <scalbn>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004af6:	4604      	mov	r4, r0
 8004af8:	460d      	mov	r5, r1
 8004afa:	4617      	mov	r7, r2
 8004afc:	460b      	mov	r3, r1
 8004afe:	b996      	cbnz	r6, 8004b26 <scalbn+0x36>
 8004b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b04:	4303      	orrs	r3, r0
 8004b06:	d039      	beq.n	8004b7c <scalbn+0x8c>
 8004b08:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <scalbn+0xf0>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f7fb fb28 	bl	8000160 <__aeabi_dmul>
 8004b10:	4b34      	ldr	r3, [pc, #208]	; (8004be4 <scalbn+0xf4>)
 8004b12:	4604      	mov	r4, r0
 8004b14:	429f      	cmp	r7, r3
 8004b16:	460d      	mov	r5, r1
 8004b18:	da0f      	bge.n	8004b3a <scalbn+0x4a>
 8004b1a:	a32d      	add	r3, pc, #180	; (adr r3, 8004bd0 <scalbn+0xe0>)
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f7fb fb1e 	bl	8000160 <__aeabi_dmul>
 8004b24:	e006      	b.n	8004b34 <scalbn+0x44>
 8004b26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b2a:	4296      	cmp	r6, r2
 8004b2c:	d10a      	bne.n	8004b44 <scalbn+0x54>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	f7fb fc46 	bl	80003c0 <__adddf3>
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	e020      	b.n	8004b7c <scalbn+0x8c>
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b40:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004b44:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004b48:	19b9      	adds	r1, r7, r6
 8004b4a:	4291      	cmp	r1, r2
 8004b4c:	dd0e      	ble.n	8004b6c <scalbn+0x7c>
 8004b4e:	a322      	add	r3, pc, #136	; (adr r3, 8004bd8 <scalbn+0xe8>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004b58:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004b5c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004b60:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004b64:	4820      	ldr	r0, [pc, #128]	; (8004be8 <scalbn+0xf8>)
 8004b66:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004b6a:	e7d9      	b.n	8004b20 <scalbn+0x30>
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	dd08      	ble.n	8004b82 <scalbn+0x92>
 8004b70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b82:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004b86:	da16      	bge.n	8004bb6 <scalbn+0xc6>
 8004b88:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004b8c:	429f      	cmp	r7, r3
 8004b8e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004b92:	dd08      	ble.n	8004ba6 <scalbn+0xb6>
 8004b94:	4c15      	ldr	r4, [pc, #84]	; (8004bec <scalbn+0xfc>)
 8004b96:	4814      	ldr	r0, [pc, #80]	; (8004be8 <scalbn+0xf8>)
 8004b98:	f363 74df 	bfi	r4, r3, #31, #1
 8004b9c:	a30e      	add	r3, pc, #56	; (adr r3, 8004bd8 <scalbn+0xe8>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	e7bc      	b.n	8004b20 <scalbn+0x30>
 8004ba6:	4c12      	ldr	r4, [pc, #72]	; (8004bf0 <scalbn+0x100>)
 8004ba8:	4812      	ldr	r0, [pc, #72]	; (8004bf4 <scalbn+0x104>)
 8004baa:	f363 74df 	bfi	r4, r3, #31, #1
 8004bae:	a308      	add	r3, pc, #32	; (adr r3, 8004bd0 <scalbn+0xe0>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	e7f5      	b.n	8004ba2 <scalbn+0xb2>
 8004bb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bba:	3136      	adds	r1, #54	; 0x36
 8004bbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <scalbn+0x108>)
 8004bcc:	e7a8      	b.n	8004b20 <scalbn+0x30>
 8004bce:	bf00      	nop
 8004bd0:	c2f8f359 	.word	0xc2f8f359
 8004bd4:	01a56e1f 	.word	0x01a56e1f
 8004bd8:	8800759c 	.word	0x8800759c
 8004bdc:	7e37e43c 	.word	0x7e37e43c
 8004be0:	43500000 	.word	0x43500000
 8004be4:	ffff3cb0 	.word	0xffff3cb0
 8004be8:	8800759c 	.word	0x8800759c
 8004bec:	7e37e43c 	.word	0x7e37e43c
 8004bf0:	01a56e1f 	.word	0x01a56e1f
 8004bf4:	c2f8f359 	.word	0xc2f8f359
 8004bf8:	3c900000 	.word	0x3c900000

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
