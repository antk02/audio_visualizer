
projekt_wstepny3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000599c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005ab0  08005ab0  00015ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00020670  2**0
                  CONTENTS
  4 .ARM          00000000  08005d08  08005d08  00020670  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d08  08005d08  00020670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000670  20000000  08005d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  20000670  08006380  00020670  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  08006380  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1ad  00000000  00000000  00020699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002252  00000000  00000000  0002d846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00030620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018142  00000000  00000000  000310f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e01a  00000000  00000000  0004923a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f63  00000000  00000000  00057254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e11b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003684  00000000  00000000  000e120c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000670 	.word	0x20000670
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a94 	.word	0x08005a94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000674 	.word	0x20000674
 800014c:	08005a94 	.word	0x08005a94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a64:	b08e      	sub	sp, #56	; 0x38
 8000a66:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 ffba 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f9a6 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 fab0 	bl	8000fd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a74:	f000 fa66 	bl	8000f44 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000a78:	f000 fa8e 	bl	8000f98 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a7c:	f000 f9f6 	bl	8000e6c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a80:	f000 fa32 	bl	8000ee8 <MX_I2C1_Init>
  	//arm_rfft_instance_f32 S;
    //arm_cfft_instance_f32 S_CFFT;

    //arm_rfft_init_f32(&S, &S_CFFT, 128, 0, 1);

    HAL_ADC_Start_DMA(&hadc1, &adc_data, 2);
 8000a84:	2202      	movs	r2, #2
 8000a86:	49be      	ldr	r1, [pc, #760]	; (8000d80 <main+0x320>)
 8000a88:	48be      	ldr	r0, [pc, #760]	; (8000d84 <main+0x324>)
 8000a8a:	f001 f907 	bl	8001c9c <HAL_ADC_Start_DMA>

    HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f001 f807 	bl	8001aa4 <HAL_Delay>

    /*---------------------Generacja tablicy probek------------------------*/
    int freq = 1000;
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	613b      	str	r3, [r7, #16]

    for(int i=0; i < FFT_LEN; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa0:	e09d      	b.n	8000bde <main+0x17e>
    {
        real[i] = (int16_t) 1000*sin(2*PI*freq*i*0.00001) +
 8000aa2:	6938      	ldr	r0, [r7, #16]
 8000aa4:	f7ff fcae 	bl	8000404 <__aeabi_i2d>
 8000aa8:	a3ab      	add	r3, pc, #684	; (adr r3, 8000d58 <main+0x2f8>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	f7ff fd13 	bl	80004d8 <__aeabi_dmul>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	4614      	mov	r4, r2
 8000ab8:	461d      	mov	r5, r3
 8000aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000abc:	f7ff fca2 	bl	8000404 <__aeabi_i2d>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	4629      	mov	r1, r5
 8000ac8:	f7ff fd06 	bl	80004d8 <__aeabi_dmul>
 8000acc:	4602      	mov	r2, r0
 8000ace:	460b      	mov	r3, r1
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	a3a2      	add	r3, pc, #648	; (adr r3, 8000d60 <main+0x300>)
 8000ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ada:	f7ff fcfd 	bl	80004d8 <__aeabi_dmul>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f003 ffd5 	bl	8004a94 <sin>
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	4ba6      	ldr	r3, [pc, #664]	; (8000d88 <main+0x328>)
 8000af0:	f7ff fcf2 	bl	80004d8 <__aeabi_dmul>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	4614      	mov	r4, r2
 8000afa:	461d      	mov	r5, r3
                                      800*sin(2*PI*2*freq*i*0.00001) +
 8000afc:	6938      	ldr	r0, [r7, #16]
 8000afe:	f7ff fc81 	bl	8000404 <__aeabi_i2d>
 8000b02:	a399      	add	r3, pc, #612	; (adr r3, 8000d68 <main+0x308>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	f7ff fce6 	bl	80004d8 <__aeabi_dmul>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4690      	mov	r8, r2
 8000b12:	4699      	mov	r9, r3
 8000b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b16:	f7ff fc75 	bl	8000404 <__aeabi_i2d>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	4640      	mov	r0, r8
 8000b20:	4649      	mov	r1, r9
 8000b22:	f7ff fcd9 	bl	80004d8 <__aeabi_dmul>
 8000b26:	4602      	mov	r2, r0
 8000b28:	460b      	mov	r3, r1
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	a38c      	add	r3, pc, #560	; (adr r3, 8000d60 <main+0x300>)
 8000b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b34:	f7ff fcd0 	bl	80004d8 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f003 ffa8 	bl	8004a94 <sin>
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	4b90      	ldr	r3, [pc, #576]	; (8000d8c <main+0x32c>)
 8000b4a:	f7ff fcc5 	bl	80004d8 <__aeabi_dmul>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
        real[i] = (int16_t) 1000*sin(2*PI*freq*i*0.00001) +
 8000b52:	4620      	mov	r0, r4
 8000b54:	4629      	mov	r1, r5
 8000b56:	f7ff fb09 	bl	800016c <__adddf3>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4614      	mov	r4, r2
 8000b60:	461d      	mov	r5, r3
                                      300*sin(2*PI*3*freq*i*0.00001);
 8000b62:	6938      	ldr	r0, [r7, #16]
 8000b64:	f7ff fc4e 	bl	8000404 <__aeabi_i2d>
 8000b68:	a381      	add	r3, pc, #516	; (adr r3, 8000d70 <main+0x310>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	f7ff fcb3 	bl	80004d8 <__aeabi_dmul>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4690      	mov	r8, r2
 8000b78:	4699      	mov	r9, r3
 8000b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b7c:	f7ff fc42 	bl	8000404 <__aeabi_i2d>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4640      	mov	r0, r8
 8000b86:	4649      	mov	r1, r9
 8000b88:	f7ff fca6 	bl	80004d8 <__aeabi_dmul>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	460b      	mov	r3, r1
 8000b90:	4610      	mov	r0, r2
 8000b92:	4619      	mov	r1, r3
 8000b94:	a372      	add	r3, pc, #456	; (adr r3, 8000d60 <main+0x300>)
 8000b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9a:	f7ff fc9d 	bl	80004d8 <__aeabi_dmul>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f003 ff75 	bl	8004a94 <sin>
 8000baa:	a373      	add	r3, pc, #460	; (adr r3, 8000d78 <main+0x318>)
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f7ff fc92 	bl	80004d8 <__aeabi_dmul>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
                                      800*sin(2*PI*2*freq*i*0.00001) +
 8000bb8:	4620      	mov	r0, r4
 8000bba:	4629      	mov	r1, r5
 8000bbc:	f7ff fad6 	bl	800016c <__adddf3>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
        real[i] = (int16_t) 1000*sin(2*PI*freq*i*0.00001) +
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff ff20 	bl	8000a0c <__aeabi_d2iz>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b219      	sxth	r1, r3
 8000bd0:	4a6f      	ldr	r2, [pc, #444]	; (8000d90 <main+0x330>)
 8000bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0; i < FFT_LEN; i++)
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	3301      	adds	r3, #1
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	f77f af5e 	ble.w	8000aa2 <main+0x42>
	  //for(int i = 0; i < 128; i++)
	  //{
	  //	 real[i] = adc_data;
	  //}

	  UART2_Print("[");
 8000be6:	486b      	ldr	r0, [pc, #428]	; (8000d94 <main+0x334>)
 8000be8:	f000 fa62 	bl	80010b0 <UART2_Print>

	  for(int i = 0; i < FFT_LEN; i++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf0:	e010      	b.n	8000c14 <main+0x1b4>
	  {
	   	  sprintf(text, "%d, ", real[i]);
 8000bf2:	4a67      	ldr	r2, [pc, #412]	; (8000d90 <main+0x330>)
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4966      	ldr	r1, [pc, #408]	; (8000d98 <main+0x338>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fb35 	bl	8004270 <siprintf>
	   	  UART2_Print(text);
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fa51 	bl	80010b0 <UART2_Print>
	  for(int i = 0; i < FFT_LEN; i++)
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	3301      	adds	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	ddeb      	ble.n	8000bf2 <main+0x192>
	  }
	  UART2_Print(" ]\n");
 8000c1a:	4860      	ldr	r0, [pc, #384]	; (8000d9c <main+0x33c>)
 8000c1c:	f000 fa48 	bl	80010b0 <UART2_Print>

	  fix_fft(real, imag, LOG_2_FFT_LEN, 0);
 8000c20:	2300      	movs	r3, #0
 8000c22:	2208      	movs	r2, #8
 8000c24:	495e      	ldr	r1, [pc, #376]	; (8000da0 <main+0x340>)
 8000c26:	485a      	ldr	r0, [pc, #360]	; (8000d90 <main+0x330>)
 8000c28:	f000 fb98 	bl	800135c <fix_fft>


	  //sprintf(text, "%c ", "[");
	  UART2_Print("[");
 8000c2c:	4859      	ldr	r0, [pc, #356]	; (8000d94 <main+0x334>)
 8000c2e:	f000 fa3f 	bl	80010b0 <UART2_Print>

	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
 8000c36:	e010      	b.n	8000c5a <main+0x1fa>
	  {
	  	  sprintf(text, "%d,", real[i]);
 8000c38:	4a55      	ldr	r2, [pc, #340]	; (8000d90 <main+0x330>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c40:	461a      	mov	r2, r3
 8000c42:	463b      	mov	r3, r7
 8000c44:	4957      	ldr	r1, [pc, #348]	; (8000da4 <main+0x344>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fb12 	bl	8004270 <siprintf>
	  	  UART2_Print(text);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa2e 	bl	80010b0 <UART2_Print>
	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3301      	adds	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5e:	ddeb      	ble.n	8000c38 <main+0x1d8>
	  }

	  sprintf(text, " %c", "]");
 8000c60:	463b      	mov	r3, r7
 8000c62:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <main+0x348>)
 8000c64:	4951      	ldr	r1, [pc, #324]	; (8000dac <main+0x34c>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fb02 	bl	8004270 <siprintf>
	  UART2_Print(" ]\n");
 8000c6c:	484b      	ldr	r0, [pc, #300]	; (8000d9c <main+0x33c>)
 8000c6e:	f000 fa1f 	bl	80010b0 <UART2_Print>

	  for (int i = 0; i < HALF_FFT_LEN; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	e012      	b.n	8000c9e <main+0x23e>
	  {
	      if (real[i] > max)
 8000c78:	4a45      	ldr	r2, [pc, #276]	; (8000d90 <main+0x330>)
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <main+0x350>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dd06      	ble.n	8000c98 <main+0x238>
	      {
	         max = real[i];
 8000c8a:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <main+0x330>)
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <main+0x350>)
 8000c96:	801a      	strh	r2, [r3, #0]
	  for (int i = 0; i < HALF_FFT_LEN; i++)
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ca2:	dde9      	ble.n	8000c78 <main+0x218>
	      }
	  }

	  //UART2_Print("\n");

	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	e013      	b.n	8000cd2 <main+0x272>
	  {
		  new_array[i] = abs((int)(64*real[i]/max));
 8000caa:	4a39      	ldr	r2, [pc, #228]	; (8000d90 <main+0x330>)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	4a3e      	ldr	r2, [pc, #248]	; (8000db0 <main+0x350>)
 8000cb6:	8812      	ldrh	r2, [r2, #0]
 8000cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bfb8      	it	lt
 8000cc0:	425b      	neglt	r3, r3
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	4a3b      	ldr	r2, [pc, #236]	; (8000db4 <main+0x354>)
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd6:	dde8      	ble.n	8000caa <main+0x24a>
	  }

	  UART2_Print(":)[");
 8000cd8:	4837      	ldr	r0, [pc, #220]	; (8000db8 <main+0x358>)
 8000cda:	f000 f9e9 	bl	80010b0 <UART2_Print>

	 	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	e010      	b.n	8000d06 <main+0x2a6>
	 	  {
	 	  	  sprintf(text, "%d,", new_array[i]);
 8000ce4:	4a33      	ldr	r2, [pc, #204]	; (8000db4 <main+0x354>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cec:	461a      	mov	r2, r3
 8000cee:	463b      	mov	r3, r7
 8000cf0:	492c      	ldr	r1, [pc, #176]	; (8000da4 <main+0x344>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fabc 	bl	8004270 <siprintf>
	 	  	  UART2_Print(text);
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f9d8 	bl	80010b0 <UART2_Print>
	 	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	3301      	adds	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0a:	ddeb      	ble.n	8000ce4 <main+0x284>
	 	  }

	 	  sprintf(text, " %c", "]");
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <main+0x348>)
 8000d10:	4926      	ldr	r1, [pc, #152]	; (8000dac <main+0x34c>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 faac 	bl	8004270 <siprintf>
	 	  UART2_Print(" ]\n");
 8000d18:	4820      	ldr	r0, [pc, #128]	; (8000d9c <main+0x33c>)
 8000d1a:	f000 f9c9 	bl	80010b0 <UART2_Print>

	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e013      	b.n	8000d4c <main+0x2ec>
	  {
		  ssd1306_Line(i, 64-new_array[i], i, 64, White);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	b2d8      	uxtb	r0, r3
 8000d28:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <main+0x354>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d36:	b2d9      	uxtb	r1, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	f000 fa7b 	bl	800123c <ssd1306_Line>
	  for(int i = 0; i < HALF_FFT_LEN; i++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d50:	dde8      	ble.n	8000d24 <main+0x2c4>
	  }
	  ssd1306_UpdateScreen();
 8000d52:	f000 f9f9 	bl	8001148 <ssd1306_UpdateScreen>

	  while(1);
 8000d56:	e7fe      	b.n	8000d56 <main+0x2f6>
 8000d58:	51eb851f 	.word	0x51eb851f
 8000d5c:	40191eb8 	.word	0x40191eb8
 8000d60:	88e368f1 	.word	0x88e368f1
 8000d64:	3ee4f8b5 	.word	0x3ee4f8b5
 8000d68:	51eb851f 	.word	0x51eb851f
 8000d6c:	40291eb8 	.word	0x40291eb8
 8000d70:	3d70a3d7 	.word	0x3d70a3d7
 8000d74:	4032d70a 	.word	0x4032d70a
 8000d78:	00000000 	.word	0x00000000
 8000d7c:	4072c000 	.word	0x4072c000
 8000d80:	2000068c 	.word	0x2000068c
 8000d84:	20000ef4 	.word	0x20000ef4
 8000d88:	408f4000 	.word	0x408f4000
 8000d8c:	40890000 	.word	0x40890000
 8000d90:	20000690 	.word	0x20000690
 8000d94:	08005ab0 	.word	0x08005ab0
 8000d98:	08005ab4 	.word	0x08005ab4
 8000d9c:	08005abc 	.word	0x08005abc
 8000da0:	20000890 	.word	0x20000890
 8000da4:	08005ac0 	.word	0x08005ac0
 8000da8:	08005ac4 	.word	0x08005ac4
 8000dac:	08005ac8 	.word	0x08005ac8
 8000db0:	20000a90 	.word	0x20000a90
 8000db4:	20000fac 	.word	0x20000fac
 8000db8:	08005acc 	.word	0x08005acc

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b094      	sub	sp, #80	; 0x50
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc6:	2228      	movs	r2, #40	; 0x28
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fa48 	bl	8004260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2310      	movs	r3, #16
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e00:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fb4e 	bl	80034ac <HAL_RCC_OscConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e16:	f000 f95f 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fdb8 	bl	80039ac <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e42:	f000 f949 	bl	80010d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e46:	2302      	movs	r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000e4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 ff44 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e5e:	f000 f93b 	bl	80010d8 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <MX_ADC1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000eaa:	f000 fe1f 	bl	8001aec <HAL_ADC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000eb4:	f000 f910 	bl	80010d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_ADC1_Init+0x74>)
 8000eca:	f000 ffe1 	bl	8001e90 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ed4:	f000 f900 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000ef4 	.word	0x20000ef4
 8000ee4:	40012400 	.word	0x40012400

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <MX_I2C1_Init+0x54>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_I2C1_Init+0x58>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f26:	f001 fe67 	bl	8002bf8 <HAL_I2C_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 f8d2 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000ea0 	.word	0x20000ea0
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	000186a0 	.word	0x000186a0

08000f44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MX_USART2_UART_Init+0x50>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f002 ff66 	bl	8003e4c <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f86:	f000 f8a7 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000f68 	.word	0x20000f68
 8000f94:	40004400 	.word	0x40004400

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6153      	str	r3, [r2, #20]
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	200b      	movs	r0, #11
 8000fbc:	f001 fa39 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc0:	200b      	movs	r0, #11
 8000fc2:	f001 fa52 	bl	800246a <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0310 	and.w	r3, r3, #16
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_GPIO_Init+0xcc>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_GPIO_Init+0xcc>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <MX_GPIO_Init+0xcc>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_GPIO_Init+0xcc>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4815      	ldr	r0, [pc, #84]	; (80010a4 <MX_GPIO_Init+0xd0>)
 800104e:	f001 fd99 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_GPIO_Init+0xd4>)
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_GPIO_Init+0xd8>)
 8001068:	f001 fc08 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800106c:	2320      	movs	r3, #32
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001084:	f001 fbfa 	bl	800287c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2028      	movs	r0, #40	; 0x28
 800108e:	f001 f9d0 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f001 f9e9 	bl	800246a <HAL_NVIC_EnableIRQ>

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010800 	.word	0x40010800
 80010a8:	10110000 	.word	0x10110000
 80010ac:	40011000 	.word	0x40011000

080010b0 <UART2_Print>:

/* USER CODE BEGIN 4 */
void UART2_Print(uint8_t* uart_message)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, uart_message, strlen((char*)uart_message), 30);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff f849 	bl	8000150 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	231e      	movs	r3, #30
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <UART2_Print+0x24>)
 80010c8:	f002 ff0d 	bl	8003ee6 <HAL_UART_Transmit>

}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000f68 	.word	0x20000f68

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2200      	movs	r2, #0
 8001100:	2178      	movs	r1, #120	; 0x78
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <ssd1306_WriteCommand+0x2c>)
 8001104:	f001 febc 	bl	8002e80 <HAL_I2C_Mem_Write>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000ea0 	.word	0x20000ea0

08001114 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af04      	add	r7, sp, #16
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f04f 32ff 	mov.w	r2, #4294967295
 8001126:	9202      	str	r2, [sp, #8]
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	2240      	movs	r2, #64	; 0x40
 8001132:	2178      	movs	r1, #120	; 0x78
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <ssd1306_WriteData+0x30>)
 8001136:	f001 fea3 	bl	8002e80 <HAL_I2C_Mem_Write>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000ea0 	.word	0x20000ea0

08001148 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	e016      	b.n	8001182 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3b50      	subs	r3, #80	; 0x50
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffc2 	bl	80010e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ffbf 	bl	80010e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001166:	2010      	movs	r0, #16
 8001168:	f7ff ffbc 	bl	80010e4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	4a08      	ldr	r2, [pc, #32]	; (8001194 <ssd1306_UpdateScreen+0x4c>)
 8001172:	4413      	add	r3, r2
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffcc 	bl	8001114 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	3301      	adds	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9e5      	bls.n	8001154 <ssd1306_UpdateScreen+0xc>
    }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000a94 	.word	0x20000a94

08001198 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	460b      	mov	r3, r1
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	4613      	mov	r3, r2
 80011a8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db3d      	blt.n	800122e <ssd1306_DrawPixel+0x96>
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	2b3f      	cmp	r3, #63	; 0x3f
 80011b6:	d83a      	bhi.n	800122e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d11a      	bne.n	80011f4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	b2d8      	uxtb	r0, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	01db      	lsls	r3, r3, #7
 80011ca:	4413      	add	r3, r2
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <ssd1306_DrawPixel+0xa0>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b259      	sxtb	r1, r3
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	4603      	mov	r3, r0
 80011e8:	01db      	lsls	r3, r3, #7
 80011ea:	4413      	add	r3, r2
 80011ec:	b2c9      	uxtb	r1, r1
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <ssd1306_DrawPixel+0xa0>)
 80011f0:	54d1      	strb	r1, [r2, r3]
 80011f2:	e01d      	b.n	8001230 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011f4:	79fa      	ldrb	r2, [r7, #7]
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	b2d8      	uxtb	r0, r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	01db      	lsls	r3, r3, #7
 8001200:	4413      	add	r3, r2
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <ssd1306_DrawPixel+0xa0>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	b25a      	sxtb	r2, r3
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	b25b      	sxtb	r3, r3
 800121a:	4013      	ands	r3, r2
 800121c:	b259      	sxtb	r1, r3
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	4603      	mov	r3, r0
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4413      	add	r3, r2
 8001226:	b2c9      	uxtb	r1, r1
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <ssd1306_DrawPixel+0xa0>)
 800122a:	54d1      	strb	r1, [r2, r3]
 800122c:	e000      	b.n	8001230 <ssd1306_DrawPixel+0x98>
        return;
 800122e:	bf00      	nop
    }
}
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000a94 	.word	0x20000a94

0800123c <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	4603      	mov	r3, r0
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	460b      	mov	r3, r1
 8001254:	717b      	strb	r3, [r7, #5]
 8001256:	4613      	mov	r3, r2
 8001258:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800125a:	797a      	ldrb	r2, [r7, #5]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	bfb8      	it	lt
 8001264:	425b      	neglt	r3, r3
 8001266:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001268:	793a      	ldrb	r2, [r7, #4]
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	bfb8      	it	lt
 8001272:	425b      	neglt	r3, r3
 8001274:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	429a      	cmp	r2, r3
 800127c:	d201      	bcs.n	8001282 <ssd1306_Line+0x46>
 800127e:	2301      	movs	r3, #1
 8001280:	e001      	b.n	8001286 <ssd1306_Line+0x4a>
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001288:	79ba      	ldrb	r2, [r7, #6]
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d201      	bcs.n	8001294 <ssd1306_Line+0x58>
 8001290:	2301      	movs	r3, #1
 8001292:	e001      	b.n	8001298 <ssd1306_Line+0x5c>
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80012a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80012a6:	7939      	ldrb	r1, [r7, #4]
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff74 	bl	8001198 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80012b0:	e024      	b.n	80012fc <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80012b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80012b6:	79b9      	ldrb	r1, [r7, #6]
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff6c 	bl	8001198 <ssd1306_DrawPixel>
    error2 = error * 2;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	425b      	negs	r3, r3
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dd08      	ble.n	80012e2 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4413      	add	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	da08      	bge.n	80012fc <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4413      	add	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	4413      	add	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	797b      	ldrb	r3, [r7, #5]
 8001300:	429a      	cmp	r2, r3
 8001302:	d1d6      	bne.n	80012b2 <ssd1306_Line+0x76>
 8001304:	79ba      	ldrb	r2, [r7, #6]
 8001306:	793b      	ldrb	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d1d2      	bne.n	80012b2 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800130c:	bf00      	nop
}
 800130e:	3724      	adds	r7, #36	; 0x24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <FIX_MPY>:
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 16-bit.
*/
int16_t FIX_MPY(int16_t a, int16_t b)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	80bb      	strh	r3, [r7, #4]
    /* shift right one less bit (i.e. 15-1) */
    int32_t c = ((int32_t)a * (int32_t)b) >> 14;
 8001324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001328:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	139b      	asrs	r3, r3, #14
 8001332:	60fb      	str	r3, [r7, #12]
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	b21b      	sxth	r3, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	80bb      	strh	r3, [r7, #4]
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	105b      	asrs	r3, r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	80fb      	strh	r3, [r7, #6]
    return a;
 800134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
	...

0800135c <fix_fft>:
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int32_t fix_fft(int16_t fr[], int16_t fi[], int16_t m, uint8_t inverse)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b093      	sub	sp, #76	; 0x4c
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	460b      	mov	r3, r1
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
    int32_t mr, nn, i, j, l, k, istep, n, scale, shift;
    int16_t qr, qi, tr, ti, wr, wi;

    n = 1 << m;
 8001372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001376:	2201      	movs	r2, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	623b      	str	r3, [r7, #32]

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001384:	dd02      	ble.n	800138c <fix_fft+0x30>
        return -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e171      	b.n	8001670 <fix_fft+0x314>

    mr = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
    nn = n - 1;
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	3b01      	subs	r3, #1
 8001394:	61fb      	str	r3, [r7, #28]
    scale = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30

    /* decimation in time - re-order data */
    for (m = 1; m <= nn; ++m) {
 800139a:	2301      	movs	r3, #1
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	e04e      	b.n	800143e <fix_fft+0xe2>
        l = n;
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
        do {
            l >>= 1;
 80013a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a6:	105b      	asrs	r3, r3, #1
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (mr + l > nn);
 80013aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ae:	4413      	add	r3, r2
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dbf6      	blt.n	80013a4 <fix_fft+0x48>
        mr = (mr & (l - 1)) + l;
 80013b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b8:	1e5a      	subs	r2, r3, #1
 80013ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013bc:	4013      	ands	r3, r2
 80013be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013c0:	4413      	add	r3, r2
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44

        if (mr <= m)
 80013c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dd32      	ble.n	8001434 <fix_fft+0xd8>
            continue;
        tr = fr[m];
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	82fb      	strh	r3, [r7, #22]
        fr[m] = fr[mr];
 80013dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	441a      	add	r2, r3
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	68f9      	ldr	r1, [r7, #12]
 80013ec:	440b      	add	r3, r1
 80013ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013f2:	801a      	strh	r2, [r3, #0]
        fr[mr] = tr;
 80013f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	8afa      	ldrh	r2, [r7, #22]
 80013fe:	801a      	strh	r2, [r3, #0]
        ti = fi[m];
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	82bb      	strh	r3, [r7, #20]
        fi[m] = fi[mr];
 800140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	441a      	add	r2, r3
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	440b      	add	r3, r1
 8001420:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001424:	801a      	strh	r2, [r3, #0]
        fi[mr] = ti;
 8001426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4413      	add	r3, r2
 800142e:	8aba      	ldrh	r2, [r7, #20]
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	e000      	b.n	8001436 <fix_fft+0xda>
            continue;
 8001434:	bf00      	nop
    for (m = 1; m <= nn; ++m) {
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	3301      	adds	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	429a      	cmp	r2, r3
 8001446:	daab      	bge.n	80013a0 <fix_fft+0x44>
    }

    l = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
    k = LOG2_N_WAVE - 1;
 800144c:	2309      	movs	r3, #9
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
    while (l < n) {
 8001450:	e108      	b.n	8001664 <fix_fft+0x308>
        if (inverse) {
 8001452:	797b      	ldrb	r3, [r7, #5]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d039      	beq.n	80014cc <fix_fft+0x170>
            /* variable scaling, depending upon data */
            shift = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (i = 0; i < n; ++i) {
 800145c:	2300      	movs	r3, #0
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
 8001460:	e029      	b.n	80014b6 <fix_fft+0x15a>
                j = fr[i];
 8001462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (j < 0)
 8001470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001472:	2b00      	cmp	r3, #0
 8001474:	da02      	bge.n	800147c <fix_fft+0x120>
                    j = -j;
 8001476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001478:	425b      	negs	r3, r3
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
                m = fi[i];
 800147c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	4413      	add	r3, r2
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	80fb      	strh	r3, [r7, #6]
                if (m < 0)
 8001488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da03      	bge.n	8001498 <fix_fft+0x13c>
                    m = -m;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	425b      	negs	r3, r3
 8001494:	b29b      	uxth	r3, r3
 8001496:	80fb      	strh	r3, [r7, #6]
                if (j > 16383 || m > 16383) {
 8001498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800149e:	da04      	bge.n	80014aa <fix_fft+0x14e>
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a8:	db02      	blt.n	80014b0 <fix_fft+0x154>
                    shift = 1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80014ae:	e006      	b.n	80014be <fix_fft+0x162>
            for (i = 0; i < n; ++i) {
 80014b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b2:	3301      	adds	r3, #1
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
 80014b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbd1      	blt.n	8001462 <fix_fft+0x106>
                }
            }
            if (shift)
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <fix_fft+0x174>
                ++scale;
 80014c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c6:	3301      	adds	r3, #1
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
 80014ca:	e001      	b.n	80014d0 <fix_fft+0x174>
			  fixed scaling, for proper normalization --
			  there will be log2(n) passes, so this results
			  in an overall factor of 1/n, distributed to
			  maximize arithmetic accuracy.
			*/
            shift = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*
		  it may not be obvious, but the shift will be
		  performed on each data point exactly once,
		  during this pass.
		*/
        istep = l << 1;
 80014d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
        for (m = 0; m < l; ++m) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	80fb      	strh	r3, [r7, #6]
 80014da:	e0b8      	b.n	800164e <fix_fft+0x2f2>
            j = m << k;
 80014dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* 0 <= j < N_WAVE/2 */
            wr = Sinewave[j + N_WAVE / 4];
 80014e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014ee:	4a62      	ldr	r2, [pc, #392]	; (8001678 <fix_fft+0x31c>)
 80014f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f4:	84fb      	strh	r3, [r7, #38]	; 0x26
            wi = -Sinewave[j];
 80014f6:	4a60      	ldr	r2, [pc, #384]	; (8001678 <fix_fft+0x31c>)
 80014f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	425b      	negs	r3, r3
 8001502:	b29b      	uxth	r3, r3
 8001504:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (inverse)
 8001506:	797b      	ldrb	r3, [r7, #5]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <fix_fft+0x1b8>
                wi = -wi;
 800150c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800150e:	425b      	negs	r3, r3
 8001510:	b29b      	uxth	r3, r3
 8001512:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (shift) {
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <fix_fft+0x1ce>
                wr >>= 1;
 800151a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800151e:	105b      	asrs	r3, r3, #1
 8001520:	84fb      	strh	r3, [r7, #38]	; 0x26
                wi >>= 1;
 8001522:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001526:	105b      	asrs	r3, r3, #1
 8001528:	84bb      	strh	r3, [r7, #36]	; 0x24
            }
            for (i = m; i < n; i += istep) {
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
 8001530:	e084      	b.n	800163c <fix_fft+0x2e0>
                j = i + l;
 8001532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001536:	4413      	add	r3, r2
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
                tr = FIX_MPY(wr, fr[j]) - FIX_MPY(wi, fi[j]);
 800153a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001546:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fee1 	bl	8001314 <FIX_MPY>
 8001552:	4603      	mov	r3, r0
 8001554:	b29c      	uxth	r4, r3
 8001556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001562:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fed3 	bl	8001314 <FIX_MPY>
 800156e:	4603      	mov	r3, r0
 8001570:	b29b      	uxth	r3, r3
 8001572:	1ae3      	subs	r3, r4, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	82fb      	strh	r3, [r7, #22]
                ti = FIX_MPY(wr, fi[j]) + FIX_MPY(wi, fr[j]);
 8001578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	4413      	add	r3, r2
 8001580:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001584:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fec2 	bl	8001314 <FIX_MPY>
 8001590:	4603      	mov	r3, r0
 8001592:	b29c      	uxth	r4, r3
 8001594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff feb4 	bl	8001314 <FIX_MPY>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4423      	add	r3, r4
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	82bb      	strh	r3, [r7, #20]
                qr = fr[i];
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	857b      	strh	r3, [r7, #42]	; 0x2a
                qi = fi[i];
 80015c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4413      	add	r3, r2
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	853b      	strh	r3, [r7, #40]	; 0x28
                if (shift) {
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <fix_fft+0x288>
                    qr >>= 1;
 80015d4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015d8:	105b      	asrs	r3, r3, #1
 80015da:	857b      	strh	r3, [r7, #42]	; 0x2a
                    qi >>= 1;
 80015dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015e0:	105b      	asrs	r3, r3, #1
 80015e2:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                fr[j] = qr - tr;
 80015e4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015e6:	8afb      	ldrh	r3, [r7, #22]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	b299      	uxth	r1, r3
 80015ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	b20a      	sxth	r2, r1
 80015f6:	801a      	strh	r2, [r3, #0]
                fi[j] = qi - ti;
 80015f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015fa:	8abb      	ldrh	r3, [r7, #20]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b299      	uxth	r1, r3
 8001600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	4413      	add	r3, r2
 8001608:	b20a      	sxth	r2, r1
 800160a:	801a      	strh	r2, [r3, #0]
                fr[i] = qr + tr;
 800160c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800160e:	8afb      	ldrh	r3, [r7, #22]
 8001610:	4413      	add	r3, r2
 8001612:	b299      	uxth	r1, r3
 8001614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	b20a      	sxth	r2, r1
 800161e:	801a      	strh	r2, [r3, #0]
                fi[i] = qi + ti;
 8001620:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001622:	8abb      	ldrh	r3, [r7, #20]
 8001624:	4413      	add	r3, r2
 8001626:	b299      	uxth	r1, r3
 8001628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	4413      	add	r3, r2
 8001630:	b20a      	sxth	r2, r1
 8001632:	801a      	strh	r2, [r3, #0]
            for (i = m; i < n; i += istep) {
 8001634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4413      	add	r3, r2
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
 800163c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	f6ff af76 	blt.w	8001532 <fix_fft+0x1d6>
        for (m = 0; m < l; ++m) {
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	3301      	adds	r3, #1
 800164a:	b29b      	uxth	r3, r3
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001654:	429a      	cmp	r2, r3
 8001656:	f73f af41 	bgt.w	80014dc <fix_fft+0x180>
            }
        }
        --k;
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	3b01      	subs	r3, #1
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
        l = istep;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l < n) {
 8001664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	429a      	cmp	r2, r3
 800166a:	f6ff aef2 	blt.w	8001452 <fix_fft+0xf6>
    }
    return scale;
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001670:	4618      	mov	r0, r3
 8001672:	374c      	adds	r7, #76	; 0x4c
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	20000000 	.word	0x20000000

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_MspInit+0x5c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_MspInit+0x60>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_MspInit+0x60>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a28      	ldr	r2, [pc, #160]	; (800179c <HAL_ADC_MspInit+0xbc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d149      	bne.n	8001794 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_ADC_MspInit+0xc0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001734:	2303      	movs	r3, #3
 8001736:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <HAL_ADC_MspInit+0xc4>)
 8001740:	f001 f89c 	bl	800287c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001746:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_ADC_MspInit+0xcc>)
 8001748:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800176e:	2220      	movs	r2, #32
 8001770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800177a:	f000 fe91 	bl	80024a0 <HAL_DMA_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001784:	f7ff fca8 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 800178c:	621a      	str	r2, [r3, #32]
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_ADC_MspInit+0xc8>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40012400 	.word	0x40012400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800
 80017a8:	20000f24 	.word	0x20000f24
 80017ac:	40020008 	.word	0x40020008

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_I2C_MspInit+0x70>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d123      	bne.n	8001818 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_I2C_MspInit+0x74>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_I2C_MspInit+0x74>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_I2C_MspInit+0x74>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e8:	23c0      	movs	r3, #192	; 0xc0
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ec:	2312      	movs	r3, #18
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_I2C_MspInit+0x78>)
 80017fc:	f001 f83e 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_I2C_MspInit+0x74>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_I2C_MspInit+0x74>)
 8001806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180a:	61d3      	str	r3, [r2, #28]
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_I2C_MspInit+0x74>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40005400 	.word	0x40005400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010c00 	.word	0x40010c00

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_UART_MspInit+0x70>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d123      	bne.n	8001894 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_UART_MspInit+0x74>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <HAL_UART_MspInit+0x74>)
 8001852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001856:	61d3      	str	r3, [r2, #28]
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_UART_MspInit+0x74>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_UART_MspInit+0x74>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_UART_MspInit+0x74>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_UART_MspInit+0x74>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800187c:	230c      	movs	r3, #12
 800187e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2302      	movs	r3, #2
 8001886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_UART_MspInit+0x78>)
 8001890:	f000 fff4 	bl	800287c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40004400 	.word	0x40004400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010800 	.word	0x40010800

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler+0x4>

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ee:	f000 f8bd 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DMA1_Channel1_IRQHandler+0x10>)
 80018fe:	f000 fe89 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000f24 	.word	0x20000f24

0800190c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001910:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001914:	f001 f94e 	bl	8002bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f002 fc36 	bl	80041bc <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20005000 	.word	0x20005000
 800197c:	00000400 	.word	0x00000400
 8001980:	20000e94 	.word	0x20000e94
 8001984:	200010c0 	.word	0x200010c0

08001988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	; (80019cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	; (80019d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ba:	f7ff ffe5 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f002 fc03 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c2:	f7ff f84d 	bl	8000a60 <main>
  bx lr
 80019c6:	4770      	bx	lr
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000670 	.word	0x20000670
  ldr r2, =_sidata
 80019d0:	08005d10 	.word	0x08005d10
  ldr r2, =_sbss
 80019d4:	20000670 	.word	0x20000670
  ldr r4, =_ebss
 80019d8:	200010c0 	.word	0x200010c0

080019dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_2_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_Init+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_Init+0x28>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 fd13 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fe3e 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fd2b 	bl	8002486 <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 fcf3 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000600 	.word	0x20000600
 8001a64:	20000608 	.word	0x20000608
 8001a68:	20000604 	.word	0x20000604

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_IncTick+0x1c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_IncTick+0x20>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_IncTick+0x20>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000608 	.word	0x20000608
 8001a8c:	200010ac 	.word	0x200010ac

08001a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <HAL_GetTick+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	200010ac 	.word	0x200010ac

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffe0 	bl	8001a90 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000608 	.word	0x20000608

08001aec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0be      	b.n	8001c8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fdd8 	bl	80016e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 faff 	bl	8002134 <ADC_ConversionStop_Disable>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 8099 	bne.w	8001c7a <HAL_ADC_Init+0x18e>
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 8095 	bne.w	8001c7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b58:	f023 0302 	bic.w	r3, r3, #2
 8001b5c:	f043 0202 	orr.w	r2, r3, #2
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7b1b      	ldrb	r3, [r3, #12]
 8001b72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b84:	d003      	beq.n	8001b8e <HAL_ADC_Init+0xa2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_ADC_Init+0xa8>
 8001b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b92:	e000      	b.n	8001b96 <HAL_ADC_Init+0xaa>
 8001b94:	2300      	movs	r3, #0
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b1b      	ldrb	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	035a      	lsls	r2, r3, #13
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_ADC_Init+0x1a8>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c08:	d003      	beq.n	8001c12 <HAL_ADC_Init+0x126>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d104      	bne.n	8001c1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	051b      	lsls	r3, r3, #20
 8001c1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_ADC_Init+0x1ac>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10b      	bne.n	8001c58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c56:	e018      	b.n	8001c8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f023 0312 	bic.w	r3, r3, #18
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c78:	e007      	b.n	8001c8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	ffe1f7fd 	.word	0xffe1f7fd
 8001c98:	ff1f0efe 	.word	0xff1f0efe

08001c9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_ADC_Start_DMA+0x24>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d106      	bne.n	8001cce <HAL_ADC_Start_DMA+0x32>
 8001cc0:	4b60      	ldr	r3, [pc, #384]	; (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f040 80b3 	bne.w	8001e34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x40>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e0ae      	b.n	8001e3a <HAL_ADC_Start_DMA+0x19e>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f9cb 	bl	8002080 <ADC_Enable>
 8001cea:	4603      	mov	r3, r0
 8001cec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 809a 	bne.w	8001e2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a4e      	ldr	r2, [pc, #312]	; (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_Start_DMA+0x84>
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d115      	bne.n	8001d4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d026      	beq.n	8001d88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d4a:	e01d      	b.n	8001d88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a39      	ldr	r2, [pc, #228]	; (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_ADC_Start_DMA+0xd0>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10d      	bne.n	8001d88 <HAL_ADC_Start_DMA+0xec>
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f023 0206 	bic.w	r2, r3, #6
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_ADC_Start_DMA+0x1b0>)
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_ADC_Start_DMA+0x1b4>)
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_ADC_Start_DMA+0x1b8>)
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a18      	ldr	r0, [r3, #32]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	334c      	adds	r3, #76	; 0x4c
 8001dec:	4619      	mov	r1, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f000 fbaf 	bl	8002554 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e04:	d108      	bne.n	8001e18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e16:	e00f      	b.n	8001e38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e28:	e006      	b.n	8001e38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e32:	e001      	b.n	8001e38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40012400 	.word	0x40012400
 8001e48:	40012800 	.word	0x40012800
 8001e4c:	080021b7 	.word	0x080021b7
 8001e50:	08002233 	.word	0x08002233
 8001e54:	0800224f 	.word	0x0800224f

08001e58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x20>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0dc      	b.n	800206a <HAL_ADC_ConfigChannel+0x1da>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b06      	cmp	r3, #6
 8001ebe:	d81c      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b05      	subs	r3, #5
 8001ed2:	221f      	movs	r2, #31
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4019      	ands	r1, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef8:	e03c      	b.n	8001f74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d81c      	bhi.n	8001f3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	; 0x23
 8001f14:	221f      	movs	r2, #31
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4019      	ands	r1, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b23      	subs	r3, #35	; 0x23
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3a:	e01b      	b.n	8001f74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b41      	subs	r3, #65	; 0x41
 8001f4e:	221f      	movs	r2, #31
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4019      	ands	r1, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b41      	subs	r3, #65	; 0x41
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d91c      	bls.n	8001fb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68d9      	ldr	r1, [r3, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b1e      	subs	r3, #30
 8001f8e:	2207      	movs	r2, #7
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4019      	ands	r1, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6898      	ldr	r0, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b1e      	subs	r3, #30
 8001fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	e019      	b.n	8001fea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6919      	ldr	r1, [r3, #16]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4019      	ands	r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6898      	ldr	r0, [r3, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d132      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_ADC_ConfigChannel+0x1e4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d125      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d126      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002020:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b10      	cmp	r3, #16
 8002028:	d11a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_ADC_ConfigChannel+0x1e8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_ADC_ConfigChannel+0x1ec>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0c9a      	lsrs	r2, r3, #18
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002040:	e002      	b.n	8002048 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3b01      	subs	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x1b2>
 800204e:	e007      	b.n	8002060 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40012400 	.word	0x40012400
 8002078:	20000600 	.word	0x20000600
 800207c:	431bde83 	.word	0x431bde83

08002080 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d040      	beq.n	8002120 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <ADC_Enable+0xac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <ADC_Enable+0xb0>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020bc:	e002      	b.n	80020c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f9      	bne.n	80020be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ca:	f7ff fce1 	bl	8001a90 <HAL_GetTick>
 80020ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020d0:	e01f      	b.n	8002112 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020d2:	f7ff fcdd 	bl	8001a90 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d918      	bls.n	8002112 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d011      	beq.n	8002112 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	f043 0210 	orr.w	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e007      	b.n	8002122 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d1d8      	bne.n	80020d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000600 	.word	0x20000600
 8002130:	431bde83 	.word	0x431bde83

08002134 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d12e      	bne.n	80021ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800215e:	f7ff fc97 	bl	8001a90 <HAL_GetTick>
 8002162:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002164:	e01b      	b.n	800219e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002166:	f7ff fc93 	bl	8001a90 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d914      	bls.n	800219e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10d      	bne.n	800219e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e007      	b.n	80021ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d0dc      	beq.n	8002166 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d127      	bne.n	8002220 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021ea:	d115      	bne.n	8002218 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d111      	bne.n	8002218 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fe1d 	bl	8001e58 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800221e:	e004      	b.n	800222a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff fe12 	bl	8001e6a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f043 0204 	orr.w	r2, r3, #4
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff fe01 	bl	8001e7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4906      	ldr	r1, [pc, #24]	; (800231c <__NVIC_EnableIRQ+0x34>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f7ff ff90 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff2d 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff42 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff90 	bl	8002374 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5f 	bl	8002320 <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff35 	bl	80022e8 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e043      	b.n	800253e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_DMA_Init+0xa8>)
 80024be:	4413      	add	r3, r2
 80024c0:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_DMA_Init+0xac>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	009a      	lsls	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_DMA_Init+0xb0>)
 80024d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	bffdfff8 	.word	0xbffdfff8
 800254c:	cccccccd 	.word	0xcccccccd
 8002550:	40020000 	.word	0x40020000

08002554 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_DMA_Start_IT+0x20>
 8002570:	2302      	movs	r3, #2
 8002572:	e04a      	b.n	800260a <HAL_DMA_Start_IT+0xb6>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002582:	2b01      	cmp	r3, #1
 8002584:	d13a      	bne.n	80025fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f938 	bl	8002820 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 020e 	orr.w	r2, r2, #14
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e00f      	b.n	80025ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0204 	bic.w	r2, r2, #4
 80025d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 020a 	orr.w	r2, r2, #10
 80025e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e005      	b.n	8002608 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002608:	7dfb      	ldrb	r3, [r7, #23]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2204      	movs	r2, #4
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d04f      	beq.n	80026dc <HAL_DMA_IRQHandler+0xc8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_DMA_IRQHandler+0x1f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d029      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xae>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a65      	ldr	r2, [pc, #404]	; (8002808 <HAL_DMA_IRQHandler+0x1f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_IRQHandler+0xaa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_DMA_IRQHandler+0x1f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xa4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a62      	ldr	r2, [pc, #392]	; (8002810 <HAL_DMA_IRQHandler+0x1fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d012      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x9e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_DMA_IRQHandler+0x200>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x98>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5f      	ldr	r2, [pc, #380]	; (8002818 <HAL_DMA_IRQHandler+0x204>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d102      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x92>
 80026a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a4:	e00e      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026aa:	e00b      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b0:	e008      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b6:	e005      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026bc:	e002      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	e000      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026c2:	2304      	movs	r3, #4
 80026c4:	4a55      	ldr	r2, [pc, #340]	; (800281c <HAL_DMA_IRQHandler+0x208>)
 80026c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8094 	beq.w	80027fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026da:	e08e      	b.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2202      	movs	r2, #2
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d056      	beq.n	800279a <HAL_DMA_IRQHandler+0x186>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d051      	beq.n	800279a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020a 	bic.w	r2, r2, #10
 8002712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a38      	ldr	r2, [pc, #224]	; (8002804 <HAL_DMA_IRQHandler+0x1f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d029      	beq.n	800277a <HAL_DMA_IRQHandler+0x166>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <HAL_DMA_IRQHandler+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <HAL_DMA_IRQHandler+0x162>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a35      	ldr	r2, [pc, #212]	; (800280c <HAL_DMA_IRQHandler+0x1f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x15c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_DMA_IRQHandler+0x1fc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d012      	beq.n	800276a <HAL_DMA_IRQHandler+0x156>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a32      	ldr	r2, [pc, #200]	; (8002814 <HAL_DMA_IRQHandler+0x200>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x150>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a31      	ldr	r2, [pc, #196]	; (8002818 <HAL_DMA_IRQHandler+0x204>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d102      	bne.n	800275e <HAL_DMA_IRQHandler+0x14a>
 8002758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800275c:	e00e      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	e00b      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002768:	e008      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800276a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276e:	e005      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	e002      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002776:	2320      	movs	r3, #32
 8002778:	e000      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800277a:	2302      	movs	r3, #2
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_DMA_IRQHandler+0x208>)
 800277e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d034      	beq.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002798:	e02f      	b.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2208      	movs	r2, #8
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d028      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 020e 	bic.w	r2, r2, #14
 80027c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
    }
  }
  return;
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
}
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40020008 	.word	0x40020008
 8002808:	4002001c 	.word	0x4002001c
 800280c:	40020030 	.word	0x40020030
 8002810:	40020044 	.word	0x40020044
 8002814:	40020058 	.word	0x40020058
 8002818:	4002006c 	.word	0x4002006c
 800281c:	40020000 	.word	0x40020000

08002820 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d108      	bne.n	8002860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800285e:	e007      	b.n	8002870 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e169      	b.n	8002b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002890:	2201      	movs	r2, #1
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8158 	bne.w	8002b5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a9a      	ldr	r2, [pc, #616]	; (8002b1c <HAL_GPIO_Init+0x2a0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d05e      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028b8:	4a98      	ldr	r2, [pc, #608]	; (8002b1c <HAL_GPIO_Init+0x2a0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d875      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028be:	4a98      	ldr	r2, [pc, #608]	; (8002b20 <HAL_GPIO_Init+0x2a4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d058      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028c4:	4a96      	ldr	r2, [pc, #600]	; (8002b20 <HAL_GPIO_Init+0x2a4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d86f      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ca:	4a96      	ldr	r2, [pc, #600]	; (8002b24 <HAL_GPIO_Init+0x2a8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d052      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028d0:	4a94      	ldr	r2, [pc, #592]	; (8002b24 <HAL_GPIO_Init+0x2a8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d869      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028d6:	4a94      	ldr	r2, [pc, #592]	; (8002b28 <HAL_GPIO_Init+0x2ac>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04c      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028dc:	4a92      	ldr	r2, [pc, #584]	; (8002b28 <HAL_GPIO_Init+0x2ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d863      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028e2:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_GPIO_Init+0x2b0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d046      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028e8:	4a90      	ldr	r2, [pc, #576]	; (8002b2c <HAL_GPIO_Init+0x2b0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d85d      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d82a      	bhi.n	8002948 <HAL_GPIO_Init+0xcc>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d859      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_GPIO_Init+0x80>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002977 	.word	0x08002977
 8002900:	08002951 	.word	0x08002951
 8002904:	08002963 	.word	0x08002963
 8002908:	080029a5 	.word	0x080029a5
 800290c:	080029ab 	.word	0x080029ab
 8002910:	080029ab 	.word	0x080029ab
 8002914:	080029ab 	.word	0x080029ab
 8002918:	080029ab 	.word	0x080029ab
 800291c:	080029ab 	.word	0x080029ab
 8002920:	080029ab 	.word	0x080029ab
 8002924:	080029ab 	.word	0x080029ab
 8002928:	080029ab 	.word	0x080029ab
 800292c:	080029ab 	.word	0x080029ab
 8002930:	080029ab 	.word	0x080029ab
 8002934:	080029ab 	.word	0x080029ab
 8002938:	080029ab 	.word	0x080029ab
 800293c:	080029ab 	.word	0x080029ab
 8002940:	08002959 	.word	0x08002959
 8002944:	0800296d 	.word	0x0800296d
 8002948:	4a79      	ldr	r2, [pc, #484]	; (8002b30 <HAL_GPIO_Init+0x2b4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800294e:	e02c      	b.n	80029aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e029      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	3304      	adds	r3, #4
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e024      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	3308      	adds	r3, #8
 8002968:	623b      	str	r3, [r7, #32]
          break;
 800296a:	e01f      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	330c      	adds	r3, #12
 8002972:	623b      	str	r3, [r7, #32]
          break;
 8002974:	e01a      	b.n	80029ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297e:	2304      	movs	r3, #4
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e013      	b.n	80029ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	611a      	str	r2, [r3, #16]
          break;
 8002996:	e009      	b.n	80029ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002998:	2308      	movs	r3, #8
 800299a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	615a      	str	r2, [r3, #20]
          break;
 80029a2:	e003      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x130>
          break;
 80029aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d801      	bhi.n	80029b6 <HAL_GPIO_Init+0x13a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_Init+0x13e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2bff      	cmp	r3, #255	; 0xff
 80029c0:	d802      	bhi.n	80029c8 <HAL_GPIO_Init+0x14c>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x152>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3b08      	subs	r3, #8
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	210f      	movs	r1, #15
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80b1 	beq.w	8002b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029fc:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a14:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_GPIO_Init+0x2bc>)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_GPIO_Init+0x2c0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_GPIO_Init+0x1ec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_GPIO_Init+0x2c4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00d      	beq.n	8002a64 <HAL_GPIO_Init+0x1e8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3e      	ldr	r2, [pc, #248]	; (8002b44 <HAL_GPIO_Init+0x2c8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x1e4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_GPIO_Init+0x2cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_GPIO_Init+0x1e0>
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e004      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e002      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	f002 0203 	and.w	r2, r2, #3
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	4093      	lsls	r3, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a7a:	492f      	ldr	r1, [pc, #188]	; (8002b38 <HAL_GPIO_Init+0x2bc>)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	492c      	ldr	r1, [pc, #176]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	4922      	ldr	r1, [pc, #136]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	491e      	ldr	r1, [pc, #120]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	4918      	ldr	r1, [pc, #96]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4914      	ldr	r1, [pc, #80]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
 8002b18:	e021      	b.n	8002b5e <HAL_GPIO_Init+0x2e2>
 8002b1a:	bf00      	nop
 8002b1c:	10320000 	.word	0x10320000
 8002b20:	10310000 	.word	0x10310000
 8002b24:	10220000 	.word	0x10220000
 8002b28:	10210000 	.word	0x10210000
 8002b2c:	10120000 	.word	0x10120000
 8002b30:	10110000 	.word	0x10110000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010800 	.word	0x40010800
 8002b40:	40010c00 	.word	0x40010c00
 8002b44:	40011000 	.word	0x40011000
 8002b48:	40011400 	.word	0x40011400
 8002b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_GPIO_Init+0x304>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4909      	ldr	r1, [pc, #36]	; (8002b80 <HAL_GPIO_Init+0x304>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f47f ae8e 	bne.w	8002890 <HAL_GPIO_Init+0x14>
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	372c      	adds	r7, #44	; 0x2c
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f806 	bl	8002be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e12b      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fdc6 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f000 fffa 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a81      	ldr	r2, [pc, #516]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_I2C_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a7d      	ldr	r2, [pc, #500]	; (8002e74 <HAL_I2C_Init+0x27c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0e7      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a78      	ldr	r2, [pc, #480]	; (8002e78 <HAL_I2C_Init+0x280>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_I2C_Init+0x284>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495c      	ldr	r1, [pc, #368]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d819      	bhi.n	8002d34 <HAL_I2C_Init+0x13c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_I2C_Init+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	e051      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e04f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_I2C_Init+0x168>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e012      	b.n	8002d86 <HAL_I2C_Init+0x18e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x196>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_I2C_Init+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e58      	subs	r0, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	e00f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6809      	ldr	r1, [r1, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6911      	ldr	r1, [r2, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	000186a0 	.word	0x000186a0
 8002e70:	001e847f 	.word	0x001e847f
 8002e74:	003d08ff 	.word	0x003d08ff
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	460b      	mov	r3, r1
 8002e94:	813b      	strh	r3, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e9a:	f7fe fdf9 	bl	8001a90 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	f040 80d9 	bne.w	8003060 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2319      	movs	r3, #25
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	496d      	ldr	r1, [pc, #436]	; (800306c <HAL_I2C_Mem_Write+0x1ec>)
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f971 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e0cc      	b.n	8003062 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Mem_Write+0x56>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0c5      	b.n	8003062 <HAL_I2C_Mem_Write+0x1e2>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d007      	beq.n	8002efc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2221      	movs	r2, #33	; 0x21
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_I2C_Mem_Write+0x1f0>)
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f3e:	88f8      	ldrh	r0, [r7, #6]
 8002f40:	893a      	ldrh	r2, [r7, #8]
 8002f42:	8979      	ldrh	r1, [r7, #10]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f890 	bl	8003074 <I2C_RequestMemoryWrite>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d052      	beq.n	8003000 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e081      	b.n	8003062 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f9f2 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06b      	b.n	8003062 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d11b      	bne.n	8003000 <HAL_I2C_Mem_Write+0x180>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1aa      	bne.n	8002f5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f9de 	bl	80033ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e016      	b.n	8003062 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	00100002 	.word	0x00100002
 8003070:	ffff0000 	.word	0xffff0000

08003074 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	460b      	mov	r3, r1
 8003088:	813b      	strh	r3, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f878 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c4:	d103      	bne.n	80030ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e05f      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	492d      	ldr	r1, [pc, #180]	; (800319c <I2C_RequestMemoryWrite+0x128>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8b0 	bl	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04c      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f91a 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b04      	cmp	r3, #4
 8003124:	d107      	bne.n	8003136 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e02b      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]
 800314a:	e021      	b.n	8003190 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800314c:	893b      	ldrh	r3, [r7, #8]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	6a39      	ldr	r1, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f8f4 	bl	800334c <I2C_WaitOnTXEFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00d      	beq.n	8003186 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b04      	cmp	r3, #4
 8003170:	d107      	bne.n	8003182 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e005      	b.n	8003192 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	00010002 	.word	0x00010002

080031a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b0:	e025      	b.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d021      	beq.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fc69 	bl	8001a90 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e023      	b.n	8003246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10d      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	e00c      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d0b6      	beq.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325c:	e051      	b.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d123      	bne.n	80032b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e046      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d021      	beq.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fe fbe7 	bl	8001a90 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d116      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e020      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e00b      	b.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	43da      	mvns	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d18d      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003358:	e02d      	b.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f878 	bl	8003450 <I2C_IsAcknowledgeFailed>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02d      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d021      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe fb8d 	bl	8001a90 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d1ca      	bne.n	800335a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033da:	e02d      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f837 	bl	8003450 <I2C_IsAcknowledgeFailed>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e02d      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d021      	beq.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fe fb4c 	bl	8001a90 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d1ca      	bne.n	80033dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003466:	d11b      	bne.n	80034a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003470:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e26c      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8087 	beq.w	80035da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034cc:	4b92      	ldr	r3, [pc, #584]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d00c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d8:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d112      	bne.n	800350a <HAL_RCC_OscConfig+0x5e>
 80034e4:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d10b      	bne.n	800350a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f2:	4b89      	ldr	r3, [pc, #548]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d06c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x12c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d168      	bne.n	80035d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e246      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x76>
 8003514:	4b80      	ldr	r3, [pc, #512]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7f      	ldr	r2, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	e02e      	b.n	8003580 <HAL_RCC_OscConfig+0xd4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x98>
 800352a:	4b7b      	ldr	r3, [pc, #492]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7a      	ldr	r2, [pc, #488]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b78      	ldr	r3, [pc, #480]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a77      	ldr	r2, [pc, #476]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800353c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e01d      	b.n	8003580 <HAL_RCC_OscConfig+0xd4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0xbc>
 800354e:	4b72      	ldr	r3, [pc, #456]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a71      	ldr	r2, [pc, #452]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0xd4>
 8003568:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6a      	ldr	r2, [pc, #424]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b68      	ldr	r3, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a67      	ldr	r2, [pc, #412]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fa82 	bl	8001a90 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe fa7e 	bl	8001a90 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1fa      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0xe4>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fa6e 	bl	8001a90 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe fa6a 	bl	8001a90 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1e6      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x10c>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e6:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035f2:	4b49      	ldr	r3, [pc, #292]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11c      	bne.n	8003638 <HAL_RCC_OscConfig+0x18c>
 80035fe:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d116      	bne.n	8003638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x176>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1ba      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4939      	ldr	r1, [pc, #228]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	e03a      	b.n	80036ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCC_OscConfig+0x270>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fe fa23 	bl	8001a90 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364e:	f7fe fa1f 	bl	8001a90 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e19b      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4927      	ldr	r1, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0x270>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fa02 	bl	8001a90 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003690:	f7fe f9fe 	bl	8001a90 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e17a      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03a      	beq.n	8003730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d019      	beq.n	80036f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fe f9e2 	bl	8001a90 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fe f9de 	bl	8001a90 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e15a      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ee:	2001      	movs	r0, #1
 80036f0:	f000 fad8 	bl	8003ca4 <RCC_Delay>
 80036f4:	e01c      	b.n	8003730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fc:	f7fe f9c8 	bl	8001a90 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003702:	e00f      	b.n	8003724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003704:	f7fe f9c4 	bl	8001a90 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d908      	bls.n	8003724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e140      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	42420000 	.word	0x42420000
 8003720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b9e      	ldr	r3, [pc, #632]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e9      	bne.n	8003704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a6 	beq.w	800388a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b97      	ldr	r3, [pc, #604]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	4b94      	ldr	r3, [pc, #592]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4a93      	ldr	r2, [pc, #588]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	61d3      	str	r3, [r2, #28]
 800375a:	4b91      	ldr	r3, [pc, #580]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b8e      	ldr	r3, [pc, #568]	; (80039a4 <HAL_RCC_OscConfig+0x4f8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b8b      	ldr	r3, [pc, #556]	; (80039a4 <HAL_RCC_OscConfig+0x4f8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a8a      	ldr	r2, [pc, #552]	; (80039a4 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fe f985 	bl	8001a90 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fe f981 	bl	8001a90 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b64      	cmp	r3, #100	; 0x64
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0fd      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_RCC_OscConfig+0x4f8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x312>
 80037b0:	4b7b      	ldr	r3, [pc, #492]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a7a      	ldr	r2, [pc, #488]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	e02d      	b.n	800381a <HAL_RCC_OscConfig+0x36e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x334>
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	6213      	str	r3, [r2, #32]
 80037d2:	4b73      	ldr	r3, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4a72      	ldr	r2, [pc, #456]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	6213      	str	r3, [r2, #32]
 80037de:	e01c      	b.n	800381a <HAL_RCC_OscConfig+0x36e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d10c      	bne.n	8003802 <HAL_RCC_OscConfig+0x356>
 80037e8:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a6c      	ldr	r2, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a69      	ldr	r2, [pc, #420]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	e00b      	b.n	800381a <HAL_RCC_OscConfig+0x36e>
 8003802:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4a66      	ldr	r2, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6213      	str	r3, [r2, #32]
 800380e:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a63      	ldr	r2, [pc, #396]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d015      	beq.n	800384e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fe f935 	bl	8001a90 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe f931 	bl	8001a90 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0ab      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ee      	beq.n	800382a <HAL_RCC_OscConfig+0x37e>
 800384c:	e014      	b.n	8003878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7fe f91f 	bl	8001a90 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fe f91b 	bl	8001a90 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e095      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ee      	bne.n	8003856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d105      	bne.n	800388a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8081 	beq.w	8003996 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d061      	beq.n	8003964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d146      	bne.n	8003936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCC_OscConfig+0x4fc>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe f8ef 	bl	8001a90 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe f8eb 	bl	8001a90 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e067      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038dc:	d108      	bne.n	80038f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038de:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	492d      	ldr	r1, [pc, #180]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a19      	ldr	r1, [r3, #32]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	430b      	orrs	r3, r1
 8003902:	4927      	ldr	r1, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x4fc>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fe f8bf 	bl	8001a90 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003916:	f7fe f8bb 	bl	8001a90 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e037      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x46a>
 8003934:	e02f      	b.n	8003996 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_RCC_OscConfig+0x4fc>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe f8a8 	bl	8001a90 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe f8a4 	bl	8001a90 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e020      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x498>
 8003962:	e018      	b.n	8003996 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e013      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	429a      	cmp	r2, r3
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
 80039a8:	42420060 	.word	0x42420060

080039ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0d0      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 0207 	bic.w	r2, r3, #7
 80039d6:	4965      	ldr	r1, [pc, #404]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b63      	ldr	r3, [pc, #396]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0b8      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a58      	ldr	r2, [pc, #352]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	494d      	ldr	r1, [pc, #308]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d040      	beq.n	8003acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e073      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06b      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4936      	ldr	r1, [pc, #216]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a9c:	f7fd fff8 	bl	8001a90 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fd fff4 	bl	8001a90 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e053      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d210      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 0207 	bic.w	r2, r3, #7
 8003ae2:	4922      	ldr	r1, [pc, #136]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e032      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4916      	ldr	r1, [pc, #88]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3a:	f000 f821 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490a      	ldr	r1, [pc, #40]	; (8003b74 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1cc>)
 8003b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1d0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd ff56 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08005ae0 	.word	0x08005ae0
 8003b78:	20000600 	.word	0x20000600
 8003b7c:	20000604 	.word	0x20000604

08003b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b490      	push	{r4, r7}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b88:	1d3c      	adds	r4, r7, #4
 8003b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b90:	f240 2301 	movw	r3, #513	; 0x201
 8003b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8003bbe:	e02d      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc2:	623b      	str	r3, [r7, #32]
      break;
 8003bc4:	e02d      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	0c9b      	lsrs	r3, r3, #18
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0c5b      	lsrs	r3, r3, #17
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfe:	fb02 f203 	mul.w	r2, r2, r3
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	e004      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c10:	fb02 f303 	mul.w	r3, r2, r3
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	623b      	str	r3, [r7, #32]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1e:	623b      	str	r3, [r7, #32]
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	6a3b      	ldr	r3, [r7, #32]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc90      	pop	{r4, r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	08005ad0 	.word	0x08005ad0
 8003c34:	40021000 	.word	0x40021000
 8003c38:	007a1200 	.word	0x007a1200
 8003c3c:	003d0900 	.word	0x003d0900

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b02      	ldr	r3, [pc, #8]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	20000600 	.word	0x20000600

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff2 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40021000 	.word	0x40021000
 8003c78:	08005af0 	.word	0x08005af0

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffde 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0adb      	lsrs	r3, r3, #11
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08005af0 	.word	0x08005af0

08003ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <RCC_Delay+0x34>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <RCC_Delay+0x38>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0a5b      	lsrs	r3, r3, #9
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cc0:	bf00      	nop
  }
  while (Delay --);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e5a      	subs	r2, r3, #1
 8003cc6:	60fa      	str	r2, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f9      	bne.n	8003cc0 <RCC_Delay+0x1c>
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	20000600 	.word	0x20000600
 8003cdc:	10624dd3 	.word	0x10624dd3

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d07d      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d00:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10d      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4a4b      	ldr	r2, [pc, #300]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d16:	61d3      	str	r3, [r2, #28]
 8003d18:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d24:	2301      	movs	r3, #1
 8003d26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d118      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a42      	ldr	r2, [pc, #264]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d40:	f7fd fea6 	bl	8001a90 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	e008      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d48:	f7fd fea2 	bl	8001a90 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e06d      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b3a      	ldr	r3, [pc, #232]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d02e      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d027      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d84:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d9a:	4a29      	ldr	r2, [pc, #164]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d014      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd fe71 	bl	8001a90 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd fe6d 	bl	8001a90 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e036      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ee      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4917      	ldr	r1, [pc, #92]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	490b      	ldr	r1, [pc, #44]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4904      	ldr	r1, [pc, #16]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
 8003e48:	42420440 	.word	0x42420440

08003e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e03f      	b.n	8003ede <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fcda 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f905 	bl	80040a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d17c      	bne.n	8004000 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_UART_Transmit+0x2c>
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e075      	b.n	8004002 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Transmit+0x3e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e06e      	b.n	8004002 <HAL_UART_Transmit+0x11c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3a:	f7fd fda9 	bl	8001a90 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f54:	d108      	bne.n	8003f68 <HAL_UART_Transmit+0x82>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e003      	b.n	8003f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f78:	e02a      	b.n	8003fd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f840 	bl	800400a <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e036      	b.n	8004002 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	3302      	adds	r3, #2
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e007      	b.n	8003fc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1cf      	bne.n	8003f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f810 	bl	800400a <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	e02c      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d028      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <UART_WaitOnFlagUntilTimeout+0x30>
 800402a:	f7fd fd31 	bl	8001a90 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	429a      	cmp	r2, r3
 8004038:	d21d      	bcs.n	8004076 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004048:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d0c3      	beq.n	800401c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040da:	f023 030c 	bic.w	r3, r3, #12
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <UART_SetConfig+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004108:	f7ff fdb8 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	e002      	b.n	8004116 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff fda0 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004114:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <UART_SetConfig+0x118>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	0119      	lsls	r1, r3, #4
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	fbb2 f2f3 	udiv	r2, r2, r3
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <UART_SetConfig+0x118>)
 800414e:	fba3 0302 	umull	r0, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2064      	movs	r0, #100	; 0x64
 8004156:	fb00 f303 	mul.w	r3, r0, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	3332      	adds	r3, #50	; 0x32
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <UART_SetConfig+0x118>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800416c:	4419      	add	r1, r3
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009a      	lsls	r2, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	fbb2 f2f3 	udiv	r2, r2, r3
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <UART_SetConfig+0x118>)
 8004186:	fba3 0302 	umull	r0, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2064      	movs	r0, #100	; 0x64
 800418e:	fb00 f303 	mul.w	r3, r0, r3
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	3332      	adds	r3, #50	; 0x32
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <UART_SetConfig+0x118>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	440a      	add	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40013800 	.word	0x40013800
 80041b8:	51eb851f 	.word	0x51eb851f

080041bc <__errno>:
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <__errno+0x8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	2000060c 	.word	0x2000060c

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	2600      	movs	r6, #0
 80041cc:	4d0c      	ldr	r5, [pc, #48]	; (8004200 <__libc_init_array+0x38>)
 80041ce:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <__libc_init_array+0x3c>)
 80041d0:	1b64      	subs	r4, r4, r5
 80041d2:	10a4      	asrs	r4, r4, #2
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	f001 fc5c 	bl	8005a94 <_init>
 80041dc:	2600      	movs	r6, #0
 80041de:	4d0a      	ldr	r5, [pc, #40]	; (8004208 <__libc_init_array+0x40>)
 80041e0:	4c0a      	ldr	r4, [pc, #40]	; (800420c <__libc_init_array+0x44>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	42a6      	cmp	r6, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f0:	4798      	blx	r3
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fa:	4798      	blx	r3
 80041fc:	3601      	adds	r6, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08005d08 	.word	0x08005d08
 8004204:	08005d08 	.word	0x08005d08
 8004208:	08005d08 	.word	0x08005d08
 800420c:	08005d0c 	.word	0x08005d0c

08004210 <memcpy>:
 8004210:	440a      	add	r2, r1
 8004212:	4291      	cmp	r1, r2
 8004214:	f100 33ff 	add.w	r3, r0, #4294967295
 8004218:	d100      	bne.n	800421c <memcpy+0xc>
 800421a:	4770      	bx	lr
 800421c:	b510      	push	{r4, lr}
 800421e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004222:	4291      	cmp	r1, r2
 8004224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004228:	d1f9      	bne.n	800421e <memcpy+0xe>
 800422a:	bd10      	pop	{r4, pc}

0800422c <memmove>:
 800422c:	4288      	cmp	r0, r1
 800422e:	b510      	push	{r4, lr}
 8004230:	eb01 0402 	add.w	r4, r1, r2
 8004234:	d902      	bls.n	800423c <memmove+0x10>
 8004236:	4284      	cmp	r4, r0
 8004238:	4623      	mov	r3, r4
 800423a:	d807      	bhi.n	800424c <memmove+0x20>
 800423c:	1e43      	subs	r3, r0, #1
 800423e:	42a1      	cmp	r1, r4
 8004240:	d008      	beq.n	8004254 <memmove+0x28>
 8004242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800424a:	e7f8      	b.n	800423e <memmove+0x12>
 800424c:	4601      	mov	r1, r0
 800424e:	4402      	add	r2, r0
 8004250:	428a      	cmp	r2, r1
 8004252:	d100      	bne.n	8004256 <memmove+0x2a>
 8004254:	bd10      	pop	{r4, pc}
 8004256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800425a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425e:	e7f7      	b.n	8004250 <memmove+0x24>

08004260 <memset>:
 8004260:	4603      	mov	r3, r0
 8004262:	4402      	add	r2, r0
 8004264:	4293      	cmp	r3, r2
 8004266:	d100      	bne.n	800426a <memset+0xa>
 8004268:	4770      	bx	lr
 800426a:	f803 1b01 	strb.w	r1, [r3], #1
 800426e:	e7f9      	b.n	8004264 <memset+0x4>

08004270 <siprintf>:
 8004270:	b40e      	push	{r1, r2, r3}
 8004272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004276:	b500      	push	{lr}
 8004278:	b09c      	sub	sp, #112	; 0x70
 800427a:	ab1d      	add	r3, sp, #116	; 0x74
 800427c:	9002      	str	r0, [sp, #8]
 800427e:	9006      	str	r0, [sp, #24]
 8004280:	9107      	str	r1, [sp, #28]
 8004282:	9104      	str	r1, [sp, #16]
 8004284:	4808      	ldr	r0, [pc, #32]	; (80042a8 <siprintf+0x38>)
 8004286:	4909      	ldr	r1, [pc, #36]	; (80042ac <siprintf+0x3c>)
 8004288:	f853 2b04 	ldr.w	r2, [r3], #4
 800428c:	9105      	str	r1, [sp, #20]
 800428e:	6800      	ldr	r0, [r0, #0]
 8004290:	a902      	add	r1, sp, #8
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	f000 f868 	bl	8004368 <_svfiprintf_r>
 8004298:	2200      	movs	r2, #0
 800429a:	9b02      	ldr	r3, [sp, #8]
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	b01c      	add	sp, #112	; 0x70
 80042a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a4:	b003      	add	sp, #12
 80042a6:	4770      	bx	lr
 80042a8:	2000060c 	.word	0x2000060c
 80042ac:	ffff0208 	.word	0xffff0208

080042b0 <__ssputs_r>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	688e      	ldr	r6, [r1, #8]
 80042b6:	4682      	mov	sl, r0
 80042b8:	429e      	cmp	r6, r3
 80042ba:	460c      	mov	r4, r1
 80042bc:	4690      	mov	r8, r2
 80042be:	461f      	mov	r7, r3
 80042c0:	d838      	bhi.n	8004334 <__ssputs_r+0x84>
 80042c2:	898a      	ldrh	r2, [r1, #12]
 80042c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042c8:	d032      	beq.n	8004330 <__ssputs_r+0x80>
 80042ca:	6825      	ldr	r5, [r4, #0]
 80042cc:	6909      	ldr	r1, [r1, #16]
 80042ce:	3301      	adds	r3, #1
 80042d0:	eba5 0901 	sub.w	r9, r5, r1
 80042d4:	6965      	ldr	r5, [r4, #20]
 80042d6:	444b      	add	r3, r9
 80042d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042e0:	106d      	asrs	r5, r5, #1
 80042e2:	429d      	cmp	r5, r3
 80042e4:	bf38      	it	cc
 80042e6:	461d      	movcc	r5, r3
 80042e8:	0553      	lsls	r3, r2, #21
 80042ea:	d531      	bpl.n	8004350 <__ssputs_r+0xa0>
 80042ec:	4629      	mov	r1, r5
 80042ee:	f000 fb2b 	bl	8004948 <_malloc_r>
 80042f2:	4606      	mov	r6, r0
 80042f4:	b950      	cbnz	r0, 800430c <__ssputs_r+0x5c>
 80042f6:	230c      	movs	r3, #12
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	f8ca 3000 	str.w	r3, [sl]
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430c:	464a      	mov	r2, r9
 800430e:	6921      	ldr	r1, [r4, #16]
 8004310:	f7ff ff7e 	bl	8004210 <memcpy>
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800431a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431e:	81a3      	strh	r3, [r4, #12]
 8004320:	6126      	str	r6, [r4, #16]
 8004322:	444e      	add	r6, r9
 8004324:	6026      	str	r6, [r4, #0]
 8004326:	463e      	mov	r6, r7
 8004328:	6165      	str	r5, [r4, #20]
 800432a:	eba5 0509 	sub.w	r5, r5, r9
 800432e:	60a5      	str	r5, [r4, #8]
 8004330:	42be      	cmp	r6, r7
 8004332:	d900      	bls.n	8004336 <__ssputs_r+0x86>
 8004334:	463e      	mov	r6, r7
 8004336:	4632      	mov	r2, r6
 8004338:	4641      	mov	r1, r8
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	f7ff ff76 	bl	800422c <memmove>
 8004340:	68a3      	ldr	r3, [r4, #8]
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	1b9b      	subs	r3, r3, r6
 8004346:	4432      	add	r2, r6
 8004348:	2000      	movs	r0, #0
 800434a:	60a3      	str	r3, [r4, #8]
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	e7db      	b.n	8004308 <__ssputs_r+0x58>
 8004350:	462a      	mov	r2, r5
 8004352:	f000 fb53 	bl	80049fc <_realloc_r>
 8004356:	4606      	mov	r6, r0
 8004358:	2800      	cmp	r0, #0
 800435a:	d1e1      	bne.n	8004320 <__ssputs_r+0x70>
 800435c:	4650      	mov	r0, sl
 800435e:	6921      	ldr	r1, [r4, #16]
 8004360:	f000 faa6 	bl	80048b0 <_free_r>
 8004364:	e7c7      	b.n	80042f6 <__ssputs_r+0x46>
	...

08004368 <_svfiprintf_r>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	4698      	mov	r8, r3
 800436e:	898b      	ldrh	r3, [r1, #12]
 8004370:	4607      	mov	r7, r0
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	460d      	mov	r5, r1
 8004376:	4614      	mov	r4, r2
 8004378:	b09d      	sub	sp, #116	; 0x74
 800437a:	d50e      	bpl.n	800439a <_svfiprintf_r+0x32>
 800437c:	690b      	ldr	r3, [r1, #16]
 800437e:	b963      	cbnz	r3, 800439a <_svfiprintf_r+0x32>
 8004380:	2140      	movs	r1, #64	; 0x40
 8004382:	f000 fae1 	bl	8004948 <_malloc_r>
 8004386:	6028      	str	r0, [r5, #0]
 8004388:	6128      	str	r0, [r5, #16]
 800438a:	b920      	cbnz	r0, 8004396 <_svfiprintf_r+0x2e>
 800438c:	230c      	movs	r3, #12
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	e0d1      	b.n	800453a <_svfiprintf_r+0x1d2>
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	616b      	str	r3, [r5, #20]
 800439a:	2300      	movs	r3, #0
 800439c:	9309      	str	r3, [sp, #36]	; 0x24
 800439e:	2320      	movs	r3, #32
 80043a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043a4:	2330      	movs	r3, #48	; 0x30
 80043a6:	f04f 0901 	mov.w	r9, #1
 80043aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004554 <_svfiprintf_r+0x1ec>
 80043b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043b6:	4623      	mov	r3, r4
 80043b8:	469a      	mov	sl, r3
 80043ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043be:	b10a      	cbz	r2, 80043c4 <_svfiprintf_r+0x5c>
 80043c0:	2a25      	cmp	r2, #37	; 0x25
 80043c2:	d1f9      	bne.n	80043b8 <_svfiprintf_r+0x50>
 80043c4:	ebba 0b04 	subs.w	fp, sl, r4
 80043c8:	d00b      	beq.n	80043e2 <_svfiprintf_r+0x7a>
 80043ca:	465b      	mov	r3, fp
 80043cc:	4622      	mov	r2, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	4638      	mov	r0, r7
 80043d2:	f7ff ff6d 	bl	80042b0 <__ssputs_r>
 80043d6:	3001      	adds	r0, #1
 80043d8:	f000 80aa 	beq.w	8004530 <_svfiprintf_r+0x1c8>
 80043dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043de:	445a      	add	r2, fp
 80043e0:	9209      	str	r2, [sp, #36]	; 0x24
 80043e2:	f89a 3000 	ldrb.w	r3, [sl]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80a2 	beq.w	8004530 <_svfiprintf_r+0x1c8>
 80043ec:	2300      	movs	r3, #0
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295
 80043f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043f6:	f10a 0a01 	add.w	sl, sl, #1
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	9307      	str	r3, [sp, #28]
 80043fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004402:	931a      	str	r3, [sp, #104]	; 0x68
 8004404:	4654      	mov	r4, sl
 8004406:	2205      	movs	r2, #5
 8004408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440c:	4851      	ldr	r0, [pc, #324]	; (8004554 <_svfiprintf_r+0x1ec>)
 800440e:	f000 fa41 	bl	8004894 <memchr>
 8004412:	9a04      	ldr	r2, [sp, #16]
 8004414:	b9d8      	cbnz	r0, 800444e <_svfiprintf_r+0xe6>
 8004416:	06d0      	lsls	r0, r2, #27
 8004418:	bf44      	itt	mi
 800441a:	2320      	movmi	r3, #32
 800441c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004420:	0711      	lsls	r1, r2, #28
 8004422:	bf44      	itt	mi
 8004424:	232b      	movmi	r3, #43	; 0x2b
 8004426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800442a:	f89a 3000 	ldrb.w	r3, [sl]
 800442e:	2b2a      	cmp	r3, #42	; 0x2a
 8004430:	d015      	beq.n	800445e <_svfiprintf_r+0xf6>
 8004432:	4654      	mov	r4, sl
 8004434:	2000      	movs	r0, #0
 8004436:	f04f 0c0a 	mov.w	ip, #10
 800443a:	9a07      	ldr	r2, [sp, #28]
 800443c:	4621      	mov	r1, r4
 800443e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004442:	3b30      	subs	r3, #48	; 0x30
 8004444:	2b09      	cmp	r3, #9
 8004446:	d94e      	bls.n	80044e6 <_svfiprintf_r+0x17e>
 8004448:	b1b0      	cbz	r0, 8004478 <_svfiprintf_r+0x110>
 800444a:	9207      	str	r2, [sp, #28]
 800444c:	e014      	b.n	8004478 <_svfiprintf_r+0x110>
 800444e:	eba0 0308 	sub.w	r3, r0, r8
 8004452:	fa09 f303 	lsl.w	r3, r9, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	46a2      	mov	sl, r4
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	e7d2      	b.n	8004404 <_svfiprintf_r+0x9c>
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	1d19      	adds	r1, r3, #4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	9103      	str	r1, [sp, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfbb      	ittet	lt
 800446a:	425b      	neglt	r3, r3
 800446c:	f042 0202 	orrlt.w	r2, r2, #2
 8004470:	9307      	strge	r3, [sp, #28]
 8004472:	9307      	strlt	r3, [sp, #28]
 8004474:	bfb8      	it	lt
 8004476:	9204      	strlt	r2, [sp, #16]
 8004478:	7823      	ldrb	r3, [r4, #0]
 800447a:	2b2e      	cmp	r3, #46	; 0x2e
 800447c:	d10c      	bne.n	8004498 <_svfiprintf_r+0x130>
 800447e:	7863      	ldrb	r3, [r4, #1]
 8004480:	2b2a      	cmp	r3, #42	; 0x2a
 8004482:	d135      	bne.n	80044f0 <_svfiprintf_r+0x188>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	3402      	adds	r4, #2
 8004488:	1d1a      	adds	r2, r3, #4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	9203      	str	r2, [sp, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	bfb8      	it	lt
 8004492:	f04f 33ff 	movlt.w	r3, #4294967295
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004564 <_svfiprintf_r+0x1fc>
 800449c:	2203      	movs	r2, #3
 800449e:	4650      	mov	r0, sl
 80044a0:	7821      	ldrb	r1, [r4, #0]
 80044a2:	f000 f9f7 	bl	8004894 <memchr>
 80044a6:	b140      	cbz	r0, 80044ba <_svfiprintf_r+0x152>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	eba0 000a 	sub.w	r0, r0, sl
 80044ae:	fa03 f000 	lsl.w	r0, r3, r0
 80044b2:	9b04      	ldr	r3, [sp, #16]
 80044b4:	3401      	adds	r4, #1
 80044b6:	4303      	orrs	r3, r0
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044be:	2206      	movs	r2, #6
 80044c0:	4825      	ldr	r0, [pc, #148]	; (8004558 <_svfiprintf_r+0x1f0>)
 80044c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044c6:	f000 f9e5 	bl	8004894 <memchr>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d038      	beq.n	8004540 <_svfiprintf_r+0x1d8>
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <_svfiprintf_r+0x1f4>)
 80044d0:	bb1b      	cbnz	r3, 800451a <_svfiprintf_r+0x1b2>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	3307      	adds	r3, #7
 80044d6:	f023 0307 	bic.w	r3, r3, #7
 80044da:	3308      	adds	r3, #8
 80044dc:	9303      	str	r3, [sp, #12]
 80044de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e0:	4433      	add	r3, r6
 80044e2:	9309      	str	r3, [sp, #36]	; 0x24
 80044e4:	e767      	b.n	80043b6 <_svfiprintf_r+0x4e>
 80044e6:	460c      	mov	r4, r1
 80044e8:	2001      	movs	r0, #1
 80044ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80044ee:	e7a5      	b.n	800443c <_svfiprintf_r+0xd4>
 80044f0:	2300      	movs	r3, #0
 80044f2:	f04f 0c0a 	mov.w	ip, #10
 80044f6:	4619      	mov	r1, r3
 80044f8:	3401      	adds	r4, #1
 80044fa:	9305      	str	r3, [sp, #20]
 80044fc:	4620      	mov	r0, r4
 80044fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004502:	3a30      	subs	r2, #48	; 0x30
 8004504:	2a09      	cmp	r2, #9
 8004506:	d903      	bls.n	8004510 <_svfiprintf_r+0x1a8>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0c5      	beq.n	8004498 <_svfiprintf_r+0x130>
 800450c:	9105      	str	r1, [sp, #20]
 800450e:	e7c3      	b.n	8004498 <_svfiprintf_r+0x130>
 8004510:	4604      	mov	r4, r0
 8004512:	2301      	movs	r3, #1
 8004514:	fb0c 2101 	mla	r1, ip, r1, r2
 8004518:	e7f0      	b.n	80044fc <_svfiprintf_r+0x194>
 800451a:	ab03      	add	r3, sp, #12
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	462a      	mov	r2, r5
 8004520:	4638      	mov	r0, r7
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <_svfiprintf_r+0x1f8>)
 8004524:	a904      	add	r1, sp, #16
 8004526:	f3af 8000 	nop.w
 800452a:	1c42      	adds	r2, r0, #1
 800452c:	4606      	mov	r6, r0
 800452e:	d1d6      	bne.n	80044de <_svfiprintf_r+0x176>
 8004530:	89ab      	ldrh	r3, [r5, #12]
 8004532:	065b      	lsls	r3, r3, #25
 8004534:	f53f af2c 	bmi.w	8004390 <_svfiprintf_r+0x28>
 8004538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800453a:	b01d      	add	sp, #116	; 0x74
 800453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004540:	ab03      	add	r3, sp, #12
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	462a      	mov	r2, r5
 8004546:	4638      	mov	r0, r7
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <_svfiprintf_r+0x1f8>)
 800454a:	a904      	add	r1, sp, #16
 800454c:	f000 f87c 	bl	8004648 <_printf_i>
 8004550:	e7eb      	b.n	800452a <_svfiprintf_r+0x1c2>
 8004552:	bf00      	nop
 8004554:	08005af8 	.word	0x08005af8
 8004558:	08005b02 	.word	0x08005b02
 800455c:	00000000 	.word	0x00000000
 8004560:	080042b1 	.word	0x080042b1
 8004564:	08005afe 	.word	0x08005afe

08004568 <_printf_common>:
 8004568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	4616      	mov	r6, r2
 800456e:	4699      	mov	r9, r3
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	4607      	mov	r7, r0
 8004576:	4293      	cmp	r3, r2
 8004578:	bfb8      	it	lt
 800457a:	4613      	movlt	r3, r2
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004582:	460c      	mov	r4, r1
 8004584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004588:	b10a      	cbz	r2, 800458e <_printf_common+0x26>
 800458a:	3301      	adds	r3, #1
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	bf42      	ittt	mi
 8004594:	6833      	ldrmi	r3, [r6, #0]
 8004596:	3302      	addmi	r3, #2
 8004598:	6033      	strmi	r3, [r6, #0]
 800459a:	6825      	ldr	r5, [r4, #0]
 800459c:	f015 0506 	ands.w	r5, r5, #6
 80045a0:	d106      	bne.n	80045b0 <_printf_common+0x48>
 80045a2:	f104 0a19 	add.w	sl, r4, #25
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	6832      	ldr	r2, [r6, #0]
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dc28      	bgt.n	8004602 <_printf_common+0x9a>
 80045b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b4:	1e13      	subs	r3, r2, #0
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	bf18      	it	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	0692      	lsls	r2, r2, #26
 80045be:	d42d      	bmi.n	800461c <_printf_common+0xb4>
 80045c0:	4649      	mov	r1, r9
 80045c2:	4638      	mov	r0, r7
 80045c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c8:	47c0      	blx	r8
 80045ca:	3001      	adds	r0, #1
 80045cc:	d020      	beq.n	8004610 <_printf_common+0xa8>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	68e5      	ldr	r5, [r4, #12]
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf18      	it	ne
 80045da:	2500      	movne	r5, #0
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	f04f 0600 	mov.w	r6, #0
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	bf08      	it	eq
 80045e6:	1aad      	subeq	r5, r5, r2
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	bf08      	it	eq
 80045ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bfc4      	itt	gt
 80045f4:	1a9b      	subgt	r3, r3, r2
 80045f6:	18ed      	addgt	r5, r5, r3
 80045f8:	341a      	adds	r4, #26
 80045fa:	42b5      	cmp	r5, r6
 80045fc:	d11a      	bne.n	8004634 <_printf_common+0xcc>
 80045fe:	2000      	movs	r0, #0
 8004600:	e008      	b.n	8004614 <_printf_common+0xac>
 8004602:	2301      	movs	r3, #1
 8004604:	4652      	mov	r2, sl
 8004606:	4649      	mov	r1, r9
 8004608:	4638      	mov	r0, r7
 800460a:	47c0      	blx	r8
 800460c:	3001      	adds	r0, #1
 800460e:	d103      	bne.n	8004618 <_printf_common+0xb0>
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004618:	3501      	adds	r5, #1
 800461a:	e7c4      	b.n	80045a6 <_printf_common+0x3e>
 800461c:	2030      	movs	r0, #48	; 0x30
 800461e:	18e1      	adds	r1, r4, r3
 8004620:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800462a:	4422      	add	r2, r4
 800462c:	3302      	adds	r3, #2
 800462e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004632:	e7c5      	b.n	80045c0 <_printf_common+0x58>
 8004634:	2301      	movs	r3, #1
 8004636:	4622      	mov	r2, r4
 8004638:	4649      	mov	r1, r9
 800463a:	4638      	mov	r0, r7
 800463c:	47c0      	blx	r8
 800463e:	3001      	adds	r0, #1
 8004640:	d0e6      	beq.n	8004610 <_printf_common+0xa8>
 8004642:	3601      	adds	r6, #1
 8004644:	e7d9      	b.n	80045fa <_printf_common+0x92>
	...

08004648 <_printf_i>:
 8004648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800464c:	460c      	mov	r4, r1
 800464e:	7e27      	ldrb	r7, [r4, #24]
 8004650:	4691      	mov	r9, r2
 8004652:	2f78      	cmp	r7, #120	; 0x78
 8004654:	4680      	mov	r8, r0
 8004656:	469a      	mov	sl, r3
 8004658:	990c      	ldr	r1, [sp, #48]	; 0x30
 800465a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800465e:	d807      	bhi.n	8004670 <_printf_i+0x28>
 8004660:	2f62      	cmp	r7, #98	; 0x62
 8004662:	d80a      	bhi.n	800467a <_printf_i+0x32>
 8004664:	2f00      	cmp	r7, #0
 8004666:	f000 80d9 	beq.w	800481c <_printf_i+0x1d4>
 800466a:	2f58      	cmp	r7, #88	; 0x58
 800466c:	f000 80a4 	beq.w	80047b8 <_printf_i+0x170>
 8004670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004678:	e03a      	b.n	80046f0 <_printf_i+0xa8>
 800467a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800467e:	2b15      	cmp	r3, #21
 8004680:	d8f6      	bhi.n	8004670 <_printf_i+0x28>
 8004682:	a001      	add	r0, pc, #4	; (adr r0, 8004688 <_printf_i+0x40>)
 8004684:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004688:	080046e1 	.word	0x080046e1
 800468c:	080046f5 	.word	0x080046f5
 8004690:	08004671 	.word	0x08004671
 8004694:	08004671 	.word	0x08004671
 8004698:	08004671 	.word	0x08004671
 800469c:	08004671 	.word	0x08004671
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	08004671 	.word	0x08004671
 80046a8:	08004671 	.word	0x08004671
 80046ac:	08004671 	.word	0x08004671
 80046b0:	08004671 	.word	0x08004671
 80046b4:	08004803 	.word	0x08004803
 80046b8:	08004725 	.word	0x08004725
 80046bc:	080047e5 	.word	0x080047e5
 80046c0:	08004671 	.word	0x08004671
 80046c4:	08004671 	.word	0x08004671
 80046c8:	08004825 	.word	0x08004825
 80046cc:	08004671 	.word	0x08004671
 80046d0:	08004725 	.word	0x08004725
 80046d4:	08004671 	.word	0x08004671
 80046d8:	08004671 	.word	0x08004671
 80046dc:	080047ed 	.word	0x080047ed
 80046e0:	680b      	ldr	r3, [r1, #0]
 80046e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	600a      	str	r2, [r1, #0]
 80046ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0a4      	b.n	800483e <_printf_i+0x1f6>
 80046f4:	6825      	ldr	r5, [r4, #0]
 80046f6:	6808      	ldr	r0, [r1, #0]
 80046f8:	062e      	lsls	r6, r5, #24
 80046fa:	f100 0304 	add.w	r3, r0, #4
 80046fe:	d50a      	bpl.n	8004716 <_printf_i+0xce>
 8004700:	6805      	ldr	r5, [r0, #0]
 8004702:	600b      	str	r3, [r1, #0]
 8004704:	2d00      	cmp	r5, #0
 8004706:	da03      	bge.n	8004710 <_printf_i+0xc8>
 8004708:	232d      	movs	r3, #45	; 0x2d
 800470a:	426d      	negs	r5, r5
 800470c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004710:	230a      	movs	r3, #10
 8004712:	485e      	ldr	r0, [pc, #376]	; (800488c <_printf_i+0x244>)
 8004714:	e019      	b.n	800474a <_printf_i+0x102>
 8004716:	f015 0f40 	tst.w	r5, #64	; 0x40
 800471a:	6805      	ldr	r5, [r0, #0]
 800471c:	600b      	str	r3, [r1, #0]
 800471e:	bf18      	it	ne
 8004720:	b22d      	sxthne	r5, r5
 8004722:	e7ef      	b.n	8004704 <_printf_i+0xbc>
 8004724:	680b      	ldr	r3, [r1, #0]
 8004726:	6825      	ldr	r5, [r4, #0]
 8004728:	1d18      	adds	r0, r3, #4
 800472a:	6008      	str	r0, [r1, #0]
 800472c:	0628      	lsls	r0, r5, #24
 800472e:	d501      	bpl.n	8004734 <_printf_i+0xec>
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	e002      	b.n	800473a <_printf_i+0xf2>
 8004734:	0669      	lsls	r1, r5, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0xe8>
 8004738:	881d      	ldrh	r5, [r3, #0]
 800473a:	2f6f      	cmp	r7, #111	; 0x6f
 800473c:	bf0c      	ite	eq
 800473e:	2308      	moveq	r3, #8
 8004740:	230a      	movne	r3, #10
 8004742:	4852      	ldr	r0, [pc, #328]	; (800488c <_printf_i+0x244>)
 8004744:	2100      	movs	r1, #0
 8004746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474a:	6866      	ldr	r6, [r4, #4]
 800474c:	2e00      	cmp	r6, #0
 800474e:	bfa8      	it	ge
 8004750:	6821      	ldrge	r1, [r4, #0]
 8004752:	60a6      	str	r6, [r4, #8]
 8004754:	bfa4      	itt	ge
 8004756:	f021 0104 	bicge.w	r1, r1, #4
 800475a:	6021      	strge	r1, [r4, #0]
 800475c:	b90d      	cbnz	r5, 8004762 <_printf_i+0x11a>
 800475e:	2e00      	cmp	r6, #0
 8004760:	d04d      	beq.n	80047fe <_printf_i+0x1b6>
 8004762:	4616      	mov	r6, r2
 8004764:	fbb5 f1f3 	udiv	r1, r5, r3
 8004768:	fb03 5711 	mls	r7, r3, r1, r5
 800476c:	5dc7      	ldrb	r7, [r0, r7]
 800476e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004772:	462f      	mov	r7, r5
 8004774:	42bb      	cmp	r3, r7
 8004776:	460d      	mov	r5, r1
 8004778:	d9f4      	bls.n	8004764 <_printf_i+0x11c>
 800477a:	2b08      	cmp	r3, #8
 800477c:	d10b      	bne.n	8004796 <_printf_i+0x14e>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	07df      	lsls	r7, r3, #31
 8004782:	d508      	bpl.n	8004796 <_printf_i+0x14e>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	6861      	ldr	r1, [r4, #4]
 8004788:	4299      	cmp	r1, r3
 800478a:	bfde      	ittt	le
 800478c:	2330      	movle	r3, #48	; 0x30
 800478e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004792:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004796:	1b92      	subs	r2, r2, r6
 8004798:	6122      	str	r2, [r4, #16]
 800479a:	464b      	mov	r3, r9
 800479c:	4621      	mov	r1, r4
 800479e:	4640      	mov	r0, r8
 80047a0:	f8cd a000 	str.w	sl, [sp]
 80047a4:	aa03      	add	r2, sp, #12
 80047a6:	f7ff fedf 	bl	8004568 <_printf_common>
 80047aa:	3001      	adds	r0, #1
 80047ac:	d14c      	bne.n	8004848 <_printf_i+0x200>
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	b004      	add	sp, #16
 80047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b8:	4834      	ldr	r0, [pc, #208]	; (800488c <_printf_i+0x244>)
 80047ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047be:	680e      	ldr	r6, [r1, #0]
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80047c6:	061f      	lsls	r7, r3, #24
 80047c8:	600e      	str	r6, [r1, #0]
 80047ca:	d514      	bpl.n	80047f6 <_printf_i+0x1ae>
 80047cc:	07d9      	lsls	r1, r3, #31
 80047ce:	bf44      	itt	mi
 80047d0:	f043 0320 	orrmi.w	r3, r3, #32
 80047d4:	6023      	strmi	r3, [r4, #0]
 80047d6:	b91d      	cbnz	r5, 80047e0 <_printf_i+0x198>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f023 0320 	bic.w	r3, r3, #32
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	2310      	movs	r3, #16
 80047e2:	e7af      	b.n	8004744 <_printf_i+0xfc>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f043 0320 	orr.w	r3, r3, #32
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	2378      	movs	r3, #120	; 0x78
 80047ee:	4828      	ldr	r0, [pc, #160]	; (8004890 <_printf_i+0x248>)
 80047f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f4:	e7e3      	b.n	80047be <_printf_i+0x176>
 80047f6:	065e      	lsls	r6, r3, #25
 80047f8:	bf48      	it	mi
 80047fa:	b2ad      	uxthmi	r5, r5
 80047fc:	e7e6      	b.n	80047cc <_printf_i+0x184>
 80047fe:	4616      	mov	r6, r2
 8004800:	e7bb      	b.n	800477a <_printf_i+0x132>
 8004802:	680b      	ldr	r3, [r1, #0]
 8004804:	6826      	ldr	r6, [r4, #0]
 8004806:	1d1d      	adds	r5, r3, #4
 8004808:	6960      	ldr	r0, [r4, #20]
 800480a:	600d      	str	r5, [r1, #0]
 800480c:	0635      	lsls	r5, r6, #24
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	d501      	bpl.n	8004816 <_printf_i+0x1ce>
 8004812:	6018      	str	r0, [r3, #0]
 8004814:	e002      	b.n	800481c <_printf_i+0x1d4>
 8004816:	0671      	lsls	r1, r6, #25
 8004818:	d5fb      	bpl.n	8004812 <_printf_i+0x1ca>
 800481a:	8018      	strh	r0, [r3, #0]
 800481c:	2300      	movs	r3, #0
 800481e:	4616      	mov	r6, r2
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	e7ba      	b.n	800479a <_printf_i+0x152>
 8004824:	680b      	ldr	r3, [r1, #0]
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	600a      	str	r2, [r1, #0]
 800482a:	681e      	ldr	r6, [r3, #0]
 800482c:	2100      	movs	r1, #0
 800482e:	4630      	mov	r0, r6
 8004830:	6862      	ldr	r2, [r4, #4]
 8004832:	f000 f82f 	bl	8004894 <memchr>
 8004836:	b108      	cbz	r0, 800483c <_printf_i+0x1f4>
 8004838:	1b80      	subs	r0, r0, r6
 800483a:	6060      	str	r0, [r4, #4]
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	2300      	movs	r3, #0
 8004842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004846:	e7a8      	b.n	800479a <_printf_i+0x152>
 8004848:	4632      	mov	r2, r6
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	47d0      	blx	sl
 8004852:	3001      	adds	r0, #1
 8004854:	d0ab      	beq.n	80047ae <_printf_i+0x166>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	d413      	bmi.n	8004884 <_printf_i+0x23c>
 800485c:	68e0      	ldr	r0, [r4, #12]
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	4298      	cmp	r0, r3
 8004862:	bfb8      	it	lt
 8004864:	4618      	movlt	r0, r3
 8004866:	e7a4      	b.n	80047b2 <_printf_i+0x16a>
 8004868:	2301      	movs	r3, #1
 800486a:	4632      	mov	r2, r6
 800486c:	4649      	mov	r1, r9
 800486e:	4640      	mov	r0, r8
 8004870:	47d0      	blx	sl
 8004872:	3001      	adds	r0, #1
 8004874:	d09b      	beq.n	80047ae <_printf_i+0x166>
 8004876:	3501      	adds	r5, #1
 8004878:	68e3      	ldr	r3, [r4, #12]
 800487a:	9903      	ldr	r1, [sp, #12]
 800487c:	1a5b      	subs	r3, r3, r1
 800487e:	42ab      	cmp	r3, r5
 8004880:	dcf2      	bgt.n	8004868 <_printf_i+0x220>
 8004882:	e7eb      	b.n	800485c <_printf_i+0x214>
 8004884:	2500      	movs	r5, #0
 8004886:	f104 0619 	add.w	r6, r4, #25
 800488a:	e7f5      	b.n	8004878 <_printf_i+0x230>
 800488c:	08005b09 	.word	0x08005b09
 8004890:	08005b1a 	.word	0x08005b1a

08004894 <memchr>:
 8004894:	4603      	mov	r3, r0
 8004896:	b510      	push	{r4, lr}
 8004898:	b2c9      	uxtb	r1, r1
 800489a:	4402      	add	r2, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	d101      	bne.n	80048a6 <memchr+0x12>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e003      	b.n	80048ae <memchr+0x1a>
 80048a6:	7804      	ldrb	r4, [r0, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	428c      	cmp	r4, r1
 80048ac:	d1f6      	bne.n	800489c <memchr+0x8>
 80048ae:	bd10      	pop	{r4, pc}

080048b0 <_free_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4605      	mov	r5, r0
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d043      	beq.n	8004940 <_free_r+0x90>
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f0c      	subs	r4, r1, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfb8      	it	lt
 80048c2:	18e4      	addlt	r4, r4, r3
 80048c4:	f000 f8d0 	bl	8004a68 <__malloc_lock>
 80048c8:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <_free_r+0x94>)
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	4610      	mov	r0, r2
 80048ce:	b933      	cbnz	r3, 80048de <_free_r+0x2e>
 80048d0:	6063      	str	r3, [r4, #4]
 80048d2:	6014      	str	r4, [r2, #0]
 80048d4:	4628      	mov	r0, r5
 80048d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048da:	f000 b8cb 	b.w	8004a74 <__malloc_unlock>
 80048de:	42a3      	cmp	r3, r4
 80048e0:	d90a      	bls.n	80048f8 <_free_r+0x48>
 80048e2:	6821      	ldr	r1, [r4, #0]
 80048e4:	1862      	adds	r2, r4, r1
 80048e6:	4293      	cmp	r3, r2
 80048e8:	bf01      	itttt	eq
 80048ea:	681a      	ldreq	r2, [r3, #0]
 80048ec:	685b      	ldreq	r3, [r3, #4]
 80048ee:	1852      	addeq	r2, r2, r1
 80048f0:	6022      	streq	r2, [r4, #0]
 80048f2:	6063      	str	r3, [r4, #4]
 80048f4:	6004      	str	r4, [r0, #0]
 80048f6:	e7ed      	b.n	80048d4 <_free_r+0x24>
 80048f8:	461a      	mov	r2, r3
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	b10b      	cbz	r3, 8004902 <_free_r+0x52>
 80048fe:	42a3      	cmp	r3, r4
 8004900:	d9fa      	bls.n	80048f8 <_free_r+0x48>
 8004902:	6811      	ldr	r1, [r2, #0]
 8004904:	1850      	adds	r0, r2, r1
 8004906:	42a0      	cmp	r0, r4
 8004908:	d10b      	bne.n	8004922 <_free_r+0x72>
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	4401      	add	r1, r0
 800490e:	1850      	adds	r0, r2, r1
 8004910:	4283      	cmp	r3, r0
 8004912:	6011      	str	r1, [r2, #0]
 8004914:	d1de      	bne.n	80048d4 <_free_r+0x24>
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4401      	add	r1, r0
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	6053      	str	r3, [r2, #4]
 8004920:	e7d8      	b.n	80048d4 <_free_r+0x24>
 8004922:	d902      	bls.n	800492a <_free_r+0x7a>
 8004924:	230c      	movs	r3, #12
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	e7d4      	b.n	80048d4 <_free_r+0x24>
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	1821      	adds	r1, r4, r0
 800492e:	428b      	cmp	r3, r1
 8004930:	bf01      	itttt	eq
 8004932:	6819      	ldreq	r1, [r3, #0]
 8004934:	685b      	ldreq	r3, [r3, #4]
 8004936:	1809      	addeq	r1, r1, r0
 8004938:	6021      	streq	r1, [r4, #0]
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	6054      	str	r4, [r2, #4]
 800493e:	e7c9      	b.n	80048d4 <_free_r+0x24>
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	bf00      	nop
 8004944:	20000e98 	.word	0x20000e98

08004948 <_malloc_r>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	1ccd      	adds	r5, r1, #3
 800494c:	f025 0503 	bic.w	r5, r5, #3
 8004950:	3508      	adds	r5, #8
 8004952:	2d0c      	cmp	r5, #12
 8004954:	bf38      	it	cc
 8004956:	250c      	movcc	r5, #12
 8004958:	2d00      	cmp	r5, #0
 800495a:	4606      	mov	r6, r0
 800495c:	db01      	blt.n	8004962 <_malloc_r+0x1a>
 800495e:	42a9      	cmp	r1, r5
 8004960:	d903      	bls.n	800496a <_malloc_r+0x22>
 8004962:	230c      	movs	r3, #12
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	2000      	movs	r0, #0
 8004968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800496a:	f000 f87d 	bl	8004a68 <__malloc_lock>
 800496e:	4921      	ldr	r1, [pc, #132]	; (80049f4 <_malloc_r+0xac>)
 8004970:	680a      	ldr	r2, [r1, #0]
 8004972:	4614      	mov	r4, r2
 8004974:	b99c      	cbnz	r4, 800499e <_malloc_r+0x56>
 8004976:	4f20      	ldr	r7, [pc, #128]	; (80049f8 <_malloc_r+0xb0>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	b923      	cbnz	r3, 8004986 <_malloc_r+0x3e>
 800497c:	4621      	mov	r1, r4
 800497e:	4630      	mov	r0, r6
 8004980:	f000 f862 	bl	8004a48 <_sbrk_r>
 8004984:	6038      	str	r0, [r7, #0]
 8004986:	4629      	mov	r1, r5
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f85d 	bl	8004a48 <_sbrk_r>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d123      	bne.n	80049da <_malloc_r+0x92>
 8004992:	230c      	movs	r3, #12
 8004994:	4630      	mov	r0, r6
 8004996:	6033      	str	r3, [r6, #0]
 8004998:	f000 f86c 	bl	8004a74 <__malloc_unlock>
 800499c:	e7e3      	b.n	8004966 <_malloc_r+0x1e>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	1b5b      	subs	r3, r3, r5
 80049a2:	d417      	bmi.n	80049d4 <_malloc_r+0x8c>
 80049a4:	2b0b      	cmp	r3, #11
 80049a6:	d903      	bls.n	80049b0 <_malloc_r+0x68>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	441c      	add	r4, r3
 80049ac:	6025      	str	r5, [r4, #0]
 80049ae:	e004      	b.n	80049ba <_malloc_r+0x72>
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	42a2      	cmp	r2, r4
 80049b4:	bf0c      	ite	eq
 80049b6:	600b      	streq	r3, [r1, #0]
 80049b8:	6053      	strne	r3, [r2, #4]
 80049ba:	4630      	mov	r0, r6
 80049bc:	f000 f85a 	bl	8004a74 <__malloc_unlock>
 80049c0:	f104 000b 	add.w	r0, r4, #11
 80049c4:	1d23      	adds	r3, r4, #4
 80049c6:	f020 0007 	bic.w	r0, r0, #7
 80049ca:	1ac2      	subs	r2, r0, r3
 80049cc:	d0cc      	beq.n	8004968 <_malloc_r+0x20>
 80049ce:	1a1b      	subs	r3, r3, r0
 80049d0:	50a3      	str	r3, [r4, r2]
 80049d2:	e7c9      	b.n	8004968 <_malloc_r+0x20>
 80049d4:	4622      	mov	r2, r4
 80049d6:	6864      	ldr	r4, [r4, #4]
 80049d8:	e7cc      	b.n	8004974 <_malloc_r+0x2c>
 80049da:	1cc4      	adds	r4, r0, #3
 80049dc:	f024 0403 	bic.w	r4, r4, #3
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d0e3      	beq.n	80049ac <_malloc_r+0x64>
 80049e4:	1a21      	subs	r1, r4, r0
 80049e6:	4630      	mov	r0, r6
 80049e8:	f000 f82e 	bl	8004a48 <_sbrk_r>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d1dd      	bne.n	80049ac <_malloc_r+0x64>
 80049f0:	e7cf      	b.n	8004992 <_malloc_r+0x4a>
 80049f2:	bf00      	nop
 80049f4:	20000e98 	.word	0x20000e98
 80049f8:	20000e9c 	.word	0x20000e9c

080049fc <_realloc_r>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	4607      	mov	r7, r0
 8004a00:	4614      	mov	r4, r2
 8004a02:	460e      	mov	r6, r1
 8004a04:	b921      	cbnz	r1, 8004a10 <_realloc_r+0x14>
 8004a06:	4611      	mov	r1, r2
 8004a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a0c:	f7ff bf9c 	b.w	8004948 <_malloc_r>
 8004a10:	b922      	cbnz	r2, 8004a1c <_realloc_r+0x20>
 8004a12:	f7ff ff4d 	bl	80048b0 <_free_r>
 8004a16:	4625      	mov	r5, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1c:	f000 f830 	bl	8004a80 <_malloc_usable_size_r>
 8004a20:	42a0      	cmp	r0, r4
 8004a22:	d20f      	bcs.n	8004a44 <_realloc_r+0x48>
 8004a24:	4621      	mov	r1, r4
 8004a26:	4638      	mov	r0, r7
 8004a28:	f7ff ff8e 	bl	8004948 <_malloc_r>
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d0f2      	beq.n	8004a18 <_realloc_r+0x1c>
 8004a32:	4631      	mov	r1, r6
 8004a34:	4622      	mov	r2, r4
 8004a36:	f7ff fbeb 	bl	8004210 <memcpy>
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	f7ff ff37 	bl	80048b0 <_free_r>
 8004a42:	e7e9      	b.n	8004a18 <_realloc_r+0x1c>
 8004a44:	4635      	mov	r5, r6
 8004a46:	e7e7      	b.n	8004a18 <_realloc_r+0x1c>

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4d05      	ldr	r5, [pc, #20]	; (8004a64 <_sbrk_r+0x1c>)
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc ff62 	bl	800191c <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	200010b0 	.word	0x200010b0

08004a68 <__malloc_lock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_lock+0x8>)
 8004a6a:	f000 b811 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 8004a6e:	bf00      	nop
 8004a70:	200010b8 	.word	0x200010b8

08004a74 <__malloc_unlock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__malloc_unlock+0x8>)
 8004a76:	f000 b80c 	b.w	8004a92 <__retarget_lock_release_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	200010b8 	.word	0x200010b8

08004a80 <_malloc_usable_size_r>:
 8004a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a84:	1f18      	subs	r0, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bfbc      	itt	lt
 8004a8a:	580b      	ldrlt	r3, [r1, r0]
 8004a8c:	18c0      	addlt	r0, r0, r3
 8004a8e:	4770      	bx	lr

08004a90 <__retarget_lock_acquire_recursive>:
 8004a90:	4770      	bx	lr

08004a92 <__retarget_lock_release_recursive>:
 8004a92:	4770      	bx	lr

08004a94 <sin>:
 8004a94:	b530      	push	{r4, r5, lr}
 8004a96:	4a20      	ldr	r2, [pc, #128]	; (8004b18 <sin+0x84>)
 8004a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	dc06      	bgt.n	8004ab0 <sin+0x1c>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f000 fe31 	bl	8005710 <__kernel_sin>
 8004aae:	e006      	b.n	8004abe <sin+0x2a>
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <sin+0x88>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	dd05      	ble.n	8004ac2 <sin+0x2e>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	f7fb fb55 	bl	8000168 <__aeabi_dsub>
 8004abe:	b007      	add	sp, #28
 8004ac0:	bd30      	pop	{r4, r5, pc}
 8004ac2:	aa02      	add	r2, sp, #8
 8004ac4:	f000 f82c 	bl	8004b20 <__ieee754_rem_pio2>
 8004ac8:	f000 0003 	and.w	r0, r0, #3
 8004acc:	2801      	cmp	r0, #1
 8004ace:	d009      	beq.n	8004ae4 <sin+0x50>
 8004ad0:	2802      	cmp	r0, #2
 8004ad2:	d00e      	beq.n	8004af2 <sin+0x5e>
 8004ad4:	b9c0      	cbnz	r0, 8004b08 <sin+0x74>
 8004ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ada:	2301      	movs	r3, #1
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ae2:	e7e2      	b.n	8004aaa <sin+0x16>
 8004ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aec:	f000 fa08 	bl	8004f00 <__kernel_cos>
 8004af0:	e7e5      	b.n	8004abe <sin+0x2a>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afe:	f000 fe07 	bl	8005710 <__kernel_sin>
 8004b02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004b06:	e7da      	b.n	8004abe <sin+0x2a>
 8004b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b10:	f000 f9f6 	bl	8004f00 <__kernel_cos>
 8004b14:	e7f5      	b.n	8004b02 <sin+0x6e>
 8004b16:	bf00      	nop
 8004b18:	3fe921fb 	.word	0x3fe921fb
 8004b1c:	7fefffff 	.word	0x7fefffff

08004b20 <__ieee754_rem_pio2>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4614      	mov	r4, r2
 8004b26:	4ac4      	ldr	r2, [pc, #784]	; (8004e38 <__ieee754_rem_pio2+0x318>)
 8004b28:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004b2c:	b08d      	sub	sp, #52	; 0x34
 8004b2e:	4592      	cmp	sl, r2
 8004b30:	9104      	str	r1, [sp, #16]
 8004b32:	dc07      	bgt.n	8004b44 <__ieee754_rem_pio2+0x24>
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	e9c4 0100 	strd	r0, r1, [r4]
 8004b3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004b40:	2500      	movs	r5, #0
 8004b42:	e024      	b.n	8004b8e <__ieee754_rem_pio2+0x6e>
 8004b44:	4abd      	ldr	r2, [pc, #756]	; (8004e3c <__ieee754_rem_pio2+0x31c>)
 8004b46:	4592      	cmp	sl, r2
 8004b48:	dc72      	bgt.n	8004c30 <__ieee754_rem_pio2+0x110>
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	4dbc      	ldr	r5, [pc, #752]	; (8004e40 <__ieee754_rem_pio2+0x320>)
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	a3ab      	add	r3, pc, #684	; (adr r3, 8004e00 <__ieee754_rem_pio2+0x2e0>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	dd36      	ble.n	8004bc6 <__ieee754_rem_pio2+0xa6>
 8004b58:	f7fb fb06 	bl	8000168 <__aeabi_dsub>
 8004b5c:	45aa      	cmp	sl, r5
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460f      	mov	r7, r1
 8004b62:	d018      	beq.n	8004b96 <__ieee754_rem_pio2+0x76>
 8004b64:	a3a8      	add	r3, pc, #672	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2e8>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f7fb fafd 	bl	8000168 <__aeabi_dsub>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4630      	mov	r0, r6
 8004b74:	e9c4 2300 	strd	r2, r3, [r4]
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb faf5 	bl	8000168 <__aeabi_dsub>
 8004b7e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2e8>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb faf0 	bl	8000168 <__aeabi_dsub>
 8004b88:	2501      	movs	r5, #1
 8004b8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	b00d      	add	sp, #52	; 0x34
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b96:	a39e      	add	r3, pc, #632	; (adr r3, 8004e10 <__ieee754_rem_pio2+0x2f0>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f7fb fae4 	bl	8000168 <__aeabi_dsub>
 8004ba0:	a39d      	add	r3, pc, #628	; (adr r3, 8004e18 <__ieee754_rem_pio2+0x2f8>)
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	460f      	mov	r7, r1
 8004baa:	f7fb fadd 	bl	8000168 <__aeabi_dsub>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	e9c4 2300 	strd	r2, r3, [r4]
 8004bb8:	4639      	mov	r1, r7
 8004bba:	f7fb fad5 	bl	8000168 <__aeabi_dsub>
 8004bbe:	a396      	add	r3, pc, #600	; (adr r3, 8004e18 <__ieee754_rem_pio2+0x2f8>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	e7de      	b.n	8004b84 <__ieee754_rem_pio2+0x64>
 8004bc6:	f7fb fad1 	bl	800016c <__adddf3>
 8004bca:	45aa      	cmp	sl, r5
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	d016      	beq.n	8004c00 <__ieee754_rem_pio2+0xe0>
 8004bd2:	a38d      	add	r3, pc, #564	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2e8>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f7fb fac8 	bl	800016c <__adddf3>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4630      	mov	r0, r6
 8004be2:	e9c4 2300 	strd	r2, r3, [r4]
 8004be6:	4639      	mov	r1, r7
 8004be8:	f7fb fabe 	bl	8000168 <__aeabi_dsub>
 8004bec:	a386      	add	r3, pc, #536	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2e8>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fabb 	bl	800016c <__adddf3>
 8004bf6:	f04f 35ff 	mov.w	r5, #4294967295
 8004bfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bfe:	e7c6      	b.n	8004b8e <__ieee754_rem_pio2+0x6e>
 8004c00:	a383      	add	r3, pc, #524	; (adr r3, 8004e10 <__ieee754_rem_pio2+0x2f0>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f7fb fab1 	bl	800016c <__adddf3>
 8004c0a:	a383      	add	r3, pc, #524	; (adr r3, 8004e18 <__ieee754_rem_pio2+0x2f8>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	4606      	mov	r6, r0
 8004c12:	460f      	mov	r7, r1
 8004c14:	f7fb faaa 	bl	800016c <__adddf3>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	e9c4 2300 	strd	r2, r3, [r4]
 8004c22:	4639      	mov	r1, r7
 8004c24:	f7fb faa0 	bl	8000168 <__aeabi_dsub>
 8004c28:	a37b      	add	r3, pc, #492	; (adr r3, 8004e18 <__ieee754_rem_pio2+0x2f8>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	e7e0      	b.n	8004bf2 <__ieee754_rem_pio2+0xd2>
 8004c30:	4a84      	ldr	r2, [pc, #528]	; (8004e44 <__ieee754_rem_pio2+0x324>)
 8004c32:	4592      	cmp	sl, r2
 8004c34:	f300 80d5 	bgt.w	8004de2 <__ieee754_rem_pio2+0x2c2>
 8004c38:	f000 fe20 	bl	800587c <fabs>
 8004c3c:	a378      	add	r3, pc, #480	; (adr r3, 8004e20 <__ieee754_rem_pio2+0x300>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	4606      	mov	r6, r0
 8004c44:	460f      	mov	r7, r1
 8004c46:	f7fb fc47 	bl	80004d8 <__aeabi_dmul>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4b7e      	ldr	r3, [pc, #504]	; (8004e48 <__ieee754_rem_pio2+0x328>)
 8004c4e:	f7fb fa8d 	bl	800016c <__adddf3>
 8004c52:	f7fb fedb 	bl	8000a0c <__aeabi_d2iz>
 8004c56:	4605      	mov	r5, r0
 8004c58:	f7fb fbd4 	bl	8000404 <__aeabi_i2d>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c64:	a366      	add	r3, pc, #408	; (adr r3, 8004e00 <__ieee754_rem_pio2+0x2e0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fc35 	bl	80004d8 <__aeabi_dmul>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4630      	mov	r0, r6
 8004c74:	4639      	mov	r1, r7
 8004c76:	f7fb fa77 	bl	8000168 <__aeabi_dsub>
 8004c7a:	a363      	add	r3, pc, #396	; (adr r3, 8004e08 <__ieee754_rem_pio2+0x2e8>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	4680      	mov	r8, r0
 8004c82:	4689      	mov	r9, r1
 8004c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c88:	f7fb fc26 	bl	80004d8 <__aeabi_dmul>
 8004c8c:	2d1f      	cmp	r5, #31
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460f      	mov	r7, r1
 8004c92:	dc0e      	bgt.n	8004cb2 <__ieee754_rem_pio2+0x192>
 8004c94:	4b6d      	ldr	r3, [pc, #436]	; (8004e4c <__ieee754_rem_pio2+0x32c>)
 8004c96:	1e6a      	subs	r2, r5, #1
 8004c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9c:	4553      	cmp	r3, sl
 8004c9e:	d008      	beq.n	8004cb2 <__ieee754_rem_pio2+0x192>
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb fa5e 	bl	8000168 <__aeabi_dsub>
 8004cac:	e9c4 0100 	strd	r0, r1, [r4]
 8004cb0:	e013      	b.n	8004cda <__ieee754_rem_pio2+0x1ba>
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	4649      	mov	r1, r9
 8004cba:	f7fb fa55 	bl	8000168 <__aeabi_dsub>
 8004cbe:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004cc2:	9305      	str	r3, [sp, #20]
 8004cc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004cc8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8004ccc:	f1ba 0f10 	cmp.w	sl, #16
 8004cd0:	dc1f      	bgt.n	8004d12 <__ieee754_rem_pio2+0x1f2>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	e9c4 2300 	strd	r2, r3, [r4]
 8004cda:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4653      	mov	r3, sl
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb fa40 	bl	8000168 <__aeabi_dsub>
 8004ce8:	4632      	mov	r2, r6
 8004cea:	463b      	mov	r3, r7
 8004cec:	f7fb fa3c 	bl	8000168 <__aeabi_dsub>
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cf6:	9904      	ldr	r1, [sp, #16]
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	f6bf af47 	bge.w	8004b8e <__ieee754_rem_pio2+0x6e>
 8004d00:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004d04:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004d08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	60e3      	str	r3, [r4, #12]
 8004d0e:	426d      	negs	r5, r5
 8004d10:	e73d      	b.n	8004b8e <__ieee754_rem_pio2+0x6e>
 8004d12:	a33f      	add	r3, pc, #252	; (adr r3, 8004e10 <__ieee754_rem_pio2+0x2f0>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d1c:	f7fb fbdc 	bl	80004d8 <__aeabi_dmul>
 8004d20:	4606      	mov	r6, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	f7fb fa1c 	bl	8000168 <__aeabi_dsub>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4682      	mov	sl, r0
 8004d36:	468b      	mov	fp, r1
 8004d38:	4640      	mov	r0, r8
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	f7fb fa14 	bl	8000168 <__aeabi_dsub>
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	f7fb fa10 	bl	8000168 <__aeabi_dsub>
 8004d48:	a333      	add	r3, pc, #204	; (adr r3, 8004e18 <__ieee754_rem_pio2+0x2f8>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d56:	f7fb fbbf 	bl	80004d8 <__aeabi_dmul>
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	f7fb fa03 	bl	8000168 <__aeabi_dsub>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4606      	mov	r6, r0
 8004d68:	460f      	mov	r7, r1
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	f7fb f9fb 	bl	8000168 <__aeabi_dsub>
 8004d72:	9a05      	ldr	r2, [sp, #20]
 8004d74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b31      	cmp	r3, #49	; 0x31
 8004d7c:	dc06      	bgt.n	8004d8c <__ieee754_rem_pio2+0x26c>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	46d0      	mov	r8, sl
 8004d84:	46d9      	mov	r9, fp
 8004d86:	e9c4 2300 	strd	r2, r3, [r4]
 8004d8a:	e7a6      	b.n	8004cda <__ieee754_rem_pio2+0x1ba>
 8004d8c:	a326      	add	r3, pc, #152	; (adr r3, 8004e28 <__ieee754_rem_pio2+0x308>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d96:	f7fb fb9f 	bl	80004d8 <__aeabi_dmul>
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	460f      	mov	r7, r1
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4650      	mov	r0, sl
 8004da4:	4659      	mov	r1, fp
 8004da6:	f7fb f9df 	bl	8000168 <__aeabi_dsub>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4680      	mov	r8, r0
 8004db0:	4689      	mov	r9, r1
 8004db2:	4650      	mov	r0, sl
 8004db4:	4659      	mov	r1, fp
 8004db6:	f7fb f9d7 	bl	8000168 <__aeabi_dsub>
 8004dba:	4632      	mov	r2, r6
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	f7fb f9d3 	bl	8000168 <__aeabi_dsub>
 8004dc2:	a31b      	add	r3, pc, #108	; (adr r3, 8004e30 <__ieee754_rem_pio2+0x310>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	4606      	mov	r6, r0
 8004dca:	460f      	mov	r7, r1
 8004dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dd0:	f7fb fb82 	bl	80004d8 <__aeabi_dmul>
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	f7fb f9c6 	bl	8000168 <__aeabi_dsub>
 8004ddc:	4606      	mov	r6, r0
 8004dde:	460f      	mov	r7, r1
 8004de0:	e75e      	b.n	8004ca0 <__ieee754_rem_pio2+0x180>
 8004de2:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <__ieee754_rem_pio2+0x330>)
 8004de4:	4592      	cmp	sl, r2
 8004de6:	dd35      	ble.n	8004e54 <__ieee754_rem_pio2+0x334>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	f7fb f9bc 	bl	8000168 <__aeabi_dsub>
 8004df0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004df4:	e9c4 0100 	strd	r0, r1, [r4]
 8004df8:	e6a2      	b.n	8004b40 <__ieee754_rem_pio2+0x20>
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w
 8004e00:	54400000 	.word	0x54400000
 8004e04:	3ff921fb 	.word	0x3ff921fb
 8004e08:	1a626331 	.word	0x1a626331
 8004e0c:	3dd0b461 	.word	0x3dd0b461
 8004e10:	1a600000 	.word	0x1a600000
 8004e14:	3dd0b461 	.word	0x3dd0b461
 8004e18:	2e037073 	.word	0x2e037073
 8004e1c:	3ba3198a 	.word	0x3ba3198a
 8004e20:	6dc9c883 	.word	0x6dc9c883
 8004e24:	3fe45f30 	.word	0x3fe45f30
 8004e28:	2e000000 	.word	0x2e000000
 8004e2c:	3ba3198a 	.word	0x3ba3198a
 8004e30:	252049c1 	.word	0x252049c1
 8004e34:	397b839a 	.word	0x397b839a
 8004e38:	3fe921fb 	.word	0x3fe921fb
 8004e3c:	4002d97b 	.word	0x4002d97b
 8004e40:	3ff921fb 	.word	0x3ff921fb
 8004e44:	413921fb 	.word	0x413921fb
 8004e48:	3fe00000 	.word	0x3fe00000
 8004e4c:	08005b2c 	.word	0x08005b2c
 8004e50:	7fefffff 	.word	0x7fefffff
 8004e54:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004e58:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004e5c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004e60:	460f      	mov	r7, r1
 8004e62:	4606      	mov	r6, r0
 8004e64:	f7fb fdd2 	bl	8000a0c <__aeabi_d2iz>
 8004e68:	f7fb facc 	bl	8000404 <__aeabi_i2d>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4630      	mov	r0, r6
 8004e72:	4639      	mov	r1, r7
 8004e74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e78:	f7fb f976 	bl	8000168 <__aeabi_dsub>
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <__ieee754_rem_pio2+0x3d8>)
 8004e80:	f7fb fb2a 	bl	80004d8 <__aeabi_dmul>
 8004e84:	460f      	mov	r7, r1
 8004e86:	4606      	mov	r6, r0
 8004e88:	f7fb fdc0 	bl	8000a0c <__aeabi_d2iz>
 8004e8c:	f7fb faba 	bl	8000404 <__aeabi_i2d>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e9c:	f7fb f964 	bl	8000168 <__aeabi_dsub>
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <__ieee754_rem_pio2+0x3d8>)
 8004ea4:	f7fb fb18 	bl	80004d8 <__aeabi_dmul>
 8004ea8:	f04f 0803 	mov.w	r8, #3
 8004eac:	2600      	movs	r6, #0
 8004eae:	2700      	movs	r7, #0
 8004eb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004eb4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004eb8:	4632      	mov	r2, r6
 8004eba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	46c2      	mov	sl, r8
 8004ec2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ec6:	f7fb fd6f 	bl	80009a8 <__aeabi_dcmpeq>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1f4      	bne.n	8004eb8 <__ieee754_rem_pio2+0x398>
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <__ieee754_rem_pio2+0x3dc>)
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	a806      	add	r0, sp, #24
 8004edc:	4653      	mov	r3, sl
 8004ede:	f000 f8cd 	bl	800507c <__kernel_rem_pio2>
 8004ee2:	9b04      	ldr	r3, [sp, #16]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f6bf ae51 	bge.w	8004b8e <__ieee754_rem_pio2+0x6e>
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	68e3      	ldr	r3, [r4, #12]
 8004ef6:	e707      	b.n	8004d08 <__ieee754_rem_pio2+0x1e8>
 8004ef8:	41700000 	.word	0x41700000
 8004efc:	08005bac 	.word	0x08005bac

08004f00 <__kernel_cos>:
 8004f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004f08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	460f      	mov	r7, r1
 8004f10:	e9cd 2300 	strd	r2, r3, [sp]
 8004f14:	da04      	bge.n	8004f20 <__kernel_cos+0x20>
 8004f16:	f7fb fd79 	bl	8000a0c <__aeabi_d2iz>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f000 8086 	beq.w	800502c <__kernel_cos+0x12c>
 8004f20:	4642      	mov	r2, r8
 8004f22:	463b      	mov	r3, r7
 8004f24:	4640      	mov	r0, r8
 8004f26:	4639      	mov	r1, r7
 8004f28:	f7fb fad6 	bl	80004d8 <__aeabi_dmul>
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4b4e      	ldr	r3, [pc, #312]	; (8005068 <__kernel_cos+0x168>)
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	f7fb fad0 	bl	80004d8 <__aeabi_dmul>
 8004f38:	a33f      	add	r3, pc, #252	; (adr r3, 8005038 <__kernel_cos+0x138>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	4682      	mov	sl, r0
 8004f40:	468b      	mov	fp, r1
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7fb fac7 	bl	80004d8 <__aeabi_dmul>
 8004f4a:	a33d      	add	r3, pc, #244	; (adr r3, 8005040 <__kernel_cos+0x140>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f7fb f90c 	bl	800016c <__adddf3>
 8004f54:	4622      	mov	r2, r4
 8004f56:	462b      	mov	r3, r5
 8004f58:	f7fb fabe 	bl	80004d8 <__aeabi_dmul>
 8004f5c:	a33a      	add	r3, pc, #232	; (adr r3, 8005048 <__kernel_cos+0x148>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb f901 	bl	8000168 <__aeabi_dsub>
 8004f66:	4622      	mov	r2, r4
 8004f68:	462b      	mov	r3, r5
 8004f6a:	f7fb fab5 	bl	80004d8 <__aeabi_dmul>
 8004f6e:	a338      	add	r3, pc, #224	; (adr r3, 8005050 <__kernel_cos+0x150>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f7fb f8fa 	bl	800016c <__adddf3>
 8004f78:	4622      	mov	r2, r4
 8004f7a:	462b      	mov	r3, r5
 8004f7c:	f7fb faac 	bl	80004d8 <__aeabi_dmul>
 8004f80:	a335      	add	r3, pc, #212	; (adr r3, 8005058 <__kernel_cos+0x158>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb f8ef 	bl	8000168 <__aeabi_dsub>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	f7fb faa3 	bl	80004d8 <__aeabi_dmul>
 8004f92:	a333      	add	r3, pc, #204	; (adr r3, 8005060 <__kernel_cos+0x160>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb f8e8 	bl	800016c <__adddf3>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	f7fb fa9a 	bl	80004d8 <__aeabi_dmul>
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	f7fb fa96 	bl	80004d8 <__aeabi_dmul>
 8004fac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb fa8e 	bl	80004d8 <__aeabi_dmul>
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7fb f8d0 	bl	8000168 <__aeabi_dsub>
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <__kernel_cos+0x16c>)
 8004fca:	4680      	mov	r8, r0
 8004fcc:	429e      	cmp	r6, r3
 8004fce:	4689      	mov	r9, r1
 8004fd0:	dc0e      	bgt.n	8004ff0 <__kernel_cos+0xf0>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4650      	mov	r0, sl
 8004fd8:	4659      	mov	r1, fp
 8004fda:	f7fb f8c5 	bl	8000168 <__aeabi_dsub>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4922      	ldr	r1, [pc, #136]	; (8005070 <__kernel_cos+0x170>)
 8004fe6:	f7fb f8bf 	bl	8000168 <__aeabi_dsub>
 8004fea:	b003      	add	sp, #12
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	2400      	movs	r4, #0
 8004ff2:	4b20      	ldr	r3, [pc, #128]	; (8005074 <__kernel_cos+0x174>)
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	429e      	cmp	r6, r3
 8004ff8:	bfcc      	ite	gt
 8004ffa:	4d1f      	ldrgt	r5, [pc, #124]	; (8005078 <__kernel_cos+0x178>)
 8004ffc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005000:	462b      	mov	r3, r5
 8005002:	2000      	movs	r0, #0
 8005004:	491a      	ldr	r1, [pc, #104]	; (8005070 <__kernel_cos+0x170>)
 8005006:	f7fb f8af 	bl	8000168 <__aeabi_dsub>
 800500a:	4622      	mov	r2, r4
 800500c:	4606      	mov	r6, r0
 800500e:	460f      	mov	r7, r1
 8005010:	462b      	mov	r3, r5
 8005012:	4650      	mov	r0, sl
 8005014:	4659      	mov	r1, fp
 8005016:	f7fb f8a7 	bl	8000168 <__aeabi_dsub>
 800501a:	4642      	mov	r2, r8
 800501c:	464b      	mov	r3, r9
 800501e:	f7fb f8a3 	bl	8000168 <__aeabi_dsub>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4630      	mov	r0, r6
 8005028:	4639      	mov	r1, r7
 800502a:	e7dc      	b.n	8004fe6 <__kernel_cos+0xe6>
 800502c:	2000      	movs	r0, #0
 800502e:	4910      	ldr	r1, [pc, #64]	; (8005070 <__kernel_cos+0x170>)
 8005030:	e7db      	b.n	8004fea <__kernel_cos+0xea>
 8005032:	bf00      	nop
 8005034:	f3af 8000 	nop.w
 8005038:	be8838d4 	.word	0xbe8838d4
 800503c:	bda8fae9 	.word	0xbda8fae9
 8005040:	bdb4b1c4 	.word	0xbdb4b1c4
 8005044:	3e21ee9e 	.word	0x3e21ee9e
 8005048:	809c52ad 	.word	0x809c52ad
 800504c:	3e927e4f 	.word	0x3e927e4f
 8005050:	19cb1590 	.word	0x19cb1590
 8005054:	3efa01a0 	.word	0x3efa01a0
 8005058:	16c15177 	.word	0x16c15177
 800505c:	3f56c16c 	.word	0x3f56c16c
 8005060:	5555554c 	.word	0x5555554c
 8005064:	3fa55555 	.word	0x3fa55555
 8005068:	3fe00000 	.word	0x3fe00000
 800506c:	3fd33332 	.word	0x3fd33332
 8005070:	3ff00000 	.word	0x3ff00000
 8005074:	3fe90000 	.word	0x3fe90000
 8005078:	3fd20000 	.word	0x3fd20000

0800507c <__kernel_rem_pio2>:
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005084:	9308      	str	r3, [sp, #32]
 8005086:	9101      	str	r1, [sp, #4]
 8005088:	4bc0      	ldr	r3, [pc, #768]	; (800538c <__kernel_rem_pio2+0x310>)
 800508a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800508c:	f112 0f14 	cmn.w	r2, #20
 8005090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005094:	bfa8      	it	ge
 8005096:	1ed4      	subge	r4, r2, #3
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	9b08      	ldr	r3, [sp, #32]
 800509c:	bfb8      	it	lt
 800509e:	2400      	movlt	r4, #0
 80050a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80050a4:	9306      	str	r3, [sp, #24]
 80050a6:	bfa4      	itt	ge
 80050a8:	2318      	movge	r3, #24
 80050aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80050ae:	f06f 0317 	mvn.w	r3, #23
 80050b2:	fb04 3303 	mla	r3, r4, r3, r3
 80050b6:	eb03 0a02 	add.w	sl, r3, r2
 80050ba:	9a06      	ldr	r2, [sp, #24]
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	1aa7      	subs	r7, r4, r2
 80050c0:	eb03 0802 	add.w	r8, r3, r2
 80050c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80050c6:	2500      	movs	r5, #0
 80050c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80050cc:	2200      	movs	r2, #0
 80050ce:	2300      	movs	r3, #0
 80050d0:	9009      	str	r0, [sp, #36]	; 0x24
 80050d2:	ae20      	add	r6, sp, #128	; 0x80
 80050d4:	4545      	cmp	r5, r8
 80050d6:	dd19      	ble.n	800510c <__kernel_rem_pio2+0x90>
 80050d8:	9b08      	ldr	r3, [sp, #32]
 80050da:	aa20      	add	r2, sp, #128	; 0x80
 80050dc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80050e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80050e4:	f1c3 0301 	rsb	r3, r3, #1
 80050e8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80050ec:	9307      	str	r3, [sp, #28]
 80050ee:	9b07      	ldr	r3, [sp, #28]
 80050f0:	9a04      	ldr	r2, [sp, #16]
 80050f2:	4443      	add	r3, r8
 80050f4:	429a      	cmp	r2, r3
 80050f6:	db35      	blt.n	8005164 <__kernel_rem_pio2+0xe8>
 80050f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fa:	2200      	movs	r2, #0
 80050fc:	f1a3 0908 	sub.w	r9, r3, #8
 8005100:	2300      	movs	r3, #0
 8005102:	462f      	mov	r7, r5
 8005104:	2600      	movs	r6, #0
 8005106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800510a:	e01f      	b.n	800514c <__kernel_rem_pio2+0xd0>
 800510c:	42ef      	cmn	r7, r5
 800510e:	d40b      	bmi.n	8005128 <__kernel_rem_pio2+0xac>
 8005110:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005118:	f7fb f974 	bl	8000404 <__aeabi_i2d>
 800511c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005120:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005124:	3501      	adds	r5, #1
 8005126:	e7d5      	b.n	80050d4 <__kernel_rem_pio2+0x58>
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	e7f8      	b.n	8005120 <__kernel_rem_pio2+0xa4>
 800512e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005132:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005136:	f7fb f9cf 	bl	80004d8 <__aeabi_dmul>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005142:	f7fb f813 	bl	800016c <__adddf3>
 8005146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800514a:	3601      	adds	r6, #1
 800514c:	9b06      	ldr	r3, [sp, #24]
 800514e:	3f08      	subs	r7, #8
 8005150:	429e      	cmp	r6, r3
 8005152:	ddec      	ble.n	800512e <__kernel_rem_pio2+0xb2>
 8005154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005158:	3508      	adds	r5, #8
 800515a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800515e:	f108 0801 	add.w	r8, r8, #1
 8005162:	e7c4      	b.n	80050ee <__kernel_rem_pio2+0x72>
 8005164:	9b04      	ldr	r3, [sp, #16]
 8005166:	aa0c      	add	r2, sp, #48	; 0x30
 8005168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800516c:	930b      	str	r3, [sp, #44]	; 0x2c
 800516e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005170:	9f04      	ldr	r7, [sp, #16]
 8005172:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005176:	930a      	str	r3, [sp, #40]	; 0x28
 8005178:	463e      	mov	r6, r7
 800517a:	ab98      	add	r3, sp, #608	; 0x260
 800517c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005180:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005184:	f8cd b008 	str.w	fp, [sp, #8]
 8005188:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800518c:	2e00      	cmp	r6, #0
 800518e:	dc71      	bgt.n	8005274 <__kernel_rem_pio2+0x1f8>
 8005190:	4652      	mov	r2, sl
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	f000 fbf7 	bl	8005988 <scalbn>
 800519a:	2200      	movs	r2, #0
 800519c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80051a0:	4604      	mov	r4, r0
 80051a2:	460d      	mov	r5, r1
 80051a4:	f7fb f998 	bl	80004d8 <__aeabi_dmul>
 80051a8:	f000 fb6e 	bl	8005888 <floor>
 80051ac:	2200      	movs	r2, #0
 80051ae:	4b78      	ldr	r3, [pc, #480]	; (8005390 <__kernel_rem_pio2+0x314>)
 80051b0:	f7fb f992 	bl	80004d8 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fa ffd4 	bl	8000168 <__aeabi_dsub>
 80051c0:	460d      	mov	r5, r1
 80051c2:	4604      	mov	r4, r0
 80051c4:	f7fb fc22 	bl	8000a0c <__aeabi_d2iz>
 80051c8:	9007      	str	r0, [sp, #28]
 80051ca:	f7fb f91b 	bl	8000404 <__aeabi_i2d>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f7fa ffc7 	bl	8000168 <__aeabi_dsub>
 80051da:	f1ba 0f00 	cmp.w	sl, #0
 80051de:	4680      	mov	r8, r0
 80051e0:	4689      	mov	r9, r1
 80051e2:	dd70      	ble.n	80052c6 <__kernel_rem_pio2+0x24a>
 80051e4:	1e7a      	subs	r2, r7, #1
 80051e6:	ab0c      	add	r3, sp, #48	; 0x30
 80051e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80051ec:	9c07      	ldr	r4, [sp, #28]
 80051ee:	f1ca 0118 	rsb	r1, sl, #24
 80051f2:	fa40 f301 	asr.w	r3, r0, r1
 80051f6:	441c      	add	r4, r3
 80051f8:	408b      	lsls	r3, r1
 80051fa:	1ac0      	subs	r0, r0, r3
 80051fc:	ab0c      	add	r3, sp, #48	; 0x30
 80051fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005202:	f1ca 0317 	rsb	r3, sl, #23
 8005206:	9407      	str	r4, [sp, #28]
 8005208:	fa40 f303 	asr.w	r3, r0, r3
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	9b02      	ldr	r3, [sp, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dd66      	ble.n	80052e2 <__kernel_rem_pio2+0x266>
 8005214:	2200      	movs	r2, #0
 8005216:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800521a:	4614      	mov	r4, r2
 800521c:	9b07      	ldr	r3, [sp, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	4297      	cmp	r7, r2
 8005224:	f300 809f 	bgt.w	8005366 <__kernel_rem_pio2+0x2ea>
 8005228:	f1ba 0f00 	cmp.w	sl, #0
 800522c:	dd07      	ble.n	800523e <__kernel_rem_pio2+0x1c2>
 800522e:	f1ba 0f01 	cmp.w	sl, #1
 8005232:	f000 80b9 	beq.w	80053a8 <__kernel_rem_pio2+0x32c>
 8005236:	f1ba 0f02 	cmp.w	sl, #2
 800523a:	f000 80bf 	beq.w	80053bc <__kernel_rem_pio2+0x340>
 800523e:	9b02      	ldr	r3, [sp, #8]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d14e      	bne.n	80052e2 <__kernel_rem_pio2+0x266>
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	2000      	movs	r0, #0
 800524a:	4952      	ldr	r1, [pc, #328]	; (8005394 <__kernel_rem_pio2+0x318>)
 800524c:	f7fa ff8c 	bl	8000168 <__aeabi_dsub>
 8005250:	4680      	mov	r8, r0
 8005252:	4689      	mov	r9, r1
 8005254:	2c00      	cmp	r4, #0
 8005256:	d044      	beq.n	80052e2 <__kernel_rem_pio2+0x266>
 8005258:	4652      	mov	r2, sl
 800525a:	2000      	movs	r0, #0
 800525c:	494d      	ldr	r1, [pc, #308]	; (8005394 <__kernel_rem_pio2+0x318>)
 800525e:	f000 fb93 	bl	8005988 <scalbn>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4640      	mov	r0, r8
 8005268:	4649      	mov	r1, r9
 800526a:	f7fa ff7d 	bl	8000168 <__aeabi_dsub>
 800526e:	4680      	mov	r8, r0
 8005270:	4689      	mov	r9, r1
 8005272:	e036      	b.n	80052e2 <__kernel_rem_pio2+0x266>
 8005274:	2200      	movs	r2, #0
 8005276:	4b48      	ldr	r3, [pc, #288]	; (8005398 <__kernel_rem_pio2+0x31c>)
 8005278:	4620      	mov	r0, r4
 800527a:	4629      	mov	r1, r5
 800527c:	f7fb f92c 	bl	80004d8 <__aeabi_dmul>
 8005280:	f7fb fbc4 	bl	8000a0c <__aeabi_d2iz>
 8005284:	f7fb f8be 	bl	8000404 <__aeabi_i2d>
 8005288:	2200      	movs	r2, #0
 800528a:	4b44      	ldr	r3, [pc, #272]	; (800539c <__kernel_rem_pio2+0x320>)
 800528c:	4680      	mov	r8, r0
 800528e:	4689      	mov	r9, r1
 8005290:	f7fb f922 	bl	80004d8 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fa ff64 	bl	8000168 <__aeabi_dsub>
 80052a0:	f7fb fbb4 	bl	8000a0c <__aeabi_d2iz>
 80052a4:	9b02      	ldr	r3, [sp, #8]
 80052a6:	3e01      	subs	r6, #1
 80052a8:	f843 0b04 	str.w	r0, [r3], #4
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80052b0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80052b4:	4640      	mov	r0, r8
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	4649      	mov	r1, r9
 80052bc:	f7fa ff56 	bl	800016c <__adddf3>
 80052c0:	4604      	mov	r4, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	e762      	b.n	800518c <__kernel_rem_pio2+0x110>
 80052c6:	d105      	bne.n	80052d4 <__kernel_rem_pio2+0x258>
 80052c8:	1e7b      	subs	r3, r7, #1
 80052ca:	aa0c      	add	r2, sp, #48	; 0x30
 80052cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80052d0:	15c3      	asrs	r3, r0, #23
 80052d2:	e79b      	b.n	800520c <__kernel_rem_pio2+0x190>
 80052d4:	2200      	movs	r2, #0
 80052d6:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <__kernel_rem_pio2+0x324>)
 80052d8:	f7fb fb84 	bl	80009e4 <__aeabi_dcmpge>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d13f      	bne.n	8005360 <__kernel_rem_pio2+0x2e4>
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	4640      	mov	r0, r8
 80052e8:	4649      	mov	r1, r9
 80052ea:	f7fb fb5d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f000 80b5 	beq.w	800545e <__kernel_rem_pio2+0x3e2>
 80052f4:	1e7c      	subs	r4, r7, #1
 80052f6:	4623      	mov	r3, r4
 80052f8:	2200      	movs	r2, #0
 80052fa:	9904      	ldr	r1, [sp, #16]
 80052fc:	428b      	cmp	r3, r1
 80052fe:	da64      	bge.n	80053ca <__kernel_rem_pio2+0x34e>
 8005300:	2a00      	cmp	r2, #0
 8005302:	d078      	beq.n	80053f6 <__kernel_rem_pio2+0x37a>
 8005304:	ab0c      	add	r3, sp, #48	; 0x30
 8005306:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800530a:	f1aa 0a18 	sub.w	sl, sl, #24
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80a3 	beq.w	800545a <__kernel_rem_pio2+0x3de>
 8005314:	4652      	mov	r2, sl
 8005316:	2000      	movs	r0, #0
 8005318:	491e      	ldr	r1, [pc, #120]	; (8005394 <__kernel_rem_pio2+0x318>)
 800531a:	f000 fb35 	bl	8005988 <scalbn>
 800531e:	46a2      	mov	sl, r4
 8005320:	4606      	mov	r6, r0
 8005322:	460f      	mov	r7, r1
 8005324:	f04f 0800 	mov.w	r8, #0
 8005328:	00e3      	lsls	r3, r4, #3
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005398 <__kernel_rem_pio2+0x31c>
 8005330:	ab70      	add	r3, sp, #448	; 0x1c0
 8005332:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005336:	f1ba 0f00 	cmp.w	sl, #0
 800533a:	f280 80c6 	bge.w	80054ca <__kernel_rem_pio2+0x44e>
 800533e:	4627      	mov	r7, r4
 8005340:	f04f 0800 	mov.w	r8, #0
 8005344:	2f00      	cmp	r7, #0
 8005346:	f2c0 80f3 	blt.w	8005530 <__kernel_rem_pio2+0x4b4>
 800534a:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <__kernel_rem_pio2+0x328>)
 800534c:	f04f 0a00 	mov.w	sl, #0
 8005350:	461d      	mov	r5, r3
 8005352:	ab70      	add	r3, sp, #448	; 0x1c0
 8005354:	f04f 0b00 	mov.w	fp, #0
 8005358:	2600      	movs	r6, #0
 800535a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800535e:	e0d9      	b.n	8005514 <__kernel_rem_pio2+0x498>
 8005360:	2302      	movs	r3, #2
 8005362:	9302      	str	r3, [sp, #8]
 8005364:	e756      	b.n	8005214 <__kernel_rem_pio2+0x198>
 8005366:	f8db 3000 	ldr.w	r3, [fp]
 800536a:	b954      	cbnz	r4, 8005382 <__kernel_rem_pio2+0x306>
 800536c:	b123      	cbz	r3, 8005378 <__kernel_rem_pio2+0x2fc>
 800536e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005372:	f8cb 3000 	str.w	r3, [fp]
 8005376:	2301      	movs	r3, #1
 8005378:	461c      	mov	r4, r3
 800537a:	3201      	adds	r2, #1
 800537c:	f10b 0b04 	add.w	fp, fp, #4
 8005380:	e74f      	b.n	8005222 <__kernel_rem_pio2+0x1a6>
 8005382:	1acb      	subs	r3, r1, r3
 8005384:	f8cb 3000 	str.w	r3, [fp]
 8005388:	4623      	mov	r3, r4
 800538a:	e7f5      	b.n	8005378 <__kernel_rem_pio2+0x2fc>
 800538c:	08005cf8 	.word	0x08005cf8
 8005390:	40200000 	.word	0x40200000
 8005394:	3ff00000 	.word	0x3ff00000
 8005398:	3e700000 	.word	0x3e700000
 800539c:	41700000 	.word	0x41700000
 80053a0:	3fe00000 	.word	0x3fe00000
 80053a4:	08005cb8 	.word	0x08005cb8
 80053a8:	1e7a      	subs	r2, r7, #1
 80053aa:	ab0c      	add	r3, sp, #48	; 0x30
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80053b4:	a90c      	add	r1, sp, #48	; 0x30
 80053b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80053ba:	e740      	b.n	800523e <__kernel_rem_pio2+0x1c2>
 80053bc:	1e7a      	subs	r2, r7, #1
 80053be:	ab0c      	add	r3, sp, #48	; 0x30
 80053c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80053c8:	e7f4      	b.n	80053b4 <__kernel_rem_pio2+0x338>
 80053ca:	a90c      	add	r1, sp, #48	; 0x30
 80053cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	430a      	orrs	r2, r1
 80053d4:	e791      	b.n	80052fa <__kernel_rem_pio2+0x27e>
 80053d6:	3401      	adds	r4, #1
 80053d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d0fa      	beq.n	80053d6 <__kernel_rem_pio2+0x35a>
 80053e0:	9b08      	ldr	r3, [sp, #32]
 80053e2:	1c7e      	adds	r6, r7, #1
 80053e4:	18fd      	adds	r5, r7, r3
 80053e6:	ab20      	add	r3, sp, #128	; 0x80
 80053e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80053ec:	443c      	add	r4, r7
 80053ee:	42b4      	cmp	r4, r6
 80053f0:	da04      	bge.n	80053fc <__kernel_rem_pio2+0x380>
 80053f2:	4627      	mov	r7, r4
 80053f4:	e6c0      	b.n	8005178 <__kernel_rem_pio2+0xfc>
 80053f6:	2401      	movs	r4, #1
 80053f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053fa:	e7ed      	b.n	80053d8 <__kernel_rem_pio2+0x35c>
 80053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fe:	462f      	mov	r7, r5
 8005400:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005404:	f7fa fffe 	bl	8000404 <__aeabi_i2d>
 8005408:	f04f 0b00 	mov.w	fp, #0
 800540c:	f04f 0800 	mov.w	r8, #0
 8005410:	f04f 0900 	mov.w	r9, #0
 8005414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005416:	e8e7 0102 	strd	r0, r1, [r7], #8
 800541a:	3b08      	subs	r3, #8
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	9b06      	ldr	r3, [sp, #24]
 8005420:	459b      	cmp	fp, r3
 8005422:	dd07      	ble.n	8005434 <__kernel_rem_pio2+0x3b8>
 8005424:	ab70      	add	r3, sp, #448	; 0x1c0
 8005426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800542a:	463d      	mov	r5, r7
 800542c:	e9c3 8900 	strd	r8, r9, [r3]
 8005430:	3601      	adds	r6, #1
 8005432:	e7dc      	b.n	80053ee <__kernel_rem_pio2+0x372>
 8005434:	9902      	ldr	r1, [sp, #8]
 8005436:	f10b 0b01 	add.w	fp, fp, #1
 800543a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800543e:	9102      	str	r1, [sp, #8]
 8005440:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8005444:	f7fb f848 	bl	80004d8 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4640      	mov	r0, r8
 800544e:	4649      	mov	r1, r9
 8005450:	f7fa fe8c 	bl	800016c <__adddf3>
 8005454:	4680      	mov	r8, r0
 8005456:	4689      	mov	r9, r1
 8005458:	e7e1      	b.n	800541e <__kernel_rem_pio2+0x3a2>
 800545a:	3c01      	subs	r4, #1
 800545c:	e752      	b.n	8005304 <__kernel_rem_pio2+0x288>
 800545e:	f1ca 0200 	rsb	r2, sl, #0
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f000 fa8f 	bl	8005988 <scalbn>
 800546a:	2200      	movs	r2, #0
 800546c:	4ba5      	ldr	r3, [pc, #660]	; (8005704 <__kernel_rem_pio2+0x688>)
 800546e:	4604      	mov	r4, r0
 8005470:	460d      	mov	r5, r1
 8005472:	f7fb fab7 	bl	80009e4 <__aeabi_dcmpge>
 8005476:	b1f8      	cbz	r0, 80054b8 <__kernel_rem_pio2+0x43c>
 8005478:	2200      	movs	r2, #0
 800547a:	4ba3      	ldr	r3, [pc, #652]	; (8005708 <__kernel_rem_pio2+0x68c>)
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	f7fb f82a 	bl	80004d8 <__aeabi_dmul>
 8005484:	f7fb fac2 	bl	8000a0c <__aeabi_d2iz>
 8005488:	4606      	mov	r6, r0
 800548a:	f7fa ffbb 	bl	8000404 <__aeabi_i2d>
 800548e:	2200      	movs	r2, #0
 8005490:	4b9c      	ldr	r3, [pc, #624]	; (8005704 <__kernel_rem_pio2+0x688>)
 8005492:	f7fb f821 	bl	80004d8 <__aeabi_dmul>
 8005496:	460b      	mov	r3, r1
 8005498:	4602      	mov	r2, r0
 800549a:	4629      	mov	r1, r5
 800549c:	4620      	mov	r0, r4
 800549e:	f7fa fe63 	bl	8000168 <__aeabi_dsub>
 80054a2:	f7fb fab3 	bl	8000a0c <__aeabi_d2iz>
 80054a6:	1c7c      	adds	r4, r7, #1
 80054a8:	ab0c      	add	r3, sp, #48	; 0x30
 80054aa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80054ae:	f10a 0a18 	add.w	sl, sl, #24
 80054b2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80054b6:	e72d      	b.n	8005314 <__kernel_rem_pio2+0x298>
 80054b8:	4620      	mov	r0, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	f7fb faa6 	bl	8000a0c <__aeabi_d2iz>
 80054c0:	ab0c      	add	r3, sp, #48	; 0x30
 80054c2:	463c      	mov	r4, r7
 80054c4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80054c8:	e724      	b.n	8005314 <__kernel_rem_pio2+0x298>
 80054ca:	ab0c      	add	r3, sp, #48	; 0x30
 80054cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80054d0:	f7fa ff98 	bl	8000404 <__aeabi_i2d>
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	f7fa fffe 	bl	80004d8 <__aeabi_dmul>
 80054dc:	4642      	mov	r2, r8
 80054de:	e86b 0102 	strd	r0, r1, [fp], #-8
 80054e2:	464b      	mov	r3, r9
 80054e4:	4630      	mov	r0, r6
 80054e6:	4639      	mov	r1, r7
 80054e8:	f7fa fff6 	bl	80004d8 <__aeabi_dmul>
 80054ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054f0:	4606      	mov	r6, r0
 80054f2:	460f      	mov	r7, r1
 80054f4:	e71f      	b.n	8005336 <__kernel_rem_pio2+0x2ba>
 80054f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80054fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80054fe:	f7fa ffeb 	bl	80004d8 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4650      	mov	r0, sl
 8005508:	4659      	mov	r1, fp
 800550a:	f7fa fe2f 	bl	800016c <__adddf3>
 800550e:	4682      	mov	sl, r0
 8005510:	468b      	mov	fp, r1
 8005512:	3601      	adds	r6, #1
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	429e      	cmp	r6, r3
 8005518:	dc01      	bgt.n	800551e <__kernel_rem_pio2+0x4a2>
 800551a:	45b0      	cmp	r8, r6
 800551c:	daeb      	bge.n	80054f6 <__kernel_rem_pio2+0x47a>
 800551e:	ab48      	add	r3, sp, #288	; 0x120
 8005520:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005524:	e9c3 ab00 	strd	sl, fp, [r3]
 8005528:	3f01      	subs	r7, #1
 800552a:	f108 0801 	add.w	r8, r8, #1
 800552e:	e709      	b.n	8005344 <__kernel_rem_pio2+0x2c8>
 8005530:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005532:	2b02      	cmp	r3, #2
 8005534:	dc09      	bgt.n	800554a <__kernel_rem_pio2+0x4ce>
 8005536:	2b00      	cmp	r3, #0
 8005538:	dc34      	bgt.n	80055a4 <__kernel_rem_pio2+0x528>
 800553a:	d05e      	beq.n	80055fa <__kernel_rem_pio2+0x57e>
 800553c:	9b07      	ldr	r3, [sp, #28]
 800553e:	f003 0007 	and.w	r0, r3, #7
 8005542:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800554c:	2b03      	cmp	r3, #3
 800554e:	d1f5      	bne.n	800553c <__kernel_rem_pio2+0x4c0>
 8005550:	9a06      	ldr	r2, [sp, #24]
 8005552:	ab48      	add	r3, sp, #288	; 0x120
 8005554:	441a      	add	r2, r3
 8005556:	4615      	mov	r5, r2
 8005558:	4692      	mov	sl, r2
 800555a:	46a3      	mov	fp, r4
 800555c:	f1bb 0f00 	cmp.w	fp, #0
 8005560:	dc7a      	bgt.n	8005658 <__kernel_rem_pio2+0x5dc>
 8005562:	46aa      	mov	sl, r5
 8005564:	46a3      	mov	fp, r4
 8005566:	f1bb 0f01 	cmp.w	fp, #1
 800556a:	f300 8094 	bgt.w	8005696 <__kernel_rem_pio2+0x61a>
 800556e:	2700      	movs	r7, #0
 8005570:	463e      	mov	r6, r7
 8005572:	2c01      	cmp	r4, #1
 8005574:	f300 80ae 	bgt.w	80056d4 <__kernel_rem_pio2+0x658>
 8005578:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800557c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 80b0 	bne.w	80056e8 <__kernel_rem_pio2+0x66c>
 8005588:	4603      	mov	r3, r0
 800558a:	462a      	mov	r2, r5
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	e9c0 2300 	strd	r2, r3, [r0]
 8005592:	4622      	mov	r2, r4
 8005594:	460b      	mov	r3, r1
 8005596:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800559a:	463a      	mov	r2, r7
 800559c:	4633      	mov	r3, r6
 800559e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80055a2:	e7cb      	b.n	800553c <__kernel_rem_pio2+0x4c0>
 80055a4:	2000      	movs	r0, #0
 80055a6:	9a06      	ldr	r2, [sp, #24]
 80055a8:	ab48      	add	r3, sp, #288	; 0x120
 80055aa:	441a      	add	r2, r3
 80055ac:	4615      	mov	r5, r2
 80055ae:	46a0      	mov	r8, r4
 80055b0:	4601      	mov	r1, r0
 80055b2:	f1b8 0f00 	cmp.w	r8, #0
 80055b6:	da3c      	bge.n	8005632 <__kernel_rem_pio2+0x5b6>
 80055b8:	9b02      	ldr	r3, [sp, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d040      	beq.n	8005640 <__kernel_rem_pio2+0x5c4>
 80055be:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80055c2:	4602      	mov	r2, r0
 80055c4:	462b      	mov	r3, r5
 80055c6:	9d01      	ldr	r5, [sp, #4]
 80055c8:	2601      	movs	r6, #1
 80055ca:	e9c5 2300 	strd	r2, r3, [r5]
 80055ce:	460b      	mov	r3, r1
 80055d0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80055d4:	f7fa fdc8 	bl	8000168 <__aeabi_dsub>
 80055d8:	4684      	mov	ip, r0
 80055da:	460f      	mov	r7, r1
 80055dc:	ad48      	add	r5, sp, #288	; 0x120
 80055de:	42b4      	cmp	r4, r6
 80055e0:	f105 0508 	add.w	r5, r5, #8
 80055e4:	da2e      	bge.n	8005644 <__kernel_rem_pio2+0x5c8>
 80055e6:	9b02      	ldr	r3, [sp, #8]
 80055e8:	b10b      	cbz	r3, 80055ee <__kernel_rem_pio2+0x572>
 80055ea:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80055ee:	4662      	mov	r2, ip
 80055f0:	463b      	mov	r3, r7
 80055f2:	9901      	ldr	r1, [sp, #4]
 80055f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80055f8:	e7a0      	b.n	800553c <__kernel_rem_pio2+0x4c0>
 80055fa:	9a06      	ldr	r2, [sp, #24]
 80055fc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80055fe:	ab48      	add	r3, sp, #288	; 0x120
 8005600:	441a      	add	r2, r3
 8005602:	4615      	mov	r5, r2
 8005604:	4637      	mov	r7, r6
 8005606:	2c00      	cmp	r4, #0
 8005608:	da09      	bge.n	800561e <__kernel_rem_pio2+0x5a2>
 800560a:	9b02      	ldr	r3, [sp, #8]
 800560c:	b10b      	cbz	r3, 8005612 <__kernel_rem_pio2+0x596>
 800560e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005612:	4632      	mov	r2, r6
 8005614:	463b      	mov	r3, r7
 8005616:	9901      	ldr	r1, [sp, #4]
 8005618:	e9c1 2300 	strd	r2, r3, [r1]
 800561c:	e78e      	b.n	800553c <__kernel_rem_pio2+0x4c0>
 800561e:	4630      	mov	r0, r6
 8005620:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005624:	4639      	mov	r1, r7
 8005626:	f7fa fda1 	bl	800016c <__adddf3>
 800562a:	3c01      	subs	r4, #1
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	e7e9      	b.n	8005606 <__kernel_rem_pio2+0x58a>
 8005632:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005636:	f7fa fd99 	bl	800016c <__adddf3>
 800563a:	f108 38ff 	add.w	r8, r8, #4294967295
 800563e:	e7b8      	b.n	80055b2 <__kernel_rem_pio2+0x536>
 8005640:	460d      	mov	r5, r1
 8005642:	e7be      	b.n	80055c2 <__kernel_rem_pio2+0x546>
 8005644:	4660      	mov	r0, ip
 8005646:	e9d5 2300 	ldrd	r2, r3, [r5]
 800564a:	4639      	mov	r1, r7
 800564c:	f7fa fd8e 	bl	800016c <__adddf3>
 8005650:	3601      	adds	r6, #1
 8005652:	4684      	mov	ip, r0
 8005654:	460f      	mov	r7, r1
 8005656:	e7c2      	b.n	80055de <__kernel_rem_pio2+0x562>
 8005658:	e9da 6700 	ldrd	r6, r7, [sl]
 800565c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005660:	4632      	mov	r2, r6
 8005662:	463b      	mov	r3, r7
 8005664:	4640      	mov	r0, r8
 8005666:	4649      	mov	r1, r9
 8005668:	f7fa fd80 	bl	800016c <__adddf3>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005674:	4640      	mov	r0, r8
 8005676:	4649      	mov	r1, r9
 8005678:	f7fa fd76 	bl	8000168 <__aeabi_dsub>
 800567c:	4632      	mov	r2, r6
 800567e:	463b      	mov	r3, r7
 8005680:	f7fa fd74 	bl	800016c <__adddf3>
 8005684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005688:	e86a 0102 	strd	r0, r1, [sl], #-8
 800568c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005690:	e9ca 2300 	strd	r2, r3, [sl]
 8005694:	e762      	b.n	800555c <__kernel_rem_pio2+0x4e0>
 8005696:	e9da 8900 	ldrd	r8, r9, [sl]
 800569a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800569e:	4642      	mov	r2, r8
 80056a0:	464b      	mov	r3, r9
 80056a2:	4630      	mov	r0, r6
 80056a4:	4639      	mov	r1, r7
 80056a6:	f7fa fd61 	bl	800016c <__adddf3>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	f7fa fd57 	bl	8000168 <__aeabi_dsub>
 80056ba:	4642      	mov	r2, r8
 80056bc:	464b      	mov	r3, r9
 80056be:	f7fa fd55 	bl	800016c <__adddf3>
 80056c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c6:	e86a 0102 	strd	r0, r1, [sl], #-8
 80056ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056ce:	e9ca 2300 	strd	r2, r3, [sl]
 80056d2:	e748      	b.n	8005566 <__kernel_rem_pio2+0x4ea>
 80056d4:	4638      	mov	r0, r7
 80056d6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80056da:	4631      	mov	r1, r6
 80056dc:	f7fa fd46 	bl	800016c <__adddf3>
 80056e0:	3c01      	subs	r4, #1
 80056e2:	4607      	mov	r7, r0
 80056e4:	460e      	mov	r6, r1
 80056e6:	e744      	b.n	8005572 <__kernel_rem_pio2+0x4f6>
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80056ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80056f2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80056f6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80056fa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80056fe:	601d      	str	r5, [r3, #0]
 8005700:	615e      	str	r6, [r3, #20]
 8005702:	e71b      	b.n	800553c <__kernel_rem_pio2+0x4c0>
 8005704:	41700000 	.word	0x41700000
 8005708:	3e700000 	.word	0x3e700000
 800570c:	00000000 	.word	0x00000000

08005710 <__kernel_sin>:
 8005710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	e9cd 2300 	strd	r2, r3, [sp]
 800571a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800571e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005722:	4682      	mov	sl, r0
 8005724:	460c      	mov	r4, r1
 8005726:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005728:	da03      	bge.n	8005732 <__kernel_sin+0x22>
 800572a:	f7fb f96f 	bl	8000a0c <__aeabi_d2iz>
 800572e:	2800      	cmp	r0, #0
 8005730:	d050      	beq.n	80057d4 <__kernel_sin+0xc4>
 8005732:	4652      	mov	r2, sl
 8005734:	4623      	mov	r3, r4
 8005736:	4650      	mov	r0, sl
 8005738:	4621      	mov	r1, r4
 800573a:	f7fa fecd 	bl	80004d8 <__aeabi_dmul>
 800573e:	4606      	mov	r6, r0
 8005740:	460f      	mov	r7, r1
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4650      	mov	r0, sl
 8005748:	4621      	mov	r1, r4
 800574a:	f7fa fec5 	bl	80004d8 <__aeabi_dmul>
 800574e:	a33e      	add	r3, pc, #248	; (adr r3, 8005848 <__kernel_sin+0x138>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	4680      	mov	r8, r0
 8005756:	4689      	mov	r9, r1
 8005758:	4630      	mov	r0, r6
 800575a:	4639      	mov	r1, r7
 800575c:	f7fa febc 	bl	80004d8 <__aeabi_dmul>
 8005760:	a33b      	add	r3, pc, #236	; (adr r3, 8005850 <__kernel_sin+0x140>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa fcff 	bl	8000168 <__aeabi_dsub>
 800576a:	4632      	mov	r2, r6
 800576c:	463b      	mov	r3, r7
 800576e:	f7fa feb3 	bl	80004d8 <__aeabi_dmul>
 8005772:	a339      	add	r3, pc, #228	; (adr r3, 8005858 <__kernel_sin+0x148>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fcf8 	bl	800016c <__adddf3>
 800577c:	4632      	mov	r2, r6
 800577e:	463b      	mov	r3, r7
 8005780:	f7fa feaa 	bl	80004d8 <__aeabi_dmul>
 8005784:	a336      	add	r3, pc, #216	; (adr r3, 8005860 <__kernel_sin+0x150>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fced 	bl	8000168 <__aeabi_dsub>
 800578e:	4632      	mov	r2, r6
 8005790:	463b      	mov	r3, r7
 8005792:	f7fa fea1 	bl	80004d8 <__aeabi_dmul>
 8005796:	a334      	add	r3, pc, #208	; (adr r3, 8005868 <__kernel_sin+0x158>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fce6 	bl	800016c <__adddf3>
 80057a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a4:	b9dd      	cbnz	r5, 80057de <__kernel_sin+0xce>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4630      	mov	r0, r6
 80057ac:	4639      	mov	r1, r7
 80057ae:	f7fa fe93 	bl	80004d8 <__aeabi_dmul>
 80057b2:	a32f      	add	r3, pc, #188	; (adr r3, 8005870 <__kernel_sin+0x160>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fcd6 	bl	8000168 <__aeabi_dsub>
 80057bc:	4642      	mov	r2, r8
 80057be:	464b      	mov	r3, r9
 80057c0:	f7fa fe8a 	bl	80004d8 <__aeabi_dmul>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4650      	mov	r0, sl
 80057ca:	4621      	mov	r1, r4
 80057cc:	f7fa fcce 	bl	800016c <__adddf3>
 80057d0:	4682      	mov	sl, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4650      	mov	r0, sl
 80057d6:	4621      	mov	r1, r4
 80057d8:	b006      	add	sp, #24
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	2200      	movs	r2, #0
 80057e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057e4:	4b24      	ldr	r3, [pc, #144]	; (8005878 <__kernel_sin+0x168>)
 80057e6:	f7fa fe77 	bl	80004d8 <__aeabi_dmul>
 80057ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005802:	f7fa fcb1 	bl	8000168 <__aeabi_dsub>
 8005806:	4632      	mov	r2, r6
 8005808:	463b      	mov	r3, r7
 800580a:	f7fa fe65 	bl	80004d8 <__aeabi_dmul>
 800580e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005812:	f7fa fca9 	bl	8000168 <__aeabi_dsub>
 8005816:	a316      	add	r3, pc, #88	; (adr r3, 8005870 <__kernel_sin+0x160>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	4606      	mov	r6, r0
 800581e:	460f      	mov	r7, r1
 8005820:	4640      	mov	r0, r8
 8005822:	4649      	mov	r1, r9
 8005824:	f7fa fe58 	bl	80004d8 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fa fc9c 	bl	800016c <__adddf3>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4650      	mov	r0, sl
 800583a:	4621      	mov	r1, r4
 800583c:	f7fa fc94 	bl	8000168 <__aeabi_dsub>
 8005840:	e7c6      	b.n	80057d0 <__kernel_sin+0xc0>
 8005842:	bf00      	nop
 8005844:	f3af 8000 	nop.w
 8005848:	5acfd57c 	.word	0x5acfd57c
 800584c:	3de5d93a 	.word	0x3de5d93a
 8005850:	8a2b9ceb 	.word	0x8a2b9ceb
 8005854:	3e5ae5e6 	.word	0x3e5ae5e6
 8005858:	57b1fe7d 	.word	0x57b1fe7d
 800585c:	3ec71de3 	.word	0x3ec71de3
 8005860:	19c161d5 	.word	0x19c161d5
 8005864:	3f2a01a0 	.word	0x3f2a01a0
 8005868:	1110f8a6 	.word	0x1110f8a6
 800586c:	3f811111 	.word	0x3f811111
 8005870:	55555549 	.word	0x55555549
 8005874:	3fc55555 	.word	0x3fc55555
 8005878:	3fe00000 	.word	0x3fe00000

0800587c <fabs>:
 800587c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005880:	4770      	bx	lr
 8005882:	0000      	movs	r0, r0
 8005884:	0000      	movs	r0, r0
	...

08005888 <floor>:
 8005888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800588c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005890:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005894:	2e13      	cmp	r6, #19
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4607      	mov	r7, r0
 800589c:	460c      	mov	r4, r1
 800589e:	4605      	mov	r5, r0
 80058a0:	dc34      	bgt.n	800590c <floor+0x84>
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	da15      	bge.n	80058d2 <floor+0x4a>
 80058a6:	a334      	add	r3, pc, #208	; (adr r3, 8005978 <floor+0xf0>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fc5e 	bl	800016c <__adddf3>
 80058b0:	2200      	movs	r2, #0
 80058b2:	2300      	movs	r3, #0
 80058b4:	f7fb f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 80058b8:	b140      	cbz	r0, 80058cc <floor+0x44>
 80058ba:	2c00      	cmp	r4, #0
 80058bc:	da59      	bge.n	8005972 <floor+0xea>
 80058be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80058c2:	ea57 0503 	orrs.w	r5, r7, r3
 80058c6:	d001      	beq.n	80058cc <floor+0x44>
 80058c8:	2500      	movs	r5, #0
 80058ca:	4c2d      	ldr	r4, [pc, #180]	; (8005980 <floor+0xf8>)
 80058cc:	4623      	mov	r3, r4
 80058ce:	462f      	mov	r7, r5
 80058d0:	e025      	b.n	800591e <floor+0x96>
 80058d2:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <floor+0xfc>)
 80058d4:	fa42 f806 	asr.w	r8, r2, r6
 80058d8:	ea01 0208 	and.w	r2, r1, r8
 80058dc:	4302      	orrs	r2, r0
 80058de:	d01e      	beq.n	800591e <floor+0x96>
 80058e0:	a325      	add	r3, pc, #148	; (adr r3, 8005978 <floor+0xf0>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fc41 	bl	800016c <__adddf3>
 80058ea:	2200      	movs	r2, #0
 80058ec:	2300      	movs	r3, #0
 80058ee:	f7fb f883 	bl	80009f8 <__aeabi_dcmpgt>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d0ea      	beq.n	80058cc <floor+0x44>
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	bfbe      	ittt	lt
 80058fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80058fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8005902:	19a4      	addlt	r4, r4, r6
 8005904:	2500      	movs	r5, #0
 8005906:	ea24 0408 	bic.w	r4, r4, r8
 800590a:	e7df      	b.n	80058cc <floor+0x44>
 800590c:	2e33      	cmp	r6, #51	; 0x33
 800590e:	dd0a      	ble.n	8005926 <floor+0x9e>
 8005910:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005914:	d103      	bne.n	800591e <floor+0x96>
 8005916:	f7fa fc29 	bl	800016c <__adddf3>
 800591a:	4607      	mov	r7, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4638      	mov	r0, r7
 8005920:	4619      	mov	r1, r3
 8005922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005926:	f04f 32ff 	mov.w	r2, #4294967295
 800592a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800592e:	fa22 f808 	lsr.w	r8, r2, r8
 8005932:	ea18 0f00 	tst.w	r8, r0
 8005936:	d0f2      	beq.n	800591e <floor+0x96>
 8005938:	a30f      	add	r3, pc, #60	; (adr r3, 8005978 <floor+0xf0>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fc15 	bl	800016c <__adddf3>
 8005942:	2200      	movs	r2, #0
 8005944:	2300      	movs	r3, #0
 8005946:	f7fb f857 	bl	80009f8 <__aeabi_dcmpgt>
 800594a:	2800      	cmp	r0, #0
 800594c:	d0be      	beq.n	80058cc <floor+0x44>
 800594e:	2c00      	cmp	r4, #0
 8005950:	da02      	bge.n	8005958 <floor+0xd0>
 8005952:	2e14      	cmp	r6, #20
 8005954:	d103      	bne.n	800595e <floor+0xd6>
 8005956:	3401      	adds	r4, #1
 8005958:	ea25 0508 	bic.w	r5, r5, r8
 800595c:	e7b6      	b.n	80058cc <floor+0x44>
 800595e:	2301      	movs	r3, #1
 8005960:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005964:	fa03 f606 	lsl.w	r6, r3, r6
 8005968:	4435      	add	r5, r6
 800596a:	42bd      	cmp	r5, r7
 800596c:	bf38      	it	cc
 800596e:	18e4      	addcc	r4, r4, r3
 8005970:	e7f2      	b.n	8005958 <floor+0xd0>
 8005972:	2500      	movs	r5, #0
 8005974:	462c      	mov	r4, r5
 8005976:	e7a9      	b.n	80058cc <floor+0x44>
 8005978:	8800759c 	.word	0x8800759c
 800597c:	7e37e43c 	.word	0x7e37e43c
 8005980:	bff00000 	.word	0xbff00000
 8005984:	000fffff 	.word	0x000fffff

08005988 <scalbn>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800598e:	4604      	mov	r4, r0
 8005990:	460d      	mov	r5, r1
 8005992:	4617      	mov	r7, r2
 8005994:	460b      	mov	r3, r1
 8005996:	b996      	cbnz	r6, 80059be <scalbn+0x36>
 8005998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800599c:	4303      	orrs	r3, r0
 800599e:	d039      	beq.n	8005a14 <scalbn+0x8c>
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <scalbn+0xf0>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	f7fa fd98 	bl	80004d8 <__aeabi_dmul>
 80059a8:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <scalbn+0xf4>)
 80059aa:	4604      	mov	r4, r0
 80059ac:	429f      	cmp	r7, r3
 80059ae:	460d      	mov	r5, r1
 80059b0:	da0f      	bge.n	80059d2 <scalbn+0x4a>
 80059b2:	a32d      	add	r3, pc, #180	; (adr r3, 8005a68 <scalbn+0xe0>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f7fa fd8e 	bl	80004d8 <__aeabi_dmul>
 80059bc:	e006      	b.n	80059cc <scalbn+0x44>
 80059be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80059c2:	4296      	cmp	r6, r2
 80059c4:	d10a      	bne.n	80059dc <scalbn+0x54>
 80059c6:	4602      	mov	r2, r0
 80059c8:	f7fa fbd0 	bl	800016c <__adddf3>
 80059cc:	4604      	mov	r4, r0
 80059ce:	460d      	mov	r5, r1
 80059d0:	e020      	b.n	8005a14 <scalbn+0x8c>
 80059d2:	460b      	mov	r3, r1
 80059d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80059d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80059dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80059e0:	19b9      	adds	r1, r7, r6
 80059e2:	4291      	cmp	r1, r2
 80059e4:	dd0e      	ble.n	8005a04 <scalbn+0x7c>
 80059e6:	a322      	add	r3, pc, #136	; (adr r3, 8005a70 <scalbn+0xe8>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80059f0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80059f4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80059f8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80059fc:	4820      	ldr	r0, [pc, #128]	; (8005a80 <scalbn+0xf8>)
 80059fe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005a02:	e7d9      	b.n	80059b8 <scalbn+0x30>
 8005a04:	2900      	cmp	r1, #0
 8005a06:	dd08      	ble.n	8005a1a <scalbn+0x92>
 8005a08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005a14:	4620      	mov	r0, r4
 8005a16:	4629      	mov	r1, r5
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005a1e:	da16      	bge.n	8005a4e <scalbn+0xc6>
 8005a20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a24:	429f      	cmp	r7, r3
 8005a26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005a2a:	dd08      	ble.n	8005a3e <scalbn+0xb6>
 8005a2c:	4c15      	ldr	r4, [pc, #84]	; (8005a84 <scalbn+0xfc>)
 8005a2e:	4814      	ldr	r0, [pc, #80]	; (8005a80 <scalbn+0xf8>)
 8005a30:	f363 74df 	bfi	r4, r3, #31, #1
 8005a34:	a30e      	add	r3, pc, #56	; (adr r3, 8005a70 <scalbn+0xe8>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	e7bc      	b.n	80059b8 <scalbn+0x30>
 8005a3e:	4c12      	ldr	r4, [pc, #72]	; (8005a88 <scalbn+0x100>)
 8005a40:	4812      	ldr	r0, [pc, #72]	; (8005a8c <scalbn+0x104>)
 8005a42:	f363 74df 	bfi	r4, r3, #31, #1
 8005a46:	a308      	add	r3, pc, #32	; (adr r3, 8005a68 <scalbn+0xe0>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	e7f5      	b.n	8005a3a <scalbn+0xb2>
 8005a4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a52:	3136      	adds	r1, #54	; 0x36
 8005a54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4629      	mov	r1, r5
 8005a60:	2200      	movs	r2, #0
 8005a62:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <scalbn+0x108>)
 8005a64:	e7a8      	b.n	80059b8 <scalbn+0x30>
 8005a66:	bf00      	nop
 8005a68:	c2f8f359 	.word	0xc2f8f359
 8005a6c:	01a56e1f 	.word	0x01a56e1f
 8005a70:	8800759c 	.word	0x8800759c
 8005a74:	7e37e43c 	.word	0x7e37e43c
 8005a78:	43500000 	.word	0x43500000
 8005a7c:	ffff3cb0 	.word	0xffff3cb0
 8005a80:	8800759c 	.word	0x8800759c
 8005a84:	7e37e43c 	.word	0x7e37e43c
 8005a88:	01a56e1f 	.word	0x01a56e1f
 8005a8c:	c2f8f359 	.word	0xc2f8f359
 8005a90:	3c900000 	.word	0x3c900000

08005a94 <_init>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr

08005aa0 <_fini>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr
